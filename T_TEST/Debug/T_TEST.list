
T_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000694c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08006a60  08006a60  00016a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d60  08006d60  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006d60  08006d60  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d60  08006d60  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d60  08006d60  00016d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d64  08006d64  00016d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200001dc  08006f44  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08006f44  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009441  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001661  00000000  00000000  00029646  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000748  00000000  00000000  0002aca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b0  00000000  00000000  0002b3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017725  00000000  00000000  0002baa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007519  00000000  00000000  000431c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008772c  00000000  00000000  0004a6de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1e0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a48  00000000  00000000  000d1e88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a44 	.word	0x08006a44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006a44 	.word	0x08006a44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d84:	b5b0      	push	{r4, r5, r7, lr}
 8000d86:	b092      	sub	sp, #72	; 0x48
 8000d88:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d8a:	f000 fa89 	bl	80012a0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d8e:	f000 f857 	bl	8000e40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d92:	f000 f90d 	bl	8000fb0 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000d96:	f000 f8a3 	bl	8000ee0 <MX_ADC1_Init>
	MX_USART1_UART_Init();
 8000d9a:	f000 f8df 	bl	8000f5c <MX_USART1_UART_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		e=1;
 8000d9e:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <main+0xa4>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 8000da4:	4821      	ldr	r0, [pc, #132]	; (8000e2c <main+0xa8>)
 8000da6:	f000 fbd7 	bl	8001558 <HAL_ADC_Start>
		if(HAL_ADC_PollForConversion(&hadc1,4)==HAL_OK)
 8000daa:	2104      	movs	r1, #4
 8000dac:	481f      	ldr	r0, [pc, #124]	; (8000e2c <main+0xa8>)
 8000dae:	f000 fc81 	bl	80016b4 <HAL_ADC_PollForConversion>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d132      	bne.n	8000e1e <main+0x9a>
		{
			b=HAL_ADC_GetValue(&hadc1);
 8000db8:	481c      	ldr	r0, [pc, #112]	; (8000e2c <main+0xa8>)
 8000dba:	f000 fd81 	bl	80018c0 <HAL_ADC_GetValue>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff87 	bl	8000cd4 <__aeabi_ui2f>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <main+0xac>)
 8000dca:	601a      	str	r2, [r3, #0]
			//printf("\rADC0 = %u\n",HAL_ADC_GetValue(&hadc1));
			char uart2Buffer[50];
			snprintf(uart2Buffer, sizeof(uart2Buffer), "b:%.2f c:%.2f\r\n", b, c);
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <main+0xac>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fb29 	bl	8000428 <__aeabi_f2d>
 8000dd6:	4604      	mov	r4, r0
 8000dd8:	460d      	mov	r5, r1
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <main+0xb0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fb22 	bl	8000428 <__aeabi_f2d>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	1d38      	adds	r0, r7, #4
 8000dea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000dee:	e9cd 4500 	strd	r4, r5, [sp]
 8000df2:	4a11      	ldr	r2, [pc, #68]	; (8000e38 <main+0xb4>)
 8000df4:	2132      	movs	r1, #50	; 0x32
 8000df6:	f002 fee9 	bl	8003bcc <sniprintf>
			if (HAL_UART_Transmit(&huart1, (uint8_t *)uart2Buffer, strlen(uart2Buffer), HAL_MAX_DELAY)==HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff f9a7 	bl	8000150 <strlen>
 8000e02:	4603      	mov	r3, r0
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	1d39      	adds	r1, r7, #4
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <main+0xb8>)
 8000e0e:	f001 fef7 	bl	8002c00 <HAL_UART_Transmit>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <main+0x9a>
			{
				e=10;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <main+0xa4>)
 8000e1a:	220a      	movs	r2, #10
 8000e1c:	601a      	str	r2, [r3, #0]
			}
		}
		HAL_Delay(200);
 8000e1e:	20c8      	movs	r0, #200	; 0xc8
 8000e20:	f000 faa0 	bl	8001364 <HAL_Delay>
		e=1;
 8000e24:	e7bb      	b.n	8000d9e <main+0x1a>
 8000e26:	bf00      	nop
 8000e28:	200002fc 	.word	0x200002fc
 8000e2c:	20000278 	.word	0x20000278
 8000e30:	20000204 	.word	0x20000204
 8000e34:	200002f0 	.word	0x200002f0
 8000e38:	08006a60 	.word	0x08006a60
 8000e3c:	200002a8 	.word	0x200002a8

08000e40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b094      	sub	sp, #80	; 0x50
 8000e44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4a:	2228      	movs	r2, #40	; 0x28
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 f880 	bl	8002f54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e70:	2302      	movs	r3, #2
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e74:	2301      	movs	r3, #1
 8000e76:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e78:	2310      	movs	r3, #16
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 f8f9 	bl	800207c <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x54>
	{
		Error_Handler();
 8000e90:	f000 f8b0 	bl	8000ff4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e94:	230f      	movs	r3, #15
 8000e96:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f001 fb64 	bl	800257c <HAL_RCC_ClockConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0x7e>
	{
		Error_Handler();
 8000eba:	f000 f89b 	bl	8000ff4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 fce5 	bl	8002898 <HAL_RCCEx_PeriphCLKConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000ed4:	f000 f88e 	bl	8000ff4 <Error_Handler>
	}
}
 8000ed8:	bf00      	nop
 8000eda:	3750      	adds	r7, #80	; 0x50
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <MX_ADC1_Init+0x74>)
 8000ef2:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <MX_ADC1_Init+0x78>)
 8000ef4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MX_ADC1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_ADC1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_ADC1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <MX_ADC1_Init+0x74>)
 8000f0a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000f0e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <MX_ADC1_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_ADC1_Init+0x74>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <MX_ADC1_Init+0x74>)
 8000f1e:	f000 fa43 	bl	80013a8 <HAL_ADC_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_ADC1_Init+0x4c>
	{
		Error_Handler();
 8000f28:	f000 f864 	bl	8000ff4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000f34:	2301      	movs	r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_ADC1_Init+0x74>)
 8000f3e:	f000 fccb 	bl	80018d8 <HAL_ADC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0x6c>
	{
		Error_Handler();
 8000f48:	f000 f854 	bl	8000ff4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000278 	.word	0x20000278
 8000f58:	40012400 	.word	0x40012400

08000f5c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <MX_USART1_UART_Init+0x50>)
 8000f64:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f6c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_USART1_UART_Init+0x4c>)
 8000f94:	f001 fde4 	bl	8002b60 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8000f9e:	f000 f829 	bl	8000ff4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200002a8 	.word	0x200002a8
 8000fac:	40013800 	.word	0x40013800

08000fb0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_GPIO_Init+0x40>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <MX_GPIO_Init+0x40>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6193      	str	r3, [r2, #24]
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_GPIO_Init+0x40>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_GPIO_Init+0x40>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <MX_GPIO_Init+0x40>)
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	6193      	str	r3, [r2, #24]
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <MX_GPIO_Init+0x40>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff8:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ffa:	e7fe      	b.n	8000ffa <Error_Handler+0x6>

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_MspInit+0x5c>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	4a14      	ldr	r2, [pc, #80]	; (8001058 <HAL_MspInit+0x5c>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6193      	str	r3, [r2, #24]
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_MspInit+0x5c>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <HAL_MspInit+0x5c>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <HAL_MspInit+0x5c>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001024:	61d3      	str	r3, [r2, #28]
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_MspInit+0x5c>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_MspInit+0x60>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_MspInit+0x60>)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	40021000 	.word	0x40021000
 800105c:	40010000 	.word	0x40010000

08001060 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a14      	ldr	r2, [pc, #80]	; (80010cc <HAL_ADC_MspInit+0x6c>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d121      	bne.n	80010c4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <HAL_ADC_MspInit+0x70>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <HAL_ADC_MspInit+0x70>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <HAL_ADC_MspInit+0x70>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_ADC_MspInit+0x70>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <HAL_ADC_MspInit+0x70>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_ADC_MspInit+0x70>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010b0:	2301      	movs	r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b4:	2303      	movs	r3, #3
 80010b6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <HAL_ADC_MspInit+0x74>)
 80010c0:	f000 fe82 	bl	8001dc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010c4:	bf00      	nop
 80010c6:	3720      	adds	r7, #32
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40012400 	.word	0x40012400
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010800 	.word	0x40010800

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a22      	ldr	r2, [pc, #136]	; (800117c <HAL_UART_MspInit+0xa4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d13d      	bne.n	8001174 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <HAL_UART_MspInit+0xa8>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a20      	ldr	r2, [pc, #128]	; (8001180 <HAL_UART_MspInit+0xa8>)
 80010fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <HAL_UART_MspInit+0xa8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <HAL_UART_MspInit+0xa8>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a1a      	ldr	r2, [pc, #104]	; (8001180 <HAL_UART_MspInit+0xa8>)
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_UART_MspInit+0xa8>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0308 	and.w	r3, r3, #8
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001128:	2340      	movs	r3, #64	; 0x40
 800112a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	4812      	ldr	r0, [pc, #72]	; (8001184 <HAL_UART_MspInit+0xac>)
 800113c:	f000 fe44 	bl	8001dc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	480c      	ldr	r0, [pc, #48]	; (8001184 <HAL_UART_MspInit+0xac>)
 8001154:	f000 fe38 	bl	8001dc8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_UART_MspInit+0xb0>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
 800116e:	4a06      	ldr	r2, [pc, #24]	; (8001188 <HAL_UART_MspInit+0xb0>)
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40013800 	.word	0x40013800
 8001180:	40021000 	.word	0x40021000
 8001184:	40010c00 	.word	0x40010c00
 8001188:	40010000 	.word	0x40010000

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d2:	f000 f8ab 	bl	800132c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f001 fe78 	bl	8002f00 <__errno>
 8001210:	4602      	mov	r2, r0
 8001212:	230c      	movs	r3, #12
 8001214:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20005000 	.word	0x20005000
 800123c:	00000400 	.word	0x00000400
 8001240:	200001f8 	.word	0x200001f8
 8001244:	20000308 	.word	0x20000308

08001248 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001254:	f7ff fff8 	bl	8001248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001258:	480b      	ldr	r0, [pc, #44]	; (8001288 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800125a:	490c      	ldr	r1, [pc, #48]	; (800128c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800125c:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <LoopFillZerobss+0x16>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001260:	e002      	b.n	8001268 <LoopCopyDataInit>

08001262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001266:	3304      	adds	r3, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800126c:	d3f9      	bcc.n	8001262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001270:	4c09      	ldr	r4, [pc, #36]	; (8001298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001274:	e001      	b.n	800127a <LoopFillZerobss>

08001276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001278:	3204      	adds	r2, #4

0800127a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800127c:	d3fb      	bcc.n	8001276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127e:	f001 fe45 	bl	8002f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001282:	f7ff fd7f 	bl	8000d84 <main>
  bx lr
 8001286:	4770      	bx	lr
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001290:	08006d68 	.word	0x08006d68
  ldr r2, =_sbss
 8001294:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001298:	20000308 	.word	0x20000308

0800129c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC1_2_IRQHandler>
	...

080012a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_Init+0x28>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_Init+0x28>)
 80012aa:	f043 0310 	orr.w	r3, r3, #16
 80012ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f000 fd55 	bl	8001d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012b6:	200f      	movs	r0, #15
 80012b8:	f000 f808 	bl	80012cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012bc:	f7ff fe9e 	bl	8000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40022000 	.word	0x40022000

080012cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_InitTick+0x54>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_InitTick+0x58>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fd5f 	bl	8001dae <HAL_SYSTICK_Config>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00e      	b.n	8001318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b0f      	cmp	r3, #15
 80012fe:	d80a      	bhi.n	8001316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001300:	2200      	movs	r2, #0
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f000 fd35 	bl	8001d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800130c:	4a06      	ldr	r2, [pc, #24]	; (8001328 <HAL_InitTick+0x5c>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
 8001314:	e000      	b.n	8001318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000000 	.word	0x20000000
 8001324:	20000008 	.word	0x20000008
 8001328:	20000004 	.word	0x20000004

0800132c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_IncTick+0x1c>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_IncTick+0x20>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
 800133c:	4a03      	ldr	r2, [pc, #12]	; (800134c <HAL_IncTick+0x20>)
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	20000008 	.word	0x20000008
 800134c:	20000300 	.word	0x20000300

08001350 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b02      	ldr	r3, [pc, #8]	; (8001360 <HAL_GetTick+0x10>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr
 8001360:	20000300 	.word	0x20000300

08001364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800136c:	f7ff fff0 	bl	8001350 <HAL_GetTick>
 8001370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137c:	d005      	beq.n	800138a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_Delay+0x40>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4413      	add	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800138a:	bf00      	nop
 800138c:	f7ff ffe0 	bl	8001350 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	429a      	cmp	r2, r3
 800139a:	d8f7      	bhi.n	800138c <HAL_Delay+0x28>
  {
  }
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000008 	.word	0x20000008

080013a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e0be      	b.n	8001548 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d109      	bne.n	80013ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fe3a 	bl	8001060 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 fbc5 	bl	8001b7c <ADC_ConversionStop_Disable>
 80013f2:	4603      	mov	r3, r0
 80013f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f040 8099 	bne.w	8001536 <HAL_ADC_Init+0x18e>
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f040 8095 	bne.w	8001536 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001414:	f023 0302 	bic.w	r3, r3, #2
 8001418:	f043 0202 	orr.w	r2, r3, #2
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001428:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7b1b      	ldrb	r3, [r3, #12]
 800142e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001430:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	4313      	orrs	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001440:	d003      	beq.n	800144a <HAL_ADC_Init+0xa2>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d102      	bne.n	8001450 <HAL_ADC_Init+0xa8>
 800144a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144e:	e000      	b.n	8001452 <HAL_ADC_Init+0xaa>
 8001450:	2300      	movs	r3, #0
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	7d1b      	ldrb	r3, [r3, #20]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d119      	bne.n	8001494 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7b1b      	ldrb	r3, [r3, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d109      	bne.n	800147c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	3b01      	subs	r3, #1
 800146e:	035a      	lsls	r2, r3, #13
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	e00b      	b.n	8001494 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	f043 0220 	orr.w	r2, r3, #32
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	f043 0201 	orr.w	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	4b28      	ldr	r3, [pc, #160]	; (8001550 <HAL_ADC_Init+0x1a8>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	68b9      	ldr	r1, [r7, #8]
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c4:	d003      	beq.n	80014ce <HAL_ADC_Init+0x126>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d104      	bne.n	80014d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	051b      	lsls	r3, r3, #20
 80014d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_ADC_Init+0x1ac>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d10b      	bne.n	8001514 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	f023 0303 	bic.w	r3, r3, #3
 800150a:	f043 0201 	orr.w	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001512:	e018      	b.n	8001546 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	f023 0312 	bic.w	r3, r3, #18
 800151c:	f043 0210 	orr.w	r2, r3, #16
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	f043 0201 	orr.w	r2, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001534:	e007      	b.n	8001546 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	f043 0210 	orr.w	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001546:	7dfb      	ldrb	r3, [r7, #23]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	ffe1f7fd 	.word	0xffe1f7fd
 8001554:	ff1f0efe 	.word	0xff1f0efe

08001558 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_ADC_Start+0x1a>
 800156e:	2302      	movs	r3, #2
 8001570:	e098      	b.n	80016a4 <HAL_ADC_Start+0x14c>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 faa4 	bl	8001ac8 <ADC_Enable>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 8087 	bne.w	800169a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a41      	ldr	r2, [pc, #260]	; (80016ac <HAL_ADC_Start+0x154>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d105      	bne.n	80015b6 <HAL_ADC_Start+0x5e>
 80015aa:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <HAL_ADC_Start+0x158>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d115      	bne.n	80015e2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d026      	beq.n	800161e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015e0:	e01d      	b.n	800161e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a2f      	ldr	r2, [pc, #188]	; (80016b0 <HAL_ADC_Start+0x158>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d004      	beq.n	8001602 <HAL_ADC_Start+0xaa>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a2b      	ldr	r2, [pc, #172]	; (80016ac <HAL_ADC_Start+0x154>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d10d      	bne.n	800161e <HAL_ADC_Start+0xc6>
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_ADC_Start+0x158>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160a:	2b00      	cmp	r3, #0
 800160c:	d007      	beq.n	800161e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001616:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	f023 0206 	bic.w	r2, r3, #6
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	62da      	str	r2, [r3, #44]	; 0x2c
 8001636:	e002      	b.n	800163e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f06f 0202 	mvn.w	r2, #2
 800164e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800165a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800165e:	d113      	bne.n	8001688 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001664:	4a11      	ldr	r2, [pc, #68]	; (80016ac <HAL_ADC_Start+0x154>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d105      	bne.n	8001676 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_ADC_Start+0x158>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001672:	2b00      	cmp	r3, #0
 8001674:	d108      	bne.n	8001688 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	e00c      	b.n	80016a2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	e003      	b.n	80016a2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40012800 	.word	0x40012800
 80016b0:	40012400 	.word	0x40012400

080016b4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80016ca:	f7ff fe41 	bl	8001350 <HAL_GetTick>
 80016ce:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e2:	f043 0220 	orr.w	r2, r3, #32
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e0d3      	b.n	800189e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d131      	bne.n	8001768 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800170e:	2b00      	cmp	r3, #0
 8001710:	d12a      	bne.n	8001768 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001712:	e021      	b.n	8001758 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171a:	d01d      	beq.n	8001758 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <HAL_ADC_PollForConversion+0x7e>
 8001722:	f7ff fe15 	bl	8001350 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	429a      	cmp	r2, r3
 8001730:	d212      	bcs.n	8001758 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10b      	bne.n	8001758 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	f043 0204 	orr.w	r2, r3, #4
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e0a2      	b.n	800189e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0d6      	beq.n	8001714 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001766:	e070      	b.n	800184a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001768:	4b4f      	ldr	r3, [pc, #316]	; (80018a8 <HAL_ADC_PollForConversion+0x1f4>)
 800176a:	681c      	ldr	r4, [r3, #0]
 800176c:	2002      	movs	r0, #2
 800176e:	f001 f949 	bl	8002a04 <HAL_RCCEx_GetPeriphCLKFreq>
 8001772:	4603      	mov	r3, r0
 8001774:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6919      	ldr	r1, [r3, #16]
 800177e:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <HAL_ADC_PollForConversion+0x1f8>)
 8001780:	400b      	ands	r3, r1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d118      	bne.n	80017b8 <HAL_ADC_PollForConversion+0x104>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68d9      	ldr	r1, [r3, #12]
 800178c:	4b48      	ldr	r3, [pc, #288]	; (80018b0 <HAL_ADC_PollForConversion+0x1fc>)
 800178e:	400b      	ands	r3, r1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d111      	bne.n	80017b8 <HAL_ADC_PollForConversion+0x104>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6919      	ldr	r1, [r3, #16]
 800179a:	4b46      	ldr	r3, [pc, #280]	; (80018b4 <HAL_ADC_PollForConversion+0x200>)
 800179c:	400b      	ands	r3, r1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d108      	bne.n	80017b4 <HAL_ADC_PollForConversion+0x100>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68d9      	ldr	r1, [r3, #12]
 80017a8:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <HAL_ADC_PollForConversion+0x204>)
 80017aa:	400b      	ands	r3, r1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_ADC_PollForConversion+0x100>
 80017b0:	2314      	movs	r3, #20
 80017b2:	e020      	b.n	80017f6 <HAL_ADC_PollForConversion+0x142>
 80017b4:	2329      	movs	r3, #41	; 0x29
 80017b6:	e01e      	b.n	80017f6 <HAL_ADC_PollForConversion+0x142>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6919      	ldr	r1, [r3, #16]
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <HAL_ADC_PollForConversion+0x200>)
 80017c0:	400b      	ands	r3, r1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d106      	bne.n	80017d4 <HAL_ADC_PollForConversion+0x120>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68d9      	ldr	r1, [r3, #12]
 80017cc:	4b3a      	ldr	r3, [pc, #232]	; (80018b8 <HAL_ADC_PollForConversion+0x204>)
 80017ce:	400b      	ands	r3, r1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00d      	beq.n	80017f0 <HAL_ADC_PollForConversion+0x13c>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6919      	ldr	r1, [r3, #16]
 80017da:	4b38      	ldr	r3, [pc, #224]	; (80018bc <HAL_ADC_PollForConversion+0x208>)
 80017dc:	400b      	ands	r3, r1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d108      	bne.n	80017f4 <HAL_ADC_PollForConversion+0x140>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68d9      	ldr	r1, [r3, #12]
 80017e8:	4b34      	ldr	r3, [pc, #208]	; (80018bc <HAL_ADC_PollForConversion+0x208>)
 80017ea:	400b      	ands	r3, r1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_ADC_PollForConversion+0x140>
 80017f0:	2354      	movs	r3, #84	; 0x54
 80017f2:	e000      	b.n	80017f6 <HAL_ADC_PollForConversion+0x142>
 80017f4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80017f6:	fb02 f303 	mul.w	r3, r2, r3
 80017fa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017fc:	e021      	b.n	8001842 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001804:	d01a      	beq.n	800183c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d007      	beq.n	800181c <HAL_ADC_PollForConversion+0x168>
 800180c:	f7ff fda0 	bl	8001350 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d20f      	bcs.n	800183c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d90b      	bls.n	800183c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	f043 0204 	orr.w	r2, r3, #4
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e030      	b.n	800189e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3301      	adds	r3, #1
 8001840:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	429a      	cmp	r2, r3
 8001848:	d8d9      	bhi.n	80017fe <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f06f 0212 	mvn.w	r2, #18
 8001852:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800186a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800186e:	d115      	bne.n	800189c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001874:	2b00      	cmp	r3, #0
 8001876:	d111      	bne.n	800189c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	f043 0201 	orr.w	r2, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	371c      	adds	r7, #28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd90      	pop	{r4, r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000000 	.word	0x20000000
 80018ac:	24924924 	.word	0x24924924
 80018b0:	00924924 	.word	0x00924924
 80018b4:	12492492 	.word	0x12492492
 80018b8:	00492492 	.word	0x00492492
 80018bc:	00249249 	.word	0x00249249

080018c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x20>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e0dc      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x1da>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b06      	cmp	r3, #6
 8001906:	d81c      	bhi.n	8001942 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	3b05      	subs	r3, #5
 800191a:	221f      	movs	r2, #31
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	4019      	ands	r1, r3
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	6818      	ldr	r0, [r3, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	3b05      	subs	r3, #5
 8001934:	fa00 f203 	lsl.w	r2, r0, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	430a      	orrs	r2, r1
 800193e:	635a      	str	r2, [r3, #52]	; 0x34
 8001940:	e03c      	b.n	80019bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d81c      	bhi.n	8001984 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	3b23      	subs	r3, #35	; 0x23
 800195c:	221f      	movs	r2, #31
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	4019      	ands	r1, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	3b23      	subs	r3, #35	; 0x23
 8001976:	fa00 f203 	lsl.w	r2, r0, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	631a      	str	r2, [r3, #48]	; 0x30
 8001982:	e01b      	b.n	80019bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	3b41      	subs	r3, #65	; 0x41
 8001996:	221f      	movs	r2, #31
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	4019      	ands	r1, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	3b41      	subs	r3, #65	; 0x41
 80019b0:	fa00 f203 	lsl.w	r2, r0, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b09      	cmp	r3, #9
 80019c2:	d91c      	bls.n	80019fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68d9      	ldr	r1, [r3, #12]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	3b1e      	subs	r3, #30
 80019d6:	2207      	movs	r2, #7
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	4019      	ands	r1, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6898      	ldr	r0, [r3, #8]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	3b1e      	subs	r3, #30
 80019f0:	fa00 f203 	lsl.w	r2, r0, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	60da      	str	r2, [r3, #12]
 80019fc:	e019      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6919      	ldr	r1, [r3, #16]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	2207      	movs	r2, #7
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	4019      	ands	r1, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	6898      	ldr	r0, [r3, #8]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4613      	mov	r3, r2
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	4413      	add	r3, r2
 8001a26:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b10      	cmp	r3, #16
 8001a38:	d003      	beq.n	8001a42 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a3e:	2b11      	cmp	r3, #17
 8001a40:	d132      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <HAL_ADC_ConfigChannel+0x1e4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d125      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d126      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a68:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b10      	cmp	r3, #16
 8001a70:	d11a      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a78:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7c:	0c9a      	lsrs	r2, r3, #18
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a88:	e002      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f9      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x1b2>
 8001a96:	e007      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	f043 0220 	orr.w	r2, r3, #32
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	40012400 	.word	0x40012400
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	431bde83 	.word	0x431bde83

08001ac8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d040      	beq.n	8001b68 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f042 0201 	orr.w	r2, r2, #1
 8001af4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001af6:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <ADC_Enable+0xac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1f      	ldr	r2, [pc, #124]	; (8001b78 <ADC_Enable+0xb0>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	0c9b      	lsrs	r3, r3, #18
 8001b02:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b04:	e002      	b.n	8001b0c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f9      	bne.n	8001b06 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b12:	f7ff fc1d 	bl	8001350 <HAL_GetTick>
 8001b16:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b18:	e01f      	b.n	8001b5a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b1a:	f7ff fc19 	bl	8001350 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d918      	bls.n	8001b5a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d011      	beq.n	8001b5a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	f043 0210 	orr.w	r2, r3, #16
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	f043 0201 	orr.w	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e007      	b.n	8001b6a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d1d8      	bne.n	8001b1a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000000 	.word	0x20000000
 8001b78:	431bde83 	.word	0x431bde83

08001b7c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d12e      	bne.n	8001bf4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0201 	bic.w	r2, r2, #1
 8001ba4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ba6:	f7ff fbd3 	bl	8001350 <HAL_GetTick>
 8001baa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bac:	e01b      	b.n	8001be6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bae:	f7ff fbcf 	bl	8001350 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d914      	bls.n	8001be6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d10d      	bne.n	8001be6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bce:	f043 0210 	orr.w	r2, r3, #16
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	f043 0201 	orr.w	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e007      	b.n	8001bf6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d0dc      	beq.n	8001bae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c32:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60d3      	str	r3, [r2, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <__NVIC_GetPriorityGrouping+0x18>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f003 0307 	and.w	r3, r3, #7
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db0a      	blt.n	8001c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	490c      	ldr	r1, [pc, #48]	; (8001cb0 <__NVIC_SetPriority+0x4c>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	0112      	lsls	r2, r2, #4
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	440b      	add	r3, r1
 8001c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c8c:	e00a      	b.n	8001ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4908      	ldr	r1, [pc, #32]	; (8001cb4 <__NVIC_SetPriority+0x50>)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	3b04      	subs	r3, #4
 8001c9c:	0112      	lsls	r2, r2, #4
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	761a      	strb	r2, [r3, #24]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000e100 	.word	0xe000e100
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f1c3 0307 	rsb	r3, r3, #7
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	bf28      	it	cs
 8001cd6:	2304      	movcs	r3, #4
 8001cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	2b06      	cmp	r3, #6
 8001ce0:	d902      	bls.n	8001ce8 <NVIC_EncodePriority+0x30>
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3b03      	subs	r3, #3
 8001ce6:	e000      	b.n	8001cea <NVIC_EncodePriority+0x32>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	43d9      	mvns	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	4313      	orrs	r3, r2
         );
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d2c:	d301      	bcc.n	8001d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e00f      	b.n	8001d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <SysTick_Config+0x40>)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d40:	f7ff ff90 	bl	8001c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d44:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <SysTick_Config+0x40>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <SysTick_Config+0x40>)
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	e000e010 	.word	0xe000e010

08001d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ff49 	bl	8001c00 <__NVIC_SetPriorityGrouping>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d88:	f7ff ff5e 	bl	8001c48 <__NVIC_GetPriorityGrouping>
 8001d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	6978      	ldr	r0, [r7, #20]
 8001d94:	f7ff ff90 	bl	8001cb8 <NVIC_EncodePriority>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9e:	4611      	mov	r1, r2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff ff5f 	bl	8001c64 <__NVIC_SetPriority>
}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffb0 	bl	8001d1c <SysTick_Config>
 8001dbc:	4603      	mov	r3, r0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b08b      	sub	sp, #44	; 0x2c
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dda:	e127      	b.n	800202c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	69fa      	ldr	r2, [r7, #28]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	f040 8116 	bne.w	8002026 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b12      	cmp	r3, #18
 8001e00:	d034      	beq.n	8001e6c <HAL_GPIO_Init+0xa4>
 8001e02:	2b12      	cmp	r3, #18
 8001e04:	d80d      	bhi.n	8001e22 <HAL_GPIO_Init+0x5a>
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d02b      	beq.n	8001e62 <HAL_GPIO_Init+0x9a>
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d804      	bhi.n	8001e18 <HAL_GPIO_Init+0x50>
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d031      	beq.n	8001e76 <HAL_GPIO_Init+0xae>
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d01c      	beq.n	8001e50 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e16:	e048      	b.n	8001eaa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d043      	beq.n	8001ea4 <HAL_GPIO_Init+0xdc>
 8001e1c:	2b11      	cmp	r3, #17
 8001e1e:	d01b      	beq.n	8001e58 <HAL_GPIO_Init+0x90>
          break;
 8001e20:	e043      	b.n	8001eaa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e22:	4a89      	ldr	r2, [pc, #548]	; (8002048 <HAL_GPIO_Init+0x280>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d026      	beq.n	8001e76 <HAL_GPIO_Init+0xae>
 8001e28:	4a87      	ldr	r2, [pc, #540]	; (8002048 <HAL_GPIO_Init+0x280>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d806      	bhi.n	8001e3c <HAL_GPIO_Init+0x74>
 8001e2e:	4a87      	ldr	r2, [pc, #540]	; (800204c <HAL_GPIO_Init+0x284>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d020      	beq.n	8001e76 <HAL_GPIO_Init+0xae>
 8001e34:	4a86      	ldr	r2, [pc, #536]	; (8002050 <HAL_GPIO_Init+0x288>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d01d      	beq.n	8001e76 <HAL_GPIO_Init+0xae>
          break;
 8001e3a:	e036      	b.n	8001eaa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e3c:	4a85      	ldr	r2, [pc, #532]	; (8002054 <HAL_GPIO_Init+0x28c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d019      	beq.n	8001e76 <HAL_GPIO_Init+0xae>
 8001e42:	4a85      	ldr	r2, [pc, #532]	; (8002058 <HAL_GPIO_Init+0x290>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d016      	beq.n	8001e76 <HAL_GPIO_Init+0xae>
 8001e48:	4a84      	ldr	r2, [pc, #528]	; (800205c <HAL_GPIO_Init+0x294>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d013      	beq.n	8001e76 <HAL_GPIO_Init+0xae>
          break;
 8001e4e:	e02c      	b.n	8001eaa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	623b      	str	r3, [r7, #32]
          break;
 8001e56:	e028      	b.n	8001eaa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e023      	b.n	8001eaa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	3308      	adds	r3, #8
 8001e68:	623b      	str	r3, [r7, #32]
          break;
 8001e6a:	e01e      	b.n	8001eaa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	330c      	adds	r3, #12
 8001e72:	623b      	str	r3, [r7, #32]
          break;
 8001e74:	e019      	b.n	8001eaa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d102      	bne.n	8001e84 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e7e:	2304      	movs	r3, #4
 8001e80:	623b      	str	r3, [r7, #32]
          break;
 8001e82:	e012      	b.n	8001eaa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d105      	bne.n	8001e98 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	611a      	str	r2, [r3, #16]
          break;
 8001e96:	e008      	b.n	8001eaa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69fa      	ldr	r2, [r7, #28]
 8001ea0:	615a      	str	r2, [r3, #20]
          break;
 8001ea2:	e002      	b.n	8001eaa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2bff      	cmp	r3, #255	; 0xff
 8001eae:	d801      	bhi.n	8001eb4 <HAL_GPIO_Init+0xec>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	e001      	b.n	8001eb8 <HAL_GPIO_Init+0xf0>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	2bff      	cmp	r3, #255	; 0xff
 8001ebe:	d802      	bhi.n	8001ec6 <HAL_GPIO_Init+0xfe>
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_Init+0x104>
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	3b08      	subs	r3, #8
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	210f      	movs	r1, #15
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	401a      	ands	r2, r3
 8001ede:	6a39      	ldr	r1, [r7, #32]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 8096 	beq.w	8002026 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001efa:	4b59      	ldr	r3, [pc, #356]	; (8002060 <HAL_GPIO_Init+0x298>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	4a58      	ldr	r2, [pc, #352]	; (8002060 <HAL_GPIO_Init+0x298>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6193      	str	r3, [r2, #24]
 8001f06:	4b56      	ldr	r3, [pc, #344]	; (8002060 <HAL_GPIO_Init+0x298>)
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f12:	4a54      	ldr	r2, [pc, #336]	; (8002064 <HAL_GPIO_Init+0x29c>)
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3302      	adds	r3, #2
 8001f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	220f      	movs	r2, #15
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4013      	ands	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4b      	ldr	r2, [pc, #300]	; (8002068 <HAL_GPIO_Init+0x2a0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_GPIO_Init+0x19e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4a      	ldr	r2, [pc, #296]	; (800206c <HAL_GPIO_Init+0x2a4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00d      	beq.n	8001f62 <HAL_GPIO_Init+0x19a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a49      	ldr	r2, [pc, #292]	; (8002070 <HAL_GPIO_Init+0x2a8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <HAL_GPIO_Init+0x196>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a48      	ldr	r2, [pc, #288]	; (8002074 <HAL_GPIO_Init+0x2ac>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d101      	bne.n	8001f5a <HAL_GPIO_Init+0x192>
 8001f56:	2303      	movs	r3, #3
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x1a0>
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	e004      	b.n	8001f68 <HAL_GPIO_Init+0x1a0>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e002      	b.n	8001f68 <HAL_GPIO_Init+0x1a0>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_Init+0x1a0>
 8001f66:	2300      	movs	r3, #0
 8001f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6a:	f002 0203 	and.w	r2, r2, #3
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	4093      	lsls	r3, r2
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f78:	493a      	ldr	r1, [pc, #232]	; (8002064 <HAL_GPIO_Init+0x29c>)
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	089b      	lsrs	r3, r3, #2
 8001f7e:	3302      	adds	r3, #2
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d006      	beq.n	8001fa0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f92:	4b39      	ldr	r3, [pc, #228]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	4938      	ldr	r1, [pc, #224]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
 8001f9e:	e006      	b.n	8001fae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fa0:	4b35      	ldr	r3, [pc, #212]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	4933      	ldr	r1, [pc, #204]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d006      	beq.n	8001fc8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fba:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	492e      	ldr	r1, [pc, #184]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60cb      	str	r3, [r1, #12]
 8001fc6:	e006      	b.n	8001fd6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	4929      	ldr	r1, [pc, #164]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fe2:	4b25      	ldr	r3, [pc, #148]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	4924      	ldr	r1, [pc, #144]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
 8001fee:	e006      	b.n	8001ffe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ff0:	4b21      	ldr	r3, [pc, #132]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	491f      	ldr	r1, [pc, #124]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800200a:	4b1b      	ldr	r3, [pc, #108]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	491a      	ldr	r1, [pc, #104]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
 8002016:	e006      	b.n	8002026 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002018:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	43db      	mvns	r3, r3
 8002020:	4915      	ldr	r1, [pc, #84]	; (8002078 <HAL_GPIO_Init+0x2b0>)
 8002022:	4013      	ands	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	3301      	adds	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f aed0 	bne.w	8001ddc <HAL_GPIO_Init+0x14>
  }
}
 800203c:	bf00      	nop
 800203e:	372c      	adds	r7, #44	; 0x2c
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	10210000 	.word	0x10210000
 800204c:	10110000 	.word	0x10110000
 8002050:	10120000 	.word	0x10120000
 8002054:	10310000 	.word	0x10310000
 8002058:	10320000 	.word	0x10320000
 800205c:	10220000 	.word	0x10220000
 8002060:	40021000 	.word	0x40021000
 8002064:	40010000 	.word	0x40010000
 8002068:	40010800 	.word	0x40010800
 800206c:	40010c00 	.word	0x40010c00
 8002070:	40011000 	.word	0x40011000
 8002074:	40011400 	.word	0x40011400
 8002078:	40010400 	.word	0x40010400

0800207c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e26c      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8087 	beq.w	80021aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800209c:	4b92      	ldr	r3, [pc, #584]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d00c      	beq.n	80020c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020a8:	4b8f      	ldr	r3, [pc, #572]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d112      	bne.n	80020da <HAL_RCC_OscConfig+0x5e>
 80020b4:	4b8c      	ldr	r3, [pc, #560]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c0:	d10b      	bne.n	80020da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c2:	4b89      	ldr	r3, [pc, #548]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d06c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x12c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d168      	bne.n	80021a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e246      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x76>
 80020e4:	4b80      	ldr	r3, [pc, #512]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a7f      	ldr	r2, [pc, #508]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	e02e      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x98>
 80020fa:	4b7b      	ldr	r3, [pc, #492]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7a      	ldr	r2, [pc, #488]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b78      	ldr	r3, [pc, #480]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a77      	ldr	r2, [pc, #476]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e01d      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0xbc>
 800211e:	4b72      	ldr	r3, [pc, #456]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a71      	ldr	r2, [pc, #452]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b6f      	ldr	r3, [pc, #444]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a6e      	ldr	r2, [pc, #440]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 8002138:	4b6b      	ldr	r3, [pc, #428]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a6a      	ldr	r2, [pc, #424]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800213e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b68      	ldr	r3, [pc, #416]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a67      	ldr	r2, [pc, #412]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800214a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff f8fa 	bl	8001350 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002160:	f7ff f8f6 	bl	8001350 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	; 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e1fa      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b5d      	ldr	r3, [pc, #372]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0xe4>
 800217e:	e014      	b.n	80021aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff f8e6 	bl	8001350 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002188:	f7ff f8e2 	bl	8001350 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1e6      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	4b53      	ldr	r3, [pc, #332]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x10c>
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d063      	beq.n	800227e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021b6:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021c2:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d11c      	bne.n	8002208 <HAL_RCC_OscConfig+0x18c>
 80021ce:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d116      	bne.n	8002208 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021da:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <HAL_RCC_OscConfig+0x176>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e1ba      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f2:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4939      	ldr	r1, [pc, #228]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	e03a      	b.n	800227e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002210:	4b36      	ldr	r3, [pc, #216]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7ff f89b 	bl	8001350 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221e:	f7ff f897 	bl	8001350 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e19b      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4927      	ldr	r1, [pc, #156]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
 8002250:	e015      	b.n	800227e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002252:	4b26      	ldr	r3, [pc, #152]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff f87a 	bl	8001350 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002260:	f7ff f876 	bl	8001350 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e17a      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d03a      	beq.n	8002300 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d019      	beq.n	80022c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002292:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <HAL_RCC_OscConfig+0x274>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002298:	f7ff f85a 	bl	8001350 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a0:	f7ff f856 	bl	8001350 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e15a      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022be:	2001      	movs	r0, #1
 80022c0:	f000 facc 	bl	800285c <RCC_Delay>
 80022c4:	e01c      	b.n	8002300 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_RCC_OscConfig+0x274>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7ff f840 	bl	8001350 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d2:	e00f      	b.n	80022f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d4:	f7ff f83c 	bl	8001350 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d908      	bls.n	80022f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e140      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	42420000 	.word	0x42420000
 80022f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f4:	4b9e      	ldr	r3, [pc, #632]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e9      	bne.n	80022d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a6 	beq.w	800245a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002312:	4b97      	ldr	r3, [pc, #604]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	4b94      	ldr	r3, [pc, #592]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a93      	ldr	r2, [pc, #588]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002328:	61d3      	str	r3, [r2, #28]
 800232a:	4b91      	ldr	r3, [pc, #580]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	4b8e      	ldr	r3, [pc, #568]	; (8002574 <HAL_RCC_OscConfig+0x4f8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d118      	bne.n	8002378 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002346:	4b8b      	ldr	r3, [pc, #556]	; (8002574 <HAL_RCC_OscConfig+0x4f8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a8a      	ldr	r2, [pc, #552]	; (8002574 <HAL_RCC_OscConfig+0x4f8>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7fe fffd 	bl	8001350 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f7fe fff9 	bl	8001350 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b64      	cmp	r3, #100	; 0x64
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0fd      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	4b81      	ldr	r3, [pc, #516]	; (8002574 <HAL_RCC_OscConfig+0x4f8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x312>
 8002380:	4b7b      	ldr	r3, [pc, #492]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a7a      	ldr	r2, [pc, #488]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6213      	str	r3, [r2, #32]
 800238c:	e02d      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x334>
 8002396:	4b76      	ldr	r3, [pc, #472]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4a75      	ldr	r2, [pc, #468]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6213      	str	r3, [r2, #32]
 80023a2:	4b73      	ldr	r3, [pc, #460]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a72      	ldr	r2, [pc, #456]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	f023 0304 	bic.w	r3, r3, #4
 80023ac:	6213      	str	r3, [r2, #32]
 80023ae:	e01c      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x356>
 80023b8:	4b6d      	ldr	r3, [pc, #436]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4a6c      	ldr	r2, [pc, #432]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	4b6a      	ldr	r3, [pc, #424]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4a69      	ldr	r2, [pc, #420]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	e00b      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 80023d2:	4b67      	ldr	r3, [pc, #412]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a66      	ldr	r2, [pc, #408]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	4b64      	ldr	r3, [pc, #400]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a63      	ldr	r2, [pc, #396]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d015      	beq.n	800241e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7fe ffad 	bl	8001350 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7fe ffa9 	bl	8001350 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0ab      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	4b57      	ldr	r3, [pc, #348]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ee      	beq.n	80023fa <HAL_RCC_OscConfig+0x37e>
 800241c:	e014      	b.n	8002448 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7fe ff97 	bl	8001350 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7fe ff93 	bl	8001350 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e095      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	4b4c      	ldr	r3, [pc, #304]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ee      	bne.n	8002426 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d105      	bne.n	800245a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244e:	4b48      	ldr	r3, [pc, #288]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a47      	ldr	r2, [pc, #284]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002458:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 8081 	beq.w	8002566 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002464:	4b42      	ldr	r3, [pc, #264]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d061      	beq.n	8002534 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d146      	bne.n	8002506 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002478:	4b3f      	ldr	r3, [pc, #252]	; (8002578 <HAL_RCC_OscConfig+0x4fc>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7fe ff67 	bl	8001350 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002486:	f7fe ff63 	bl	8001350 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e067      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002498:	4b35      	ldr	r3, [pc, #212]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f0      	bne.n	8002486 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ac:	d108      	bne.n	80024c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ae:	4b30      	ldr	r3, [pc, #192]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	492d      	ldr	r1, [pc, #180]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c0:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a19      	ldr	r1, [r3, #32]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	430b      	orrs	r3, r1
 80024d2:	4927      	ldr	r1, [pc, #156]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d8:	4b27      	ldr	r3, [pc, #156]	; (8002578 <HAL_RCC_OscConfig+0x4fc>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7fe ff37 	bl	8001350 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e6:	f7fe ff33 	bl	8001350 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e037      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x46a>
 8002504:	e02f      	b.n	8002566 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	4b1c      	ldr	r3, [pc, #112]	; (8002578 <HAL_RCC_OscConfig+0x4fc>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe ff20 	bl	8001350 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002514:	f7fe ff1c 	bl	8001350 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e020      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002526:	4b12      	ldr	r3, [pc, #72]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x498>
 8002532:	e018      	b.n	8002566 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e013      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_OscConfig+0x4f4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	429a      	cmp	r2, r3
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	40007000 	.word	0x40007000
 8002578:	42420060 	.word	0x42420060

0800257c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0d0      	b.n	8002732 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002590:	4b6a      	ldr	r3, [pc, #424]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d910      	bls.n	80025c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b67      	ldr	r3, [pc, #412]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 0207 	bic.w	r2, r3, #7
 80025a6:	4965      	ldr	r1, [pc, #404]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b63      	ldr	r3, [pc, #396]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0b8      	b.n	8002732 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d020      	beq.n	800260e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025d8:	4b59      	ldr	r3, [pc, #356]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a58      	ldr	r2, [pc, #352]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f0:	4b53      	ldr	r3, [pc, #332]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	4a52      	ldr	r2, [pc, #328]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025fc:	4b50      	ldr	r3, [pc, #320]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	494d      	ldr	r1, [pc, #308]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	4313      	orrs	r3, r2
 800260c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d040      	beq.n	800269c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d107      	bne.n	8002632 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002622:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d115      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e07f      	b.n	8002732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	4b41      	ldr	r3, [pc, #260]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e073      	b.n	8002732 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264a:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e06b      	b.n	8002732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265a:	4b39      	ldr	r3, [pc, #228]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f023 0203 	bic.w	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4936      	ldr	r1, [pc, #216]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	4313      	orrs	r3, r2
 800266a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800266c:	f7fe fe70 	bl	8001350 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002672:	e00a      	b.n	800268a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002674:	f7fe fe6c 	bl	8001350 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e053      	b.n	8002732 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268a:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 020c 	and.w	r2, r3, #12
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	429a      	cmp	r2, r3
 800269a:	d1eb      	bne.n	8002674 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800269c:	4b27      	ldr	r3, [pc, #156]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d210      	bcs.n	80026cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 0207 	bic.w	r2, r3, #7
 80026b2:	4922      	ldr	r1, [pc, #136]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e032      	b.n	8002732 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4916      	ldr	r1, [pc, #88]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	490e      	ldr	r1, [pc, #56]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	4313      	orrs	r3, r2
 8002708:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800270a:	f000 f821 	bl	8002750 <HAL_RCC_GetSysClockFreq>
 800270e:	4601      	mov	r1, r0
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <HAL_RCC_ClockConfig+0x1c8>)
 800271c:	5cd3      	ldrb	r3, [r2, r3]
 800271e:	fa21 f303 	lsr.w	r3, r1, r3
 8002722:	4a09      	ldr	r2, [pc, #36]	; (8002748 <HAL_RCC_ClockConfig+0x1cc>)
 8002724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_RCC_ClockConfig+0x1d0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fdce 	bl	80012cc <HAL_InitTick>

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40022000 	.word	0x40022000
 8002740:	40021000 	.word	0x40021000
 8002744:	08006a70 	.word	0x08006a70
 8002748:	20000000 	.word	0x20000000
 800274c:	20000004 	.word	0x20000004

08002750 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002750:	b480      	push	{r7}
 8002752:	b087      	sub	sp, #28
 8002754:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	2300      	movs	r3, #0
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800276a:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b04      	cmp	r3, #4
 8002778:	d002      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0x30>
 800277a:	2b08      	cmp	r3, #8
 800277c:	d003      	beq.n	8002786 <HAL_RCC_GetSysClockFreq+0x36>
 800277e:	e027      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002782:	613b      	str	r3, [r7, #16]
      break;
 8002784:	e027      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	0c9b      	lsrs	r3, r3, #18
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	4a17      	ldr	r2, [pc, #92]	; (80027ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002790:	5cd3      	ldrb	r3, [r2, r3]
 8002792:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d010      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	0c5b      	lsrs	r3, r3, #17
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	4a11      	ldr	r2, [pc, #68]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027aa:	5cd3      	ldrb	r3, [r2, r3]
 80027ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a0d      	ldr	r2, [pc, #52]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80027b2:	fb02 f203 	mul.w	r2, r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	e004      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a0c      	ldr	r2, [pc, #48]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027c4:	fb02 f303 	mul.w	r3, r2, r3
 80027c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	613b      	str	r3, [r7, #16]
      break;
 80027ce:	e002      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80027d2:	613b      	str	r3, [r7, #16]
      break;
 80027d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027d6:	693b      	ldr	r3, [r7, #16]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000
 80027e8:	007a1200 	.word	0x007a1200
 80027ec:	08006a88 	.word	0x08006a88
 80027f0:	08006a98 	.word	0x08006a98
 80027f4:	003d0900 	.word	0x003d0900

080027f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027fc:	4b02      	ldr	r3, [pc, #8]	; (8002808 <HAL_RCC_GetHCLKFreq+0x10>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr
 8002808:	20000000 	.word	0x20000000

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002810:	f7ff fff2 	bl	80027f8 <HAL_RCC_GetHCLKFreq>
 8002814:	4601      	mov	r1, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4a03      	ldr	r2, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000
 8002830:	08006a80 	.word	0x08006a80

08002834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002838:	f7ff ffde 	bl	80027f8 <HAL_RCC_GetHCLKFreq>
 800283c:	4601      	mov	r1, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0adb      	lsrs	r3, r3, #11
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4a03      	ldr	r2, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800284a:	5cd3      	ldrb	r3, [r2, r3]
 800284c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	08006a80 	.word	0x08006a80

0800285c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <RCC_Delay+0x34>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <RCC_Delay+0x38>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0a5b      	lsrs	r3, r3, #9
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002878:	bf00      	nop
  }
  while (Delay --);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1e5a      	subs	r2, r3, #1
 800287e:	60fa      	str	r2, [r7, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f9      	bne.n	8002878 <RCC_Delay+0x1c>
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000000 	.word	0x20000000
 8002894:	10624dd3 	.word	0x10624dd3

08002898 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d07d      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028b4:	2300      	movs	r3, #0
 80028b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028b8:	4b4f      	ldr	r3, [pc, #316]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10d      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c4:	4b4c      	ldr	r3, [pc, #304]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	4a4b      	ldr	r2, [pc, #300]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ce:	61d3      	str	r3, [r2, #28]
 80028d0:	4b49      	ldr	r3, [pc, #292]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028dc:	2301      	movs	r3, #1
 80028de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	4b46      	ldr	r3, [pc, #280]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d118      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ec:	4b43      	ldr	r3, [pc, #268]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a42      	ldr	r2, [pc, #264]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f8:	f7fe fd2a 	bl	8001350 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fe:	e008      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002900:	f7fe fd26 	bl	8001350 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	; 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e06d      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002912:	4b3a      	ldr	r3, [pc, #232]	; (80029fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800291e:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002926:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d02e      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	429a      	cmp	r2, r3
 800293a:	d027      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800293c:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002944:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002946:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800294c:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002952:	4a29      	ldr	r2, [pc, #164]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d014      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7fe fcf5 	bl	8001350 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002968:	e00a      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296a:	f7fe fcf1 	bl	8001350 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	f241 3288 	movw	r2, #5000	; 0x1388
 8002978:	4293      	cmp	r3, r2
 800297a:	d901      	bls.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e036      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0ee      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800298c:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4917      	ldr	r1, [pc, #92]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299a:	4313      	orrs	r3, r2
 800299c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800299e:	7dfb      	ldrb	r3, [r7, #23]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	490b      	ldr	r1, [pc, #44]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d008      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029da:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	4904      	ldr	r1, [pc, #16]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3718      	adds	r7, #24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40007000 	.word	0x40007000
 8002a00:	42420440 	.word	0x42420440

08002a04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d079      	beq.n	8002b1a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
 8002a26:	2b10      	cmp	r3, #16
 8002a28:	d002      	beq.n	8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d042      	beq.n	8002ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002a2e:	e085      	b.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
      temp_reg = RCC->CFGR;
 8002a30:	4b45      	ldr	r3, [pc, #276]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x144>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002a36:	4b44      	ldr	r3, [pc, #272]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x144>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d079      	beq.n	8002b36 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	0c9b      	lsrs	r3, r3, #18
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	4a40      	ldr	r2, [pc, #256]	; (8002b4c <HAL_RCCEx_GetPeriphCLKFreq+0x148>)
 8002a4c:	5cd3      	ldrb	r3, [r2, r3]
 8002a4e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d015      	beq.n	8002a86 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x144>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	0c5b      	lsrs	r3, r3, #17
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	4a3a      	ldr	r2, [pc, #232]	; (8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>)
 8002a66:	5cd3      	ldrb	r3, [r2, r3]
 8002a68:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00d      	beq.n	8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002a74:	4a37      	ldr	r2, [pc, #220]	; (8002b54 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	61fb      	str	r3, [r7, #28]
 8002a84:	e004      	b.n	8002a90 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4a33      	ldr	r2, [pc, #204]	; (8002b58 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002a90:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x144>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a9c:	d102      	bne.n	8002aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          frequency = pllclk;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	61bb      	str	r3, [r7, #24]
      break;
 8002aa2:	e048      	b.n	8002b36 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
          frequency = (pllclk * 2) / 3;
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4a2c      	ldr	r2, [pc, #176]	; (8002b5c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	61bb      	str	r3, [r7, #24]
      break;
 8002ab2:	e040      	b.n	8002b36 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      temp_reg = RCC->BDCR;
 8002ab4:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x144>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac4:	d108      	bne.n	8002ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = LSE_VALUE;
 8002ad0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	e01f      	b.n	8002b18 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae2:	d109      	bne.n	8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8002ae4:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x144>)
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
        frequency = LSI_VALUE;
 8002af0:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002af4:	61bb      	str	r3, [r7, #24]
 8002af6:	e00f      	b.n	8002b18 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b02:	d11a      	bne.n	8002b3a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8002b04:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x144>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d014      	beq.n	8002b3a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
        frequency = HSE_VALUE / 128U;
 8002b10:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002b14:	61bb      	str	r3, [r7, #24]
      break;
 8002b16:	e010      	b.n	8002b3a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8002b18:	e00f      	b.n	8002b3a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002b1a:	f7ff fe8b 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_RCCEx_GetPeriphCLKFreq+0x144>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	0b9b      	lsrs	r3, r3, #14
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b32:	61bb      	str	r3, [r7, #24]
      break;
 8002b34:	e002      	b.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
      break;
 8002b36:	bf00      	nop
 8002b38:	e000      	b.n	8002b3c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
      break;
 8002b3a:	bf00      	nop
    }
  }
  return (frequency);
 8002b3c:	69bb      	ldr	r3, [r7, #24]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3720      	adds	r7, #32
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	08006a9c 	.word	0x08006a9c
 8002b50:	08006aac 	.word	0x08006aac
 8002b54:	007a1200 	.word	0x007a1200
 8002b58:	003d0900 	.word	0x003d0900
 8002b5c:	aaaaaaab 	.word	0xaaaaaaab

08002b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e042      	b.n	8002bf8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fe faa6 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2224      	movs	r2, #36	; 0x24
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f91d 	bl	8002de4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b08a      	sub	sp, #40	; 0x28
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d16d      	bne.n	8002cfc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_UART_Transmit+0x2c>
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e066      	b.n	8002cfe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2221      	movs	r2, #33	; 0x21
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c3e:	f7fe fb87 	bl	8001350 <HAL_GetTick>
 8002c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	88fa      	ldrh	r2, [r7, #6]
 8002c48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	88fa      	ldrh	r2, [r7, #6]
 8002c4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c58:	d108      	bne.n	8002c6c <HAL_UART_Transmit+0x6c>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d104      	bne.n	8002c6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	e003      	b.n	8002c74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c74:	e02a      	b.n	8002ccc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f840 	bl	8002d06 <UART_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e036      	b.n	8002cfe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10b      	bne.n	8002cae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	3302      	adds	r3, #2
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	e007      	b.n	8002cbe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	781a      	ldrb	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1cf      	bne.n	8002c76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2140      	movs	r1, #64	; 0x40
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f810 	bl	8002d06 <UART_WaitOnFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e006      	b.n	8002cfe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e000      	b.n	8002cfe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002cfc:	2302      	movs	r3, #2
  }
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3720      	adds	r7, #32
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b090      	sub	sp, #64	; 0x40
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	603b      	str	r3, [r7, #0]
 8002d12:	4613      	mov	r3, r2
 8002d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d16:	e050      	b.n	8002dba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1e:	d04c      	beq.n	8002dba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d007      	beq.n	8002d36 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d26:	f7fe fb13 	bl	8001350 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d241      	bcs.n	8002dba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	330c      	adds	r3, #12
 8002d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	e853 3f00 	ldrex	r3, [r3]
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	330c      	adds	r3, #12
 8002d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d56:	637a      	str	r2, [r7, #52]	; 0x34
 8002d58:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d5e:	e841 2300 	strex	r3, r2, [r1]
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1e5      	bne.n	8002d36 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3314      	adds	r3, #20
 8002d70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	613b      	str	r3, [r7, #16]
   return(result);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3314      	adds	r3, #20
 8002d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d8a:	623a      	str	r2, [r7, #32]
 8002d8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8e:	69f9      	ldr	r1, [r7, #28]
 8002d90:	6a3a      	ldr	r2, [r7, #32]
 8002d92:	e841 2300 	strex	r3, r2, [r1]
 8002d96:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1e5      	bne.n	8002d6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e00f      	b.n	8002dda <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	bf0c      	ite	eq
 8002dca:	2301      	moveq	r3, #1
 8002dcc:	2300      	movne	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d09f      	beq.n	8002d18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3740      	adds	r7, #64	; 0x40
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e1e:	f023 030c 	bic.w	r3, r3, #12
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	68b9      	ldr	r1, [r7, #8]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a2c      	ldr	r2, [pc, #176]	; (8002ef8 <UART_SetConfig+0x114>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d103      	bne.n	8002e54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e4c:	f7ff fcf2 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	e002      	b.n	8002e5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e54:	f7ff fcda 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8002e58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	009a      	lsls	r2, r3, #2
 8002e64:	441a      	add	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e70:	4a22      	ldr	r2, [pc, #136]	; (8002efc <UART_SetConfig+0x118>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	0119      	lsls	r1, r3, #4
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	009a      	lsls	r2, r3, #2
 8002e84:	441a      	add	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e90:	4b1a      	ldr	r3, [pc, #104]	; (8002efc <UART_SetConfig+0x118>)
 8002e92:	fba3 0302 	umull	r0, r3, r3, r2
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	2064      	movs	r0, #100	; 0x64
 8002e9a:	fb00 f303 	mul.w	r3, r0, r3
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	3332      	adds	r3, #50	; 0x32
 8002ea4:	4a15      	ldr	r2, [pc, #84]	; (8002efc <UART_SetConfig+0x118>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb0:	4419      	add	r1, r3
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	009a      	lsls	r2, r3, #2
 8002ebc:	441a      	add	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <UART_SetConfig+0x118>)
 8002eca:	fba3 0302 	umull	r0, r3, r3, r2
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	2064      	movs	r0, #100	; 0x64
 8002ed2:	fb00 f303 	mul.w	r3, r0, r3
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	3332      	adds	r3, #50	; 0x32
 8002edc:	4a07      	ldr	r2, [pc, #28]	; (8002efc <UART_SetConfig+0x118>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	f003 020f 	and.w	r2, r3, #15
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	440a      	add	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40013800 	.word	0x40013800
 8002efc:	51eb851f 	.word	0x51eb851f

08002f00 <__errno>:
 8002f00:	4b01      	ldr	r3, [pc, #4]	; (8002f08 <__errno+0x8>)
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	2000000c 	.word	0x2000000c

08002f0c <__libc_init_array>:
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	2500      	movs	r5, #0
 8002f10:	4e0c      	ldr	r6, [pc, #48]	; (8002f44 <__libc_init_array+0x38>)
 8002f12:	4c0d      	ldr	r4, [pc, #52]	; (8002f48 <__libc_init_array+0x3c>)
 8002f14:	1ba4      	subs	r4, r4, r6
 8002f16:	10a4      	asrs	r4, r4, #2
 8002f18:	42a5      	cmp	r5, r4
 8002f1a:	d109      	bne.n	8002f30 <__libc_init_array+0x24>
 8002f1c:	f003 fd92 	bl	8006a44 <_init>
 8002f20:	2500      	movs	r5, #0
 8002f22:	4e0a      	ldr	r6, [pc, #40]	; (8002f4c <__libc_init_array+0x40>)
 8002f24:	4c0a      	ldr	r4, [pc, #40]	; (8002f50 <__libc_init_array+0x44>)
 8002f26:	1ba4      	subs	r4, r4, r6
 8002f28:	10a4      	asrs	r4, r4, #2
 8002f2a:	42a5      	cmp	r5, r4
 8002f2c:	d105      	bne.n	8002f3a <__libc_init_array+0x2e>
 8002f2e:	bd70      	pop	{r4, r5, r6, pc}
 8002f30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f34:	4798      	blx	r3
 8002f36:	3501      	adds	r5, #1
 8002f38:	e7ee      	b.n	8002f18 <__libc_init_array+0xc>
 8002f3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f3e:	4798      	blx	r3
 8002f40:	3501      	adds	r5, #1
 8002f42:	e7f2      	b.n	8002f2a <__libc_init_array+0x1e>
 8002f44:	08006d60 	.word	0x08006d60
 8002f48:	08006d60 	.word	0x08006d60
 8002f4c:	08006d60 	.word	0x08006d60
 8002f50:	08006d64 	.word	0x08006d64

08002f54 <memset>:
 8002f54:	4603      	mov	r3, r0
 8002f56:	4402      	add	r2, r0
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d100      	bne.n	8002f5e <memset+0xa>
 8002f5c:	4770      	bx	lr
 8002f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f62:	e7f9      	b.n	8002f58 <memset+0x4>

08002f64 <__cvt>:
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f6a:	461e      	mov	r6, r3
 8002f6c:	bfbb      	ittet	lt
 8002f6e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002f72:	461e      	movlt	r6, r3
 8002f74:	2300      	movge	r3, #0
 8002f76:	232d      	movlt	r3, #45	; 0x2d
 8002f78:	b088      	sub	sp, #32
 8002f7a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002f7c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002f80:	f027 0720 	bic.w	r7, r7, #32
 8002f84:	2f46      	cmp	r7, #70	; 0x46
 8002f86:	4614      	mov	r4, r2
 8002f88:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002f8a:	700b      	strb	r3, [r1, #0]
 8002f8c:	d004      	beq.n	8002f98 <__cvt+0x34>
 8002f8e:	2f45      	cmp	r7, #69	; 0x45
 8002f90:	d100      	bne.n	8002f94 <__cvt+0x30>
 8002f92:	3501      	adds	r5, #1
 8002f94:	2302      	movs	r3, #2
 8002f96:	e000      	b.n	8002f9a <__cvt+0x36>
 8002f98:	2303      	movs	r3, #3
 8002f9a:	aa07      	add	r2, sp, #28
 8002f9c:	9204      	str	r2, [sp, #16]
 8002f9e:	aa06      	add	r2, sp, #24
 8002fa0:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002fa4:	e9cd 3500 	strd	r3, r5, [sp]
 8002fa8:	4622      	mov	r2, r4
 8002faa:	4633      	mov	r3, r6
 8002fac:	f001 fdb0 	bl	8004b10 <_dtoa_r>
 8002fb0:	2f47      	cmp	r7, #71	; 0x47
 8002fb2:	4680      	mov	r8, r0
 8002fb4:	d102      	bne.n	8002fbc <__cvt+0x58>
 8002fb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002fb8:	07db      	lsls	r3, r3, #31
 8002fba:	d526      	bpl.n	800300a <__cvt+0xa6>
 8002fbc:	2f46      	cmp	r7, #70	; 0x46
 8002fbe:	eb08 0905 	add.w	r9, r8, r5
 8002fc2:	d111      	bne.n	8002fe8 <__cvt+0x84>
 8002fc4:	f898 3000 	ldrb.w	r3, [r8]
 8002fc8:	2b30      	cmp	r3, #48	; 0x30
 8002fca:	d10a      	bne.n	8002fe2 <__cvt+0x7e>
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2300      	movs	r3, #0
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	4631      	mov	r1, r6
 8002fd4:	f7fd fce8 	bl	80009a8 <__aeabi_dcmpeq>
 8002fd8:	b918      	cbnz	r0, 8002fe2 <__cvt+0x7e>
 8002fda:	f1c5 0501 	rsb	r5, r5, #1
 8002fde:	f8ca 5000 	str.w	r5, [sl]
 8002fe2:	f8da 3000 	ldr.w	r3, [sl]
 8002fe6:	4499      	add	r9, r3
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2300      	movs	r3, #0
 8002fec:	4620      	mov	r0, r4
 8002fee:	4631      	mov	r1, r6
 8002ff0:	f7fd fcda 	bl	80009a8 <__aeabi_dcmpeq>
 8002ff4:	b938      	cbnz	r0, 8003006 <__cvt+0xa2>
 8002ff6:	2230      	movs	r2, #48	; 0x30
 8002ff8:	9b07      	ldr	r3, [sp, #28]
 8002ffa:	454b      	cmp	r3, r9
 8002ffc:	d205      	bcs.n	800300a <__cvt+0xa6>
 8002ffe:	1c59      	adds	r1, r3, #1
 8003000:	9107      	str	r1, [sp, #28]
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	e7f8      	b.n	8002ff8 <__cvt+0x94>
 8003006:	f8cd 901c 	str.w	r9, [sp, #28]
 800300a:	4640      	mov	r0, r8
 800300c:	9b07      	ldr	r3, [sp, #28]
 800300e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003010:	eba3 0308 	sub.w	r3, r3, r8
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	b008      	add	sp, #32
 8003018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800301c <__exponent>:
 800301c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800301e:	2900      	cmp	r1, #0
 8003020:	bfb4      	ite	lt
 8003022:	232d      	movlt	r3, #45	; 0x2d
 8003024:	232b      	movge	r3, #43	; 0x2b
 8003026:	4604      	mov	r4, r0
 8003028:	bfb8      	it	lt
 800302a:	4249      	neglt	r1, r1
 800302c:	2909      	cmp	r1, #9
 800302e:	f804 2b02 	strb.w	r2, [r4], #2
 8003032:	7043      	strb	r3, [r0, #1]
 8003034:	dd21      	ble.n	800307a <__exponent+0x5e>
 8003036:	f10d 0307 	add.w	r3, sp, #7
 800303a:	461f      	mov	r7, r3
 800303c:	260a      	movs	r6, #10
 800303e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003042:	fb06 1115 	mls	r1, r6, r5, r1
 8003046:	2d09      	cmp	r5, #9
 8003048:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800304c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003050:	f103 32ff 	add.w	r2, r3, #4294967295
 8003054:	4629      	mov	r1, r5
 8003056:	dc09      	bgt.n	800306c <__exponent+0x50>
 8003058:	3130      	adds	r1, #48	; 0x30
 800305a:	3b02      	subs	r3, #2
 800305c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003060:	42bb      	cmp	r3, r7
 8003062:	4622      	mov	r2, r4
 8003064:	d304      	bcc.n	8003070 <__exponent+0x54>
 8003066:	1a10      	subs	r0, r2, r0
 8003068:	b003      	add	sp, #12
 800306a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800306c:	4613      	mov	r3, r2
 800306e:	e7e6      	b.n	800303e <__exponent+0x22>
 8003070:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003074:	f804 2b01 	strb.w	r2, [r4], #1
 8003078:	e7f2      	b.n	8003060 <__exponent+0x44>
 800307a:	2330      	movs	r3, #48	; 0x30
 800307c:	4419      	add	r1, r3
 800307e:	7083      	strb	r3, [r0, #2]
 8003080:	1d02      	adds	r2, r0, #4
 8003082:	70c1      	strb	r1, [r0, #3]
 8003084:	e7ef      	b.n	8003066 <__exponent+0x4a>
	...

08003088 <_printf_float>:
 8003088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800308c:	b091      	sub	sp, #68	; 0x44
 800308e:	460c      	mov	r4, r1
 8003090:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003092:	4693      	mov	fp, r2
 8003094:	461e      	mov	r6, r3
 8003096:	4605      	mov	r5, r0
 8003098:	f002 fe1c 	bl	8005cd4 <_localeconv_r>
 800309c:	6803      	ldr	r3, [r0, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	9309      	str	r3, [sp, #36]	; 0x24
 80030a2:	f7fd f855 	bl	8000150 <strlen>
 80030a6:	2300      	movs	r3, #0
 80030a8:	930e      	str	r3, [sp, #56]	; 0x38
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	900a      	str	r0, [sp, #40]	; 0x28
 80030ae:	3307      	adds	r3, #7
 80030b0:	f023 0307 	bic.w	r3, r3, #7
 80030b4:	f103 0208 	add.w	r2, r3, #8
 80030b8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80030bc:	f8d4 a000 	ldr.w	sl, [r4]
 80030c0:	603a      	str	r2, [r7, #0]
 80030c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80030ca:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80030ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80030d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80030d4:	f04f 32ff 	mov.w	r2, #4294967295
 80030d8:	4ba6      	ldr	r3, [pc, #664]	; (8003374 <_printf_float+0x2ec>)
 80030da:	4638      	mov	r0, r7
 80030dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030de:	f7fd fc95 	bl	8000a0c <__aeabi_dcmpun>
 80030e2:	bb68      	cbnz	r0, 8003140 <_printf_float+0xb8>
 80030e4:	f04f 32ff 	mov.w	r2, #4294967295
 80030e8:	4ba2      	ldr	r3, [pc, #648]	; (8003374 <_printf_float+0x2ec>)
 80030ea:	4638      	mov	r0, r7
 80030ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030ee:	f7fd fc6f 	bl	80009d0 <__aeabi_dcmple>
 80030f2:	bb28      	cbnz	r0, 8003140 <_printf_float+0xb8>
 80030f4:	2200      	movs	r2, #0
 80030f6:	2300      	movs	r3, #0
 80030f8:	4638      	mov	r0, r7
 80030fa:	4649      	mov	r1, r9
 80030fc:	f7fd fc5e 	bl	80009bc <__aeabi_dcmplt>
 8003100:	b110      	cbz	r0, 8003108 <_printf_float+0x80>
 8003102:	232d      	movs	r3, #45	; 0x2d
 8003104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003108:	4f9b      	ldr	r7, [pc, #620]	; (8003378 <_printf_float+0x2f0>)
 800310a:	4b9c      	ldr	r3, [pc, #624]	; (800337c <_printf_float+0x2f4>)
 800310c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003110:	bf98      	it	ls
 8003112:	461f      	movls	r7, r3
 8003114:	2303      	movs	r3, #3
 8003116:	f04f 0900 	mov.w	r9, #0
 800311a:	6123      	str	r3, [r4, #16]
 800311c:	f02a 0304 	bic.w	r3, sl, #4
 8003120:	6023      	str	r3, [r4, #0]
 8003122:	9600      	str	r6, [sp, #0]
 8003124:	465b      	mov	r3, fp
 8003126:	aa0f      	add	r2, sp, #60	; 0x3c
 8003128:	4621      	mov	r1, r4
 800312a:	4628      	mov	r0, r5
 800312c:	f000 f9e2 	bl	80034f4 <_printf_common>
 8003130:	3001      	adds	r0, #1
 8003132:	f040 8090 	bne.w	8003256 <_printf_float+0x1ce>
 8003136:	f04f 30ff 	mov.w	r0, #4294967295
 800313a:	b011      	add	sp, #68	; 0x44
 800313c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003140:	463a      	mov	r2, r7
 8003142:	464b      	mov	r3, r9
 8003144:	4638      	mov	r0, r7
 8003146:	4649      	mov	r1, r9
 8003148:	f7fd fc60 	bl	8000a0c <__aeabi_dcmpun>
 800314c:	b110      	cbz	r0, 8003154 <_printf_float+0xcc>
 800314e:	4f8c      	ldr	r7, [pc, #560]	; (8003380 <_printf_float+0x2f8>)
 8003150:	4b8c      	ldr	r3, [pc, #560]	; (8003384 <_printf_float+0x2fc>)
 8003152:	e7db      	b.n	800310c <_printf_float+0x84>
 8003154:	6863      	ldr	r3, [r4, #4]
 8003156:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800315a:	1c59      	adds	r1, r3, #1
 800315c:	a80d      	add	r0, sp, #52	; 0x34
 800315e:	a90e      	add	r1, sp, #56	; 0x38
 8003160:	d140      	bne.n	80031e4 <_printf_float+0x15c>
 8003162:	2306      	movs	r3, #6
 8003164:	6063      	str	r3, [r4, #4]
 8003166:	f04f 0c00 	mov.w	ip, #0
 800316a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800316e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003172:	6863      	ldr	r3, [r4, #4]
 8003174:	6022      	str	r2, [r4, #0]
 8003176:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	463a      	mov	r2, r7
 800317e:	464b      	mov	r3, r9
 8003180:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003184:	4628      	mov	r0, r5
 8003186:	f7ff feed 	bl	8002f64 <__cvt>
 800318a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800318e:	2b47      	cmp	r3, #71	; 0x47
 8003190:	4607      	mov	r7, r0
 8003192:	d109      	bne.n	80031a8 <_printf_float+0x120>
 8003194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003196:	1cd8      	adds	r0, r3, #3
 8003198:	db02      	blt.n	80031a0 <_printf_float+0x118>
 800319a:	6862      	ldr	r2, [r4, #4]
 800319c:	4293      	cmp	r3, r2
 800319e:	dd47      	ble.n	8003230 <_printf_float+0x1a8>
 80031a0:	f1a8 0802 	sub.w	r8, r8, #2
 80031a4:	fa5f f888 	uxtb.w	r8, r8
 80031a8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80031ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80031ae:	d824      	bhi.n	80031fa <_printf_float+0x172>
 80031b0:	3901      	subs	r1, #1
 80031b2:	4642      	mov	r2, r8
 80031b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80031b8:	910d      	str	r1, [sp, #52]	; 0x34
 80031ba:	f7ff ff2f 	bl	800301c <__exponent>
 80031be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031c0:	4681      	mov	r9, r0
 80031c2:	1813      	adds	r3, r2, r0
 80031c4:	2a01      	cmp	r2, #1
 80031c6:	6123      	str	r3, [r4, #16]
 80031c8:	dc02      	bgt.n	80031d0 <_printf_float+0x148>
 80031ca:	6822      	ldr	r2, [r4, #0]
 80031cc:	07d1      	lsls	r1, r2, #31
 80031ce:	d501      	bpl.n	80031d4 <_printf_float+0x14c>
 80031d0:	3301      	adds	r3, #1
 80031d2:	6123      	str	r3, [r4, #16]
 80031d4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0a2      	beq.n	8003122 <_printf_float+0x9a>
 80031dc:	232d      	movs	r3, #45	; 0x2d
 80031de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031e2:	e79e      	b.n	8003122 <_printf_float+0x9a>
 80031e4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80031e8:	f000 816e 	beq.w	80034c8 <_printf_float+0x440>
 80031ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80031f0:	d1b9      	bne.n	8003166 <_printf_float+0xde>
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1b7      	bne.n	8003166 <_printf_float+0xde>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e7b4      	b.n	8003164 <_printf_float+0xdc>
 80031fa:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80031fe:	d119      	bne.n	8003234 <_printf_float+0x1ac>
 8003200:	2900      	cmp	r1, #0
 8003202:	6863      	ldr	r3, [r4, #4]
 8003204:	dd0c      	ble.n	8003220 <_printf_float+0x198>
 8003206:	6121      	str	r1, [r4, #16]
 8003208:	b913      	cbnz	r3, 8003210 <_printf_float+0x188>
 800320a:	6822      	ldr	r2, [r4, #0]
 800320c:	07d2      	lsls	r2, r2, #31
 800320e:	d502      	bpl.n	8003216 <_printf_float+0x18e>
 8003210:	3301      	adds	r3, #1
 8003212:	440b      	add	r3, r1
 8003214:	6123      	str	r3, [r4, #16]
 8003216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003218:	f04f 0900 	mov.w	r9, #0
 800321c:	65a3      	str	r3, [r4, #88]	; 0x58
 800321e:	e7d9      	b.n	80031d4 <_printf_float+0x14c>
 8003220:	b913      	cbnz	r3, 8003228 <_printf_float+0x1a0>
 8003222:	6822      	ldr	r2, [r4, #0]
 8003224:	07d0      	lsls	r0, r2, #31
 8003226:	d501      	bpl.n	800322c <_printf_float+0x1a4>
 8003228:	3302      	adds	r3, #2
 800322a:	e7f3      	b.n	8003214 <_printf_float+0x18c>
 800322c:	2301      	movs	r3, #1
 800322e:	e7f1      	b.n	8003214 <_printf_float+0x18c>
 8003230:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003234:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003238:	4293      	cmp	r3, r2
 800323a:	db05      	blt.n	8003248 <_printf_float+0x1c0>
 800323c:	6822      	ldr	r2, [r4, #0]
 800323e:	6123      	str	r3, [r4, #16]
 8003240:	07d1      	lsls	r1, r2, #31
 8003242:	d5e8      	bpl.n	8003216 <_printf_float+0x18e>
 8003244:	3301      	adds	r3, #1
 8003246:	e7e5      	b.n	8003214 <_printf_float+0x18c>
 8003248:	2b00      	cmp	r3, #0
 800324a:	bfcc      	ite	gt
 800324c:	2301      	movgt	r3, #1
 800324e:	f1c3 0302 	rsble	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	e7de      	b.n	8003214 <_printf_float+0x18c>
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	055a      	lsls	r2, r3, #21
 800325a:	d407      	bmi.n	800326c <_printf_float+0x1e4>
 800325c:	6923      	ldr	r3, [r4, #16]
 800325e:	463a      	mov	r2, r7
 8003260:	4659      	mov	r1, fp
 8003262:	4628      	mov	r0, r5
 8003264:	47b0      	blx	r6
 8003266:	3001      	adds	r0, #1
 8003268:	d129      	bne.n	80032be <_printf_float+0x236>
 800326a:	e764      	b.n	8003136 <_printf_float+0xae>
 800326c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003270:	f240 80d7 	bls.w	8003422 <_printf_float+0x39a>
 8003274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003278:	2200      	movs	r2, #0
 800327a:	2300      	movs	r3, #0
 800327c:	f7fd fb94 	bl	80009a8 <__aeabi_dcmpeq>
 8003280:	b388      	cbz	r0, 80032e6 <_printf_float+0x25e>
 8003282:	2301      	movs	r3, #1
 8003284:	4a40      	ldr	r2, [pc, #256]	; (8003388 <_printf_float+0x300>)
 8003286:	4659      	mov	r1, fp
 8003288:	4628      	mov	r0, r5
 800328a:	47b0      	blx	r6
 800328c:	3001      	adds	r0, #1
 800328e:	f43f af52 	beq.w	8003136 <_printf_float+0xae>
 8003292:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003296:	429a      	cmp	r2, r3
 8003298:	db02      	blt.n	80032a0 <_printf_float+0x218>
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	07d8      	lsls	r0, r3, #31
 800329e:	d50e      	bpl.n	80032be <_printf_float+0x236>
 80032a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032a4:	4659      	mov	r1, fp
 80032a6:	4628      	mov	r0, r5
 80032a8:	47b0      	blx	r6
 80032aa:	3001      	adds	r0, #1
 80032ac:	f43f af43 	beq.w	8003136 <_printf_float+0xae>
 80032b0:	2700      	movs	r7, #0
 80032b2:	f104 081a 	add.w	r8, r4, #26
 80032b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032b8:	3b01      	subs	r3, #1
 80032ba:	42bb      	cmp	r3, r7
 80032bc:	dc09      	bgt.n	80032d2 <_printf_float+0x24a>
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	079f      	lsls	r7, r3, #30
 80032c2:	f100 80fd 	bmi.w	80034c0 <_printf_float+0x438>
 80032c6:	68e0      	ldr	r0, [r4, #12]
 80032c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80032ca:	4298      	cmp	r0, r3
 80032cc:	bfb8      	it	lt
 80032ce:	4618      	movlt	r0, r3
 80032d0:	e733      	b.n	800313a <_printf_float+0xb2>
 80032d2:	2301      	movs	r3, #1
 80032d4:	4642      	mov	r2, r8
 80032d6:	4659      	mov	r1, fp
 80032d8:	4628      	mov	r0, r5
 80032da:	47b0      	blx	r6
 80032dc:	3001      	adds	r0, #1
 80032de:	f43f af2a 	beq.w	8003136 <_printf_float+0xae>
 80032e2:	3701      	adds	r7, #1
 80032e4:	e7e7      	b.n	80032b6 <_printf_float+0x22e>
 80032e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	dc2b      	bgt.n	8003344 <_printf_float+0x2bc>
 80032ec:	2301      	movs	r3, #1
 80032ee:	4a26      	ldr	r2, [pc, #152]	; (8003388 <_printf_float+0x300>)
 80032f0:	4659      	mov	r1, fp
 80032f2:	4628      	mov	r0, r5
 80032f4:	47b0      	blx	r6
 80032f6:	3001      	adds	r0, #1
 80032f8:	f43f af1d 	beq.w	8003136 <_printf_float+0xae>
 80032fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032fe:	b923      	cbnz	r3, 800330a <_printf_float+0x282>
 8003300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003302:	b913      	cbnz	r3, 800330a <_printf_float+0x282>
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	07d9      	lsls	r1, r3, #31
 8003308:	d5d9      	bpl.n	80032be <_printf_float+0x236>
 800330a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800330e:	4659      	mov	r1, fp
 8003310:	4628      	mov	r0, r5
 8003312:	47b0      	blx	r6
 8003314:	3001      	adds	r0, #1
 8003316:	f43f af0e 	beq.w	8003136 <_printf_float+0xae>
 800331a:	f04f 0800 	mov.w	r8, #0
 800331e:	f104 091a 	add.w	r9, r4, #26
 8003322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003324:	425b      	negs	r3, r3
 8003326:	4543      	cmp	r3, r8
 8003328:	dc01      	bgt.n	800332e <_printf_float+0x2a6>
 800332a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800332c:	e797      	b.n	800325e <_printf_float+0x1d6>
 800332e:	2301      	movs	r3, #1
 8003330:	464a      	mov	r2, r9
 8003332:	4659      	mov	r1, fp
 8003334:	4628      	mov	r0, r5
 8003336:	47b0      	blx	r6
 8003338:	3001      	adds	r0, #1
 800333a:	f43f aefc 	beq.w	8003136 <_printf_float+0xae>
 800333e:	f108 0801 	add.w	r8, r8, #1
 8003342:	e7ee      	b.n	8003322 <_printf_float+0x29a>
 8003344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003346:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003348:	429a      	cmp	r2, r3
 800334a:	bfa8      	it	ge
 800334c:	461a      	movge	r2, r3
 800334e:	2a00      	cmp	r2, #0
 8003350:	4690      	mov	r8, r2
 8003352:	dd07      	ble.n	8003364 <_printf_float+0x2dc>
 8003354:	4613      	mov	r3, r2
 8003356:	4659      	mov	r1, fp
 8003358:	463a      	mov	r2, r7
 800335a:	4628      	mov	r0, r5
 800335c:	47b0      	blx	r6
 800335e:	3001      	adds	r0, #1
 8003360:	f43f aee9 	beq.w	8003136 <_printf_float+0xae>
 8003364:	f104 031a 	add.w	r3, r4, #26
 8003368:	f04f 0a00 	mov.w	sl, #0
 800336c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003370:	930b      	str	r3, [sp, #44]	; 0x2c
 8003372:	e015      	b.n	80033a0 <_printf_float+0x318>
 8003374:	7fefffff 	.word	0x7fefffff
 8003378:	08006ab2 	.word	0x08006ab2
 800337c:	08006aae 	.word	0x08006aae
 8003380:	08006aba 	.word	0x08006aba
 8003384:	08006ab6 	.word	0x08006ab6
 8003388:	08006abe 	.word	0x08006abe
 800338c:	2301      	movs	r3, #1
 800338e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003390:	4659      	mov	r1, fp
 8003392:	4628      	mov	r0, r5
 8003394:	47b0      	blx	r6
 8003396:	3001      	adds	r0, #1
 8003398:	f43f aecd 	beq.w	8003136 <_printf_float+0xae>
 800339c:	f10a 0a01 	add.w	sl, sl, #1
 80033a0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80033a4:	eba9 0308 	sub.w	r3, r9, r8
 80033a8:	4553      	cmp	r3, sl
 80033aa:	dcef      	bgt.n	800338c <_printf_float+0x304>
 80033ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80033b0:	429a      	cmp	r2, r3
 80033b2:	444f      	add	r7, r9
 80033b4:	db14      	blt.n	80033e0 <_printf_float+0x358>
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	07da      	lsls	r2, r3, #31
 80033ba:	d411      	bmi.n	80033e0 <_printf_float+0x358>
 80033bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80033c0:	eba3 0209 	sub.w	r2, r3, r9
 80033c4:	eba3 0901 	sub.w	r9, r3, r1
 80033c8:	4591      	cmp	r9, r2
 80033ca:	bfa8      	it	ge
 80033cc:	4691      	movge	r9, r2
 80033ce:	f1b9 0f00 	cmp.w	r9, #0
 80033d2:	dc0d      	bgt.n	80033f0 <_printf_float+0x368>
 80033d4:	2700      	movs	r7, #0
 80033d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80033da:	f104 081a 	add.w	r8, r4, #26
 80033de:	e018      	b.n	8003412 <_printf_float+0x38a>
 80033e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033e4:	4659      	mov	r1, fp
 80033e6:	4628      	mov	r0, r5
 80033e8:	47b0      	blx	r6
 80033ea:	3001      	adds	r0, #1
 80033ec:	d1e6      	bne.n	80033bc <_printf_float+0x334>
 80033ee:	e6a2      	b.n	8003136 <_printf_float+0xae>
 80033f0:	464b      	mov	r3, r9
 80033f2:	463a      	mov	r2, r7
 80033f4:	4659      	mov	r1, fp
 80033f6:	4628      	mov	r0, r5
 80033f8:	47b0      	blx	r6
 80033fa:	3001      	adds	r0, #1
 80033fc:	d1ea      	bne.n	80033d4 <_printf_float+0x34c>
 80033fe:	e69a      	b.n	8003136 <_printf_float+0xae>
 8003400:	2301      	movs	r3, #1
 8003402:	4642      	mov	r2, r8
 8003404:	4659      	mov	r1, fp
 8003406:	4628      	mov	r0, r5
 8003408:	47b0      	blx	r6
 800340a:	3001      	adds	r0, #1
 800340c:	f43f ae93 	beq.w	8003136 <_printf_float+0xae>
 8003410:	3701      	adds	r7, #1
 8003412:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003416:	1a9b      	subs	r3, r3, r2
 8003418:	eba3 0309 	sub.w	r3, r3, r9
 800341c:	42bb      	cmp	r3, r7
 800341e:	dcef      	bgt.n	8003400 <_printf_float+0x378>
 8003420:	e74d      	b.n	80032be <_printf_float+0x236>
 8003422:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003424:	2a01      	cmp	r2, #1
 8003426:	dc01      	bgt.n	800342c <_printf_float+0x3a4>
 8003428:	07db      	lsls	r3, r3, #31
 800342a:	d538      	bpl.n	800349e <_printf_float+0x416>
 800342c:	2301      	movs	r3, #1
 800342e:	463a      	mov	r2, r7
 8003430:	4659      	mov	r1, fp
 8003432:	4628      	mov	r0, r5
 8003434:	47b0      	blx	r6
 8003436:	3001      	adds	r0, #1
 8003438:	f43f ae7d 	beq.w	8003136 <_printf_float+0xae>
 800343c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003440:	4659      	mov	r1, fp
 8003442:	4628      	mov	r0, r5
 8003444:	47b0      	blx	r6
 8003446:	3001      	adds	r0, #1
 8003448:	f107 0701 	add.w	r7, r7, #1
 800344c:	f43f ae73 	beq.w	8003136 <_printf_float+0xae>
 8003450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003456:	2200      	movs	r2, #0
 8003458:	f103 38ff 	add.w	r8, r3, #4294967295
 800345c:	2300      	movs	r3, #0
 800345e:	f7fd faa3 	bl	80009a8 <__aeabi_dcmpeq>
 8003462:	b9c0      	cbnz	r0, 8003496 <_printf_float+0x40e>
 8003464:	4643      	mov	r3, r8
 8003466:	463a      	mov	r2, r7
 8003468:	4659      	mov	r1, fp
 800346a:	4628      	mov	r0, r5
 800346c:	47b0      	blx	r6
 800346e:	3001      	adds	r0, #1
 8003470:	d10d      	bne.n	800348e <_printf_float+0x406>
 8003472:	e660      	b.n	8003136 <_printf_float+0xae>
 8003474:	2301      	movs	r3, #1
 8003476:	4642      	mov	r2, r8
 8003478:	4659      	mov	r1, fp
 800347a:	4628      	mov	r0, r5
 800347c:	47b0      	blx	r6
 800347e:	3001      	adds	r0, #1
 8003480:	f43f ae59 	beq.w	8003136 <_printf_float+0xae>
 8003484:	3701      	adds	r7, #1
 8003486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003488:	3b01      	subs	r3, #1
 800348a:	42bb      	cmp	r3, r7
 800348c:	dcf2      	bgt.n	8003474 <_printf_float+0x3ec>
 800348e:	464b      	mov	r3, r9
 8003490:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003494:	e6e4      	b.n	8003260 <_printf_float+0x1d8>
 8003496:	2700      	movs	r7, #0
 8003498:	f104 081a 	add.w	r8, r4, #26
 800349c:	e7f3      	b.n	8003486 <_printf_float+0x3fe>
 800349e:	2301      	movs	r3, #1
 80034a0:	e7e1      	b.n	8003466 <_printf_float+0x3de>
 80034a2:	2301      	movs	r3, #1
 80034a4:	4642      	mov	r2, r8
 80034a6:	4659      	mov	r1, fp
 80034a8:	4628      	mov	r0, r5
 80034aa:	47b0      	blx	r6
 80034ac:	3001      	adds	r0, #1
 80034ae:	f43f ae42 	beq.w	8003136 <_printf_float+0xae>
 80034b2:	3701      	adds	r7, #1
 80034b4:	68e3      	ldr	r3, [r4, #12]
 80034b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	42bb      	cmp	r3, r7
 80034bc:	dcf1      	bgt.n	80034a2 <_printf_float+0x41a>
 80034be:	e702      	b.n	80032c6 <_printf_float+0x23e>
 80034c0:	2700      	movs	r7, #0
 80034c2:	f104 0819 	add.w	r8, r4, #25
 80034c6:	e7f5      	b.n	80034b4 <_printf_float+0x42c>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f43f ae94 	beq.w	80031f6 <_printf_float+0x16e>
 80034ce:	f04f 0c00 	mov.w	ip, #0
 80034d2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80034d6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80034da:	6022      	str	r2, [r4, #0]
 80034dc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80034e0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	463a      	mov	r2, r7
 80034e8:	464b      	mov	r3, r9
 80034ea:	4628      	mov	r0, r5
 80034ec:	f7ff fd3a 	bl	8002f64 <__cvt>
 80034f0:	4607      	mov	r7, r0
 80034f2:	e64f      	b.n	8003194 <_printf_float+0x10c>

080034f4 <_printf_common>:
 80034f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034f8:	4691      	mov	r9, r2
 80034fa:	461f      	mov	r7, r3
 80034fc:	688a      	ldr	r2, [r1, #8]
 80034fe:	690b      	ldr	r3, [r1, #16]
 8003500:	4606      	mov	r6, r0
 8003502:	4293      	cmp	r3, r2
 8003504:	bfb8      	it	lt
 8003506:	4613      	movlt	r3, r2
 8003508:	f8c9 3000 	str.w	r3, [r9]
 800350c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003510:	460c      	mov	r4, r1
 8003512:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003516:	b112      	cbz	r2, 800351e <_printf_common+0x2a>
 8003518:	3301      	adds	r3, #1
 800351a:	f8c9 3000 	str.w	r3, [r9]
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	0699      	lsls	r1, r3, #26
 8003522:	bf42      	ittt	mi
 8003524:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003528:	3302      	addmi	r3, #2
 800352a:	f8c9 3000 	strmi.w	r3, [r9]
 800352e:	6825      	ldr	r5, [r4, #0]
 8003530:	f015 0506 	ands.w	r5, r5, #6
 8003534:	d107      	bne.n	8003546 <_printf_common+0x52>
 8003536:	f104 0a19 	add.w	sl, r4, #25
 800353a:	68e3      	ldr	r3, [r4, #12]
 800353c:	f8d9 2000 	ldr.w	r2, [r9]
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	42ab      	cmp	r3, r5
 8003544:	dc29      	bgt.n	800359a <_printf_common+0xa6>
 8003546:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800354a:	6822      	ldr	r2, [r4, #0]
 800354c:	3300      	adds	r3, #0
 800354e:	bf18      	it	ne
 8003550:	2301      	movne	r3, #1
 8003552:	0692      	lsls	r2, r2, #26
 8003554:	d42e      	bmi.n	80035b4 <_printf_common+0xc0>
 8003556:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800355a:	4639      	mov	r1, r7
 800355c:	4630      	mov	r0, r6
 800355e:	47c0      	blx	r8
 8003560:	3001      	adds	r0, #1
 8003562:	d021      	beq.n	80035a8 <_printf_common+0xb4>
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	68e5      	ldr	r5, [r4, #12]
 8003568:	f003 0306 	and.w	r3, r3, #6
 800356c:	2b04      	cmp	r3, #4
 800356e:	bf18      	it	ne
 8003570:	2500      	movne	r5, #0
 8003572:	f8d9 2000 	ldr.w	r2, [r9]
 8003576:	f04f 0900 	mov.w	r9, #0
 800357a:	bf08      	it	eq
 800357c:	1aad      	subeq	r5, r5, r2
 800357e:	68a3      	ldr	r3, [r4, #8]
 8003580:	6922      	ldr	r2, [r4, #16]
 8003582:	bf08      	it	eq
 8003584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003588:	4293      	cmp	r3, r2
 800358a:	bfc4      	itt	gt
 800358c:	1a9b      	subgt	r3, r3, r2
 800358e:	18ed      	addgt	r5, r5, r3
 8003590:	341a      	adds	r4, #26
 8003592:	454d      	cmp	r5, r9
 8003594:	d11a      	bne.n	80035cc <_printf_common+0xd8>
 8003596:	2000      	movs	r0, #0
 8003598:	e008      	b.n	80035ac <_printf_common+0xb8>
 800359a:	2301      	movs	r3, #1
 800359c:	4652      	mov	r2, sl
 800359e:	4639      	mov	r1, r7
 80035a0:	4630      	mov	r0, r6
 80035a2:	47c0      	blx	r8
 80035a4:	3001      	adds	r0, #1
 80035a6:	d103      	bne.n	80035b0 <_printf_common+0xbc>
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035b0:	3501      	adds	r5, #1
 80035b2:	e7c2      	b.n	800353a <_printf_common+0x46>
 80035b4:	2030      	movs	r0, #48	; 0x30
 80035b6:	18e1      	adds	r1, r4, r3
 80035b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035c2:	4422      	add	r2, r4
 80035c4:	3302      	adds	r3, #2
 80035c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035ca:	e7c4      	b.n	8003556 <_printf_common+0x62>
 80035cc:	2301      	movs	r3, #1
 80035ce:	4622      	mov	r2, r4
 80035d0:	4639      	mov	r1, r7
 80035d2:	4630      	mov	r0, r6
 80035d4:	47c0      	blx	r8
 80035d6:	3001      	adds	r0, #1
 80035d8:	d0e6      	beq.n	80035a8 <_printf_common+0xb4>
 80035da:	f109 0901 	add.w	r9, r9, #1
 80035de:	e7d8      	b.n	8003592 <_printf_common+0x9e>

080035e0 <_printf_i>:
 80035e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80035e8:	460c      	mov	r4, r1
 80035ea:	7e09      	ldrb	r1, [r1, #24]
 80035ec:	b085      	sub	sp, #20
 80035ee:	296e      	cmp	r1, #110	; 0x6e
 80035f0:	4617      	mov	r7, r2
 80035f2:	4606      	mov	r6, r0
 80035f4:	4698      	mov	r8, r3
 80035f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80035f8:	f000 80b3 	beq.w	8003762 <_printf_i+0x182>
 80035fc:	d822      	bhi.n	8003644 <_printf_i+0x64>
 80035fe:	2963      	cmp	r1, #99	; 0x63
 8003600:	d036      	beq.n	8003670 <_printf_i+0x90>
 8003602:	d80a      	bhi.n	800361a <_printf_i+0x3a>
 8003604:	2900      	cmp	r1, #0
 8003606:	f000 80b9 	beq.w	800377c <_printf_i+0x19c>
 800360a:	2958      	cmp	r1, #88	; 0x58
 800360c:	f000 8083 	beq.w	8003716 <_printf_i+0x136>
 8003610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003614:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003618:	e032      	b.n	8003680 <_printf_i+0xa0>
 800361a:	2964      	cmp	r1, #100	; 0x64
 800361c:	d001      	beq.n	8003622 <_printf_i+0x42>
 800361e:	2969      	cmp	r1, #105	; 0x69
 8003620:	d1f6      	bne.n	8003610 <_printf_i+0x30>
 8003622:	6820      	ldr	r0, [r4, #0]
 8003624:	6813      	ldr	r3, [r2, #0]
 8003626:	0605      	lsls	r5, r0, #24
 8003628:	f103 0104 	add.w	r1, r3, #4
 800362c:	d52a      	bpl.n	8003684 <_printf_i+0xa4>
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6011      	str	r1, [r2, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	da03      	bge.n	800363e <_printf_i+0x5e>
 8003636:	222d      	movs	r2, #45	; 0x2d
 8003638:	425b      	negs	r3, r3
 800363a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800363e:	486f      	ldr	r0, [pc, #444]	; (80037fc <_printf_i+0x21c>)
 8003640:	220a      	movs	r2, #10
 8003642:	e039      	b.n	80036b8 <_printf_i+0xd8>
 8003644:	2973      	cmp	r1, #115	; 0x73
 8003646:	f000 809d 	beq.w	8003784 <_printf_i+0x1a4>
 800364a:	d808      	bhi.n	800365e <_printf_i+0x7e>
 800364c:	296f      	cmp	r1, #111	; 0x6f
 800364e:	d020      	beq.n	8003692 <_printf_i+0xb2>
 8003650:	2970      	cmp	r1, #112	; 0x70
 8003652:	d1dd      	bne.n	8003610 <_printf_i+0x30>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	f043 0320 	orr.w	r3, r3, #32
 800365a:	6023      	str	r3, [r4, #0]
 800365c:	e003      	b.n	8003666 <_printf_i+0x86>
 800365e:	2975      	cmp	r1, #117	; 0x75
 8003660:	d017      	beq.n	8003692 <_printf_i+0xb2>
 8003662:	2978      	cmp	r1, #120	; 0x78
 8003664:	d1d4      	bne.n	8003610 <_printf_i+0x30>
 8003666:	2378      	movs	r3, #120	; 0x78
 8003668:	4865      	ldr	r0, [pc, #404]	; (8003800 <_printf_i+0x220>)
 800366a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800366e:	e055      	b.n	800371c <_printf_i+0x13c>
 8003670:	6813      	ldr	r3, [r2, #0]
 8003672:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003676:	1d19      	adds	r1, r3, #4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6011      	str	r1, [r2, #0]
 800367c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003680:	2301      	movs	r3, #1
 8003682:	e08c      	b.n	800379e <_printf_i+0x1be>
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f010 0f40 	tst.w	r0, #64	; 0x40
 800368a:	6011      	str	r1, [r2, #0]
 800368c:	bf18      	it	ne
 800368e:	b21b      	sxthne	r3, r3
 8003690:	e7cf      	b.n	8003632 <_printf_i+0x52>
 8003692:	6813      	ldr	r3, [r2, #0]
 8003694:	6825      	ldr	r5, [r4, #0]
 8003696:	1d18      	adds	r0, r3, #4
 8003698:	6010      	str	r0, [r2, #0]
 800369a:	0628      	lsls	r0, r5, #24
 800369c:	d501      	bpl.n	80036a2 <_printf_i+0xc2>
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	e002      	b.n	80036a8 <_printf_i+0xc8>
 80036a2:	0668      	lsls	r0, r5, #25
 80036a4:	d5fb      	bpl.n	800369e <_printf_i+0xbe>
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	296f      	cmp	r1, #111	; 0x6f
 80036aa:	bf14      	ite	ne
 80036ac:	220a      	movne	r2, #10
 80036ae:	2208      	moveq	r2, #8
 80036b0:	4852      	ldr	r0, [pc, #328]	; (80037fc <_printf_i+0x21c>)
 80036b2:	2100      	movs	r1, #0
 80036b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036b8:	6865      	ldr	r5, [r4, #4]
 80036ba:	2d00      	cmp	r5, #0
 80036bc:	60a5      	str	r5, [r4, #8]
 80036be:	f2c0 8095 	blt.w	80037ec <_printf_i+0x20c>
 80036c2:	6821      	ldr	r1, [r4, #0]
 80036c4:	f021 0104 	bic.w	r1, r1, #4
 80036c8:	6021      	str	r1, [r4, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d13d      	bne.n	800374a <_printf_i+0x16a>
 80036ce:	2d00      	cmp	r5, #0
 80036d0:	f040 808e 	bne.w	80037f0 <_printf_i+0x210>
 80036d4:	4665      	mov	r5, ip
 80036d6:	2a08      	cmp	r2, #8
 80036d8:	d10b      	bne.n	80036f2 <_printf_i+0x112>
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	07db      	lsls	r3, r3, #31
 80036de:	d508      	bpl.n	80036f2 <_printf_i+0x112>
 80036e0:	6923      	ldr	r3, [r4, #16]
 80036e2:	6862      	ldr	r2, [r4, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	bfde      	ittt	le
 80036e8:	2330      	movle	r3, #48	; 0x30
 80036ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036f2:	ebac 0305 	sub.w	r3, ip, r5
 80036f6:	6123      	str	r3, [r4, #16]
 80036f8:	f8cd 8000 	str.w	r8, [sp]
 80036fc:	463b      	mov	r3, r7
 80036fe:	aa03      	add	r2, sp, #12
 8003700:	4621      	mov	r1, r4
 8003702:	4630      	mov	r0, r6
 8003704:	f7ff fef6 	bl	80034f4 <_printf_common>
 8003708:	3001      	adds	r0, #1
 800370a:	d14d      	bne.n	80037a8 <_printf_i+0x1c8>
 800370c:	f04f 30ff 	mov.w	r0, #4294967295
 8003710:	b005      	add	sp, #20
 8003712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003716:	4839      	ldr	r0, [pc, #228]	; (80037fc <_printf_i+0x21c>)
 8003718:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800371c:	6813      	ldr	r3, [r2, #0]
 800371e:	6821      	ldr	r1, [r4, #0]
 8003720:	1d1d      	adds	r5, r3, #4
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6015      	str	r5, [r2, #0]
 8003726:	060a      	lsls	r2, r1, #24
 8003728:	d50b      	bpl.n	8003742 <_printf_i+0x162>
 800372a:	07ca      	lsls	r2, r1, #31
 800372c:	bf44      	itt	mi
 800372e:	f041 0120 	orrmi.w	r1, r1, #32
 8003732:	6021      	strmi	r1, [r4, #0]
 8003734:	b91b      	cbnz	r3, 800373e <_printf_i+0x15e>
 8003736:	6822      	ldr	r2, [r4, #0]
 8003738:	f022 0220 	bic.w	r2, r2, #32
 800373c:	6022      	str	r2, [r4, #0]
 800373e:	2210      	movs	r2, #16
 8003740:	e7b7      	b.n	80036b2 <_printf_i+0xd2>
 8003742:	064d      	lsls	r5, r1, #25
 8003744:	bf48      	it	mi
 8003746:	b29b      	uxthmi	r3, r3
 8003748:	e7ef      	b.n	800372a <_printf_i+0x14a>
 800374a:	4665      	mov	r5, ip
 800374c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003750:	fb02 3311 	mls	r3, r2, r1, r3
 8003754:	5cc3      	ldrb	r3, [r0, r3]
 8003756:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800375a:	460b      	mov	r3, r1
 800375c:	2900      	cmp	r1, #0
 800375e:	d1f5      	bne.n	800374c <_printf_i+0x16c>
 8003760:	e7b9      	b.n	80036d6 <_printf_i+0xf6>
 8003762:	6813      	ldr	r3, [r2, #0]
 8003764:	6825      	ldr	r5, [r4, #0]
 8003766:	1d18      	adds	r0, r3, #4
 8003768:	6961      	ldr	r1, [r4, #20]
 800376a:	6010      	str	r0, [r2, #0]
 800376c:	0628      	lsls	r0, r5, #24
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	d501      	bpl.n	8003776 <_printf_i+0x196>
 8003772:	6019      	str	r1, [r3, #0]
 8003774:	e002      	b.n	800377c <_printf_i+0x19c>
 8003776:	066a      	lsls	r2, r5, #25
 8003778:	d5fb      	bpl.n	8003772 <_printf_i+0x192>
 800377a:	8019      	strh	r1, [r3, #0]
 800377c:	2300      	movs	r3, #0
 800377e:	4665      	mov	r5, ip
 8003780:	6123      	str	r3, [r4, #16]
 8003782:	e7b9      	b.n	80036f8 <_printf_i+0x118>
 8003784:	6813      	ldr	r3, [r2, #0]
 8003786:	1d19      	adds	r1, r3, #4
 8003788:	6011      	str	r1, [r2, #0]
 800378a:	681d      	ldr	r5, [r3, #0]
 800378c:	6862      	ldr	r2, [r4, #4]
 800378e:	2100      	movs	r1, #0
 8003790:	4628      	mov	r0, r5
 8003792:	f002 fac7 	bl	8005d24 <memchr>
 8003796:	b108      	cbz	r0, 800379c <_printf_i+0x1bc>
 8003798:	1b40      	subs	r0, r0, r5
 800379a:	6060      	str	r0, [r4, #4]
 800379c:	6863      	ldr	r3, [r4, #4]
 800379e:	6123      	str	r3, [r4, #16]
 80037a0:	2300      	movs	r3, #0
 80037a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037a6:	e7a7      	b.n	80036f8 <_printf_i+0x118>
 80037a8:	6923      	ldr	r3, [r4, #16]
 80037aa:	462a      	mov	r2, r5
 80037ac:	4639      	mov	r1, r7
 80037ae:	4630      	mov	r0, r6
 80037b0:	47c0      	blx	r8
 80037b2:	3001      	adds	r0, #1
 80037b4:	d0aa      	beq.n	800370c <_printf_i+0x12c>
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	079b      	lsls	r3, r3, #30
 80037ba:	d413      	bmi.n	80037e4 <_printf_i+0x204>
 80037bc:	68e0      	ldr	r0, [r4, #12]
 80037be:	9b03      	ldr	r3, [sp, #12]
 80037c0:	4298      	cmp	r0, r3
 80037c2:	bfb8      	it	lt
 80037c4:	4618      	movlt	r0, r3
 80037c6:	e7a3      	b.n	8003710 <_printf_i+0x130>
 80037c8:	2301      	movs	r3, #1
 80037ca:	464a      	mov	r2, r9
 80037cc:	4639      	mov	r1, r7
 80037ce:	4630      	mov	r0, r6
 80037d0:	47c0      	blx	r8
 80037d2:	3001      	adds	r0, #1
 80037d4:	d09a      	beq.n	800370c <_printf_i+0x12c>
 80037d6:	3501      	adds	r5, #1
 80037d8:	68e3      	ldr	r3, [r4, #12]
 80037da:	9a03      	ldr	r2, [sp, #12]
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	42ab      	cmp	r3, r5
 80037e0:	dcf2      	bgt.n	80037c8 <_printf_i+0x1e8>
 80037e2:	e7eb      	b.n	80037bc <_printf_i+0x1dc>
 80037e4:	2500      	movs	r5, #0
 80037e6:	f104 0919 	add.w	r9, r4, #25
 80037ea:	e7f5      	b.n	80037d8 <_printf_i+0x1f8>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1ac      	bne.n	800374a <_printf_i+0x16a>
 80037f0:	7803      	ldrb	r3, [r0, #0]
 80037f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037fa:	e76c      	b.n	80036d6 <_printf_i+0xf6>
 80037fc:	08006ac0 	.word	0x08006ac0
 8003800:	08006ad1 	.word	0x08006ad1

08003804 <_scanf_float>:
 8003804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003808:	469a      	mov	sl, r3
 800380a:	688b      	ldr	r3, [r1, #8]
 800380c:	4616      	mov	r6, r2
 800380e:	1e5a      	subs	r2, r3, #1
 8003810:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003814:	bf88      	it	hi
 8003816:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800381a:	b087      	sub	sp, #28
 800381c:	bf85      	ittet	hi
 800381e:	189b      	addhi	r3, r3, r2
 8003820:	9301      	strhi	r3, [sp, #4]
 8003822:	2300      	movls	r3, #0
 8003824:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003828:	4688      	mov	r8, r1
 800382a:	f04f 0b00 	mov.w	fp, #0
 800382e:	bf8c      	ite	hi
 8003830:	608b      	strhi	r3, [r1, #8]
 8003832:	9301      	strls	r3, [sp, #4]
 8003834:	680b      	ldr	r3, [r1, #0]
 8003836:	4607      	mov	r7, r0
 8003838:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800383c:	f848 3b1c 	str.w	r3, [r8], #28
 8003840:	460c      	mov	r4, r1
 8003842:	4645      	mov	r5, r8
 8003844:	465a      	mov	r2, fp
 8003846:	46d9      	mov	r9, fp
 8003848:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800384c:	f8cd b008 	str.w	fp, [sp, #8]
 8003850:	68a1      	ldr	r1, [r4, #8]
 8003852:	b181      	cbz	r1, 8003876 <_scanf_float+0x72>
 8003854:	6833      	ldr	r3, [r6, #0]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b49      	cmp	r3, #73	; 0x49
 800385a:	d071      	beq.n	8003940 <_scanf_float+0x13c>
 800385c:	d84d      	bhi.n	80038fa <_scanf_float+0xf6>
 800385e:	2b39      	cmp	r3, #57	; 0x39
 8003860:	d840      	bhi.n	80038e4 <_scanf_float+0xe0>
 8003862:	2b31      	cmp	r3, #49	; 0x31
 8003864:	f080 8088 	bcs.w	8003978 <_scanf_float+0x174>
 8003868:	2b2d      	cmp	r3, #45	; 0x2d
 800386a:	f000 8090 	beq.w	800398e <_scanf_float+0x18a>
 800386e:	d815      	bhi.n	800389c <_scanf_float+0x98>
 8003870:	2b2b      	cmp	r3, #43	; 0x2b
 8003872:	f000 808c 	beq.w	800398e <_scanf_float+0x18a>
 8003876:	f1b9 0f00 	cmp.w	r9, #0
 800387a:	d003      	beq.n	8003884 <_scanf_float+0x80>
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003882:	6023      	str	r3, [r4, #0]
 8003884:	3a01      	subs	r2, #1
 8003886:	2a01      	cmp	r2, #1
 8003888:	f200 80ea 	bhi.w	8003a60 <_scanf_float+0x25c>
 800388c:	4545      	cmp	r5, r8
 800388e:	f200 80dc 	bhi.w	8003a4a <_scanf_float+0x246>
 8003892:	2601      	movs	r6, #1
 8003894:	4630      	mov	r0, r6
 8003896:	b007      	add	sp, #28
 8003898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800389c:	2b2e      	cmp	r3, #46	; 0x2e
 800389e:	f000 809f 	beq.w	80039e0 <_scanf_float+0x1dc>
 80038a2:	2b30      	cmp	r3, #48	; 0x30
 80038a4:	d1e7      	bne.n	8003876 <_scanf_float+0x72>
 80038a6:	6820      	ldr	r0, [r4, #0]
 80038a8:	f410 7f80 	tst.w	r0, #256	; 0x100
 80038ac:	d064      	beq.n	8003978 <_scanf_float+0x174>
 80038ae:	9b01      	ldr	r3, [sp, #4]
 80038b0:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80038b4:	6020      	str	r0, [r4, #0]
 80038b6:	f109 0901 	add.w	r9, r9, #1
 80038ba:	b11b      	cbz	r3, 80038c4 <_scanf_float+0xc0>
 80038bc:	3b01      	subs	r3, #1
 80038be:	3101      	adds	r1, #1
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	60a1      	str	r1, [r4, #8]
 80038c4:	68a3      	ldr	r3, [r4, #8]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	60a3      	str	r3, [r4, #8]
 80038ca:	6923      	ldr	r3, [r4, #16]
 80038cc:	3301      	adds	r3, #1
 80038ce:	6123      	str	r3, [r4, #16]
 80038d0:	6873      	ldr	r3, [r6, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	6073      	str	r3, [r6, #4]
 80038d8:	f340 80ac 	ble.w	8003a34 <_scanf_float+0x230>
 80038dc:	6833      	ldr	r3, [r6, #0]
 80038de:	3301      	adds	r3, #1
 80038e0:	6033      	str	r3, [r6, #0]
 80038e2:	e7b5      	b.n	8003850 <_scanf_float+0x4c>
 80038e4:	2b45      	cmp	r3, #69	; 0x45
 80038e6:	f000 8085 	beq.w	80039f4 <_scanf_float+0x1f0>
 80038ea:	2b46      	cmp	r3, #70	; 0x46
 80038ec:	d06a      	beq.n	80039c4 <_scanf_float+0x1c0>
 80038ee:	2b41      	cmp	r3, #65	; 0x41
 80038f0:	d1c1      	bne.n	8003876 <_scanf_float+0x72>
 80038f2:	2a01      	cmp	r2, #1
 80038f4:	d1bf      	bne.n	8003876 <_scanf_float+0x72>
 80038f6:	2202      	movs	r2, #2
 80038f8:	e046      	b.n	8003988 <_scanf_float+0x184>
 80038fa:	2b65      	cmp	r3, #101	; 0x65
 80038fc:	d07a      	beq.n	80039f4 <_scanf_float+0x1f0>
 80038fe:	d818      	bhi.n	8003932 <_scanf_float+0x12e>
 8003900:	2b54      	cmp	r3, #84	; 0x54
 8003902:	d066      	beq.n	80039d2 <_scanf_float+0x1ce>
 8003904:	d811      	bhi.n	800392a <_scanf_float+0x126>
 8003906:	2b4e      	cmp	r3, #78	; 0x4e
 8003908:	d1b5      	bne.n	8003876 <_scanf_float+0x72>
 800390a:	2a00      	cmp	r2, #0
 800390c:	d146      	bne.n	800399c <_scanf_float+0x198>
 800390e:	f1b9 0f00 	cmp.w	r9, #0
 8003912:	d145      	bne.n	80039a0 <_scanf_float+0x19c>
 8003914:	6821      	ldr	r1, [r4, #0]
 8003916:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800391a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800391e:	d13f      	bne.n	80039a0 <_scanf_float+0x19c>
 8003920:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003924:	6021      	str	r1, [r4, #0]
 8003926:	2201      	movs	r2, #1
 8003928:	e02e      	b.n	8003988 <_scanf_float+0x184>
 800392a:	2b59      	cmp	r3, #89	; 0x59
 800392c:	d01e      	beq.n	800396c <_scanf_float+0x168>
 800392e:	2b61      	cmp	r3, #97	; 0x61
 8003930:	e7de      	b.n	80038f0 <_scanf_float+0xec>
 8003932:	2b6e      	cmp	r3, #110	; 0x6e
 8003934:	d0e9      	beq.n	800390a <_scanf_float+0x106>
 8003936:	d815      	bhi.n	8003964 <_scanf_float+0x160>
 8003938:	2b66      	cmp	r3, #102	; 0x66
 800393a:	d043      	beq.n	80039c4 <_scanf_float+0x1c0>
 800393c:	2b69      	cmp	r3, #105	; 0x69
 800393e:	d19a      	bne.n	8003876 <_scanf_float+0x72>
 8003940:	f1bb 0f00 	cmp.w	fp, #0
 8003944:	d138      	bne.n	80039b8 <_scanf_float+0x1b4>
 8003946:	f1b9 0f00 	cmp.w	r9, #0
 800394a:	d197      	bne.n	800387c <_scanf_float+0x78>
 800394c:	6821      	ldr	r1, [r4, #0]
 800394e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003952:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003956:	d195      	bne.n	8003884 <_scanf_float+0x80>
 8003958:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800395c:	6021      	str	r1, [r4, #0]
 800395e:	f04f 0b01 	mov.w	fp, #1
 8003962:	e011      	b.n	8003988 <_scanf_float+0x184>
 8003964:	2b74      	cmp	r3, #116	; 0x74
 8003966:	d034      	beq.n	80039d2 <_scanf_float+0x1ce>
 8003968:	2b79      	cmp	r3, #121	; 0x79
 800396a:	d184      	bne.n	8003876 <_scanf_float+0x72>
 800396c:	f1bb 0f07 	cmp.w	fp, #7
 8003970:	d181      	bne.n	8003876 <_scanf_float+0x72>
 8003972:	f04f 0b08 	mov.w	fp, #8
 8003976:	e007      	b.n	8003988 <_scanf_float+0x184>
 8003978:	eb12 0f0b 	cmn.w	r2, fp
 800397c:	f47f af7b 	bne.w	8003876 <_scanf_float+0x72>
 8003980:	6821      	ldr	r1, [r4, #0]
 8003982:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8003986:	6021      	str	r1, [r4, #0]
 8003988:	702b      	strb	r3, [r5, #0]
 800398a:	3501      	adds	r5, #1
 800398c:	e79a      	b.n	80038c4 <_scanf_float+0xc0>
 800398e:	6821      	ldr	r1, [r4, #0]
 8003990:	0608      	lsls	r0, r1, #24
 8003992:	f57f af70 	bpl.w	8003876 <_scanf_float+0x72>
 8003996:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800399a:	e7f4      	b.n	8003986 <_scanf_float+0x182>
 800399c:	2a02      	cmp	r2, #2
 800399e:	d047      	beq.n	8003a30 <_scanf_float+0x22c>
 80039a0:	f1bb 0f01 	cmp.w	fp, #1
 80039a4:	d003      	beq.n	80039ae <_scanf_float+0x1aa>
 80039a6:	f1bb 0f04 	cmp.w	fp, #4
 80039aa:	f47f af64 	bne.w	8003876 <_scanf_float+0x72>
 80039ae:	f10b 0b01 	add.w	fp, fp, #1
 80039b2:	fa5f fb8b 	uxtb.w	fp, fp
 80039b6:	e7e7      	b.n	8003988 <_scanf_float+0x184>
 80039b8:	f1bb 0f03 	cmp.w	fp, #3
 80039bc:	d0f7      	beq.n	80039ae <_scanf_float+0x1aa>
 80039be:	f1bb 0f05 	cmp.w	fp, #5
 80039c2:	e7f2      	b.n	80039aa <_scanf_float+0x1a6>
 80039c4:	f1bb 0f02 	cmp.w	fp, #2
 80039c8:	f47f af55 	bne.w	8003876 <_scanf_float+0x72>
 80039cc:	f04f 0b03 	mov.w	fp, #3
 80039d0:	e7da      	b.n	8003988 <_scanf_float+0x184>
 80039d2:	f1bb 0f06 	cmp.w	fp, #6
 80039d6:	f47f af4e 	bne.w	8003876 <_scanf_float+0x72>
 80039da:	f04f 0b07 	mov.w	fp, #7
 80039de:	e7d3      	b.n	8003988 <_scanf_float+0x184>
 80039e0:	6821      	ldr	r1, [r4, #0]
 80039e2:	0588      	lsls	r0, r1, #22
 80039e4:	f57f af47 	bpl.w	8003876 <_scanf_float+0x72>
 80039e8:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80039ec:	6021      	str	r1, [r4, #0]
 80039ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80039f2:	e7c9      	b.n	8003988 <_scanf_float+0x184>
 80039f4:	6821      	ldr	r1, [r4, #0]
 80039f6:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80039fa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80039fe:	d006      	beq.n	8003a0e <_scanf_float+0x20a>
 8003a00:	0548      	lsls	r0, r1, #21
 8003a02:	f57f af38 	bpl.w	8003876 <_scanf_float+0x72>
 8003a06:	f1b9 0f00 	cmp.w	r9, #0
 8003a0a:	f43f af3b 	beq.w	8003884 <_scanf_float+0x80>
 8003a0e:	0588      	lsls	r0, r1, #22
 8003a10:	bf58      	it	pl
 8003a12:	9802      	ldrpl	r0, [sp, #8]
 8003a14:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003a18:	bf58      	it	pl
 8003a1a:	eba9 0000 	subpl.w	r0, r9, r0
 8003a1e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003a22:	bf58      	it	pl
 8003a24:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8003a28:	6021      	str	r1, [r4, #0]
 8003a2a:	f04f 0900 	mov.w	r9, #0
 8003a2e:	e7ab      	b.n	8003988 <_scanf_float+0x184>
 8003a30:	2203      	movs	r2, #3
 8003a32:	e7a9      	b.n	8003988 <_scanf_float+0x184>
 8003a34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003a38:	4631      	mov	r1, r6
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	9205      	str	r2, [sp, #20]
 8003a3e:	4798      	blx	r3
 8003a40:	9a05      	ldr	r2, [sp, #20]
 8003a42:	2800      	cmp	r0, #0
 8003a44:	f43f af04 	beq.w	8003850 <_scanf_float+0x4c>
 8003a48:	e715      	b.n	8003876 <_scanf_float+0x72>
 8003a4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a4e:	4632      	mov	r2, r6
 8003a50:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003a54:	4638      	mov	r0, r7
 8003a56:	4798      	blx	r3
 8003a58:	6923      	ldr	r3, [r4, #16]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	6123      	str	r3, [r4, #16]
 8003a5e:	e715      	b.n	800388c <_scanf_float+0x88>
 8003a60:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d80a      	bhi.n	8003a7e <_scanf_float+0x27a>
 8003a68:	f1bb 0f02 	cmp.w	fp, #2
 8003a6c:	d967      	bls.n	8003b3e <_scanf_float+0x33a>
 8003a6e:	f1ab 0b03 	sub.w	fp, fp, #3
 8003a72:	fa5f fb8b 	uxtb.w	fp, fp
 8003a76:	eba5 0b0b 	sub.w	fp, r5, fp
 8003a7a:	455d      	cmp	r5, fp
 8003a7c:	d14a      	bne.n	8003b14 <_scanf_float+0x310>
 8003a7e:	6823      	ldr	r3, [r4, #0]
 8003a80:	05da      	lsls	r2, r3, #23
 8003a82:	d51f      	bpl.n	8003ac4 <_scanf_float+0x2c0>
 8003a84:	055b      	lsls	r3, r3, #21
 8003a86:	d467      	bmi.n	8003b58 <_scanf_float+0x354>
 8003a88:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003a8c:	6923      	ldr	r3, [r4, #16]
 8003a8e:	2965      	cmp	r1, #101	; 0x65
 8003a90:	f103 33ff 	add.w	r3, r3, #4294967295
 8003a94:	f105 3bff 	add.w	fp, r5, #4294967295
 8003a98:	6123      	str	r3, [r4, #16]
 8003a9a:	d00d      	beq.n	8003ab8 <_scanf_float+0x2b4>
 8003a9c:	2945      	cmp	r1, #69	; 0x45
 8003a9e:	d00b      	beq.n	8003ab8 <_scanf_float+0x2b4>
 8003aa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003aa4:	4632      	mov	r2, r6
 8003aa6:	4638      	mov	r0, r7
 8003aa8:	4798      	blx	r3
 8003aaa:	6923      	ldr	r3, [r4, #16]
 8003aac:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	f1a5 0b02 	sub.w	fp, r5, #2
 8003ab6:	6123      	str	r3, [r4, #16]
 8003ab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003abc:	4632      	mov	r2, r6
 8003abe:	4638      	mov	r0, r7
 8003ac0:	4798      	blx	r3
 8003ac2:	465d      	mov	r5, fp
 8003ac4:	6826      	ldr	r6, [r4, #0]
 8003ac6:	f016 0610 	ands.w	r6, r6, #16
 8003aca:	d176      	bne.n	8003bba <_scanf_float+0x3b6>
 8003acc:	702e      	strb	r6, [r5, #0]
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad8:	d141      	bne.n	8003b5e <_scanf_float+0x35a>
 8003ada:	9b02      	ldr	r3, [sp, #8]
 8003adc:	eba9 0303 	sub.w	r3, r9, r3
 8003ae0:	425a      	negs	r2, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d148      	bne.n	8003b78 <_scanf_float+0x374>
 8003ae6:	4641      	mov	r1, r8
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4638      	mov	r0, r7
 8003aec:	f000 fee4 	bl	80048b8 <_strtod_r>
 8003af0:	6825      	ldr	r5, [r4, #0]
 8003af2:	4680      	mov	r8, r0
 8003af4:	f015 0f02 	tst.w	r5, #2
 8003af8:	4689      	mov	r9, r1
 8003afa:	f8da 3000 	ldr.w	r3, [sl]
 8003afe:	d046      	beq.n	8003b8e <_scanf_float+0x38a>
 8003b00:	1d1a      	adds	r2, r3, #4
 8003b02:	f8ca 2000 	str.w	r2, [sl]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	e9c3 8900 	strd	r8, r9, [r3]
 8003b0c:	68e3      	ldr	r3, [r4, #12]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	60e3      	str	r3, [r4, #12]
 8003b12:	e6bf      	b.n	8003894 <_scanf_float+0x90>
 8003b14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b18:	4632      	mov	r2, r6
 8003b1a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003b1e:	4638      	mov	r0, r7
 8003b20:	4798      	blx	r3
 8003b22:	6923      	ldr	r3, [r4, #16]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	6123      	str	r3, [r4, #16]
 8003b28:	e7a7      	b.n	8003a7a <_scanf_float+0x276>
 8003b2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b2e:	4632      	mov	r2, r6
 8003b30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003b34:	4638      	mov	r0, r7
 8003b36:	4798      	blx	r3
 8003b38:	6923      	ldr	r3, [r4, #16]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	6123      	str	r3, [r4, #16]
 8003b3e:	4545      	cmp	r5, r8
 8003b40:	d8f3      	bhi.n	8003b2a <_scanf_float+0x326>
 8003b42:	e6a6      	b.n	8003892 <_scanf_float+0x8e>
 8003b44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b48:	4632      	mov	r2, r6
 8003b4a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003b4e:	4638      	mov	r0, r7
 8003b50:	4798      	blx	r3
 8003b52:	6923      	ldr	r3, [r4, #16]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	6123      	str	r3, [r4, #16]
 8003b58:	4545      	cmp	r5, r8
 8003b5a:	d8f3      	bhi.n	8003b44 <_scanf_float+0x340>
 8003b5c:	e699      	b.n	8003892 <_scanf_float+0x8e>
 8003b5e:	9b03      	ldr	r3, [sp, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0c0      	beq.n	8003ae6 <_scanf_float+0x2e2>
 8003b64:	9904      	ldr	r1, [sp, #16]
 8003b66:	230a      	movs	r3, #10
 8003b68:	4632      	mov	r2, r6
 8003b6a:	3101      	adds	r1, #1
 8003b6c:	4638      	mov	r0, r7
 8003b6e:	f000 ff2f 	bl	80049d0 <_strtol_r>
 8003b72:	9b03      	ldr	r3, [sp, #12]
 8003b74:	9d04      	ldr	r5, [sp, #16]
 8003b76:	1ac2      	subs	r2, r0, r3
 8003b78:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003b7c:	429d      	cmp	r5, r3
 8003b7e:	bf28      	it	cs
 8003b80:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8003b84:	490e      	ldr	r1, [pc, #56]	; (8003bc0 <_scanf_float+0x3bc>)
 8003b86:	4628      	mov	r0, r5
 8003b88:	f000 f854 	bl	8003c34 <siprintf>
 8003b8c:	e7ab      	b.n	8003ae6 <_scanf_float+0x2e2>
 8003b8e:	1d1f      	adds	r7, r3, #4
 8003b90:	f015 0504 	ands.w	r5, r5, #4
 8003b94:	f8ca 7000 	str.w	r7, [sl]
 8003b98:	d1b5      	bne.n	8003b06 <_scanf_float+0x302>
 8003b9a:	681f      	ldr	r7, [r3, #0]
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	f7fc ff34 	bl	8000a0c <__aeabi_dcmpun>
 8003ba4:	b120      	cbz	r0, 8003bb0 <_scanf_float+0x3ac>
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	f000 f80c 	bl	8003bc4 <nanf>
 8003bac:	6038      	str	r0, [r7, #0]
 8003bae:	e7ad      	b.n	8003b0c <_scanf_float+0x308>
 8003bb0:	4640      	mov	r0, r8
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	f7fc ff88 	bl	8000ac8 <__aeabi_d2f>
 8003bb8:	e7f8      	b.n	8003bac <_scanf_float+0x3a8>
 8003bba:	2600      	movs	r6, #0
 8003bbc:	e66a      	b.n	8003894 <_scanf_float+0x90>
 8003bbe:	bf00      	nop
 8003bc0:	08006ae2 	.word	0x08006ae2

08003bc4 <nanf>:
 8003bc4:	4800      	ldr	r0, [pc, #0]	; (8003bc8 <nanf+0x4>)
 8003bc6:	4770      	bx	lr
 8003bc8:	7fc00000 	.word	0x7fc00000

08003bcc <sniprintf>:
 8003bcc:	b40c      	push	{r2, r3}
 8003bce:	b530      	push	{r4, r5, lr}
 8003bd0:	4b17      	ldr	r3, [pc, #92]	; (8003c30 <sniprintf+0x64>)
 8003bd2:	1e0c      	subs	r4, r1, #0
 8003bd4:	b09d      	sub	sp, #116	; 0x74
 8003bd6:	681d      	ldr	r5, [r3, #0]
 8003bd8:	da08      	bge.n	8003bec <sniprintf+0x20>
 8003bda:	238b      	movs	r3, #139	; 0x8b
 8003bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003be0:	602b      	str	r3, [r5, #0]
 8003be2:	b01d      	add	sp, #116	; 0x74
 8003be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003be8:	b002      	add	sp, #8
 8003bea:	4770      	bx	lr
 8003bec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003bf0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003bf4:	bf0c      	ite	eq
 8003bf6:	4623      	moveq	r3, r4
 8003bf8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003bfc:	9304      	str	r3, [sp, #16]
 8003bfe:	9307      	str	r3, [sp, #28]
 8003c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c04:	9002      	str	r0, [sp, #8]
 8003c06:	9006      	str	r0, [sp, #24]
 8003c08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003c0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003c0e:	ab21      	add	r3, sp, #132	; 0x84
 8003c10:	a902      	add	r1, sp, #8
 8003c12:	4628      	mov	r0, r5
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	f002 fda5 	bl	8006764 <_svfiprintf_r>
 8003c1a:	1c43      	adds	r3, r0, #1
 8003c1c:	bfbc      	itt	lt
 8003c1e:	238b      	movlt	r3, #139	; 0x8b
 8003c20:	602b      	strlt	r3, [r5, #0]
 8003c22:	2c00      	cmp	r4, #0
 8003c24:	d0dd      	beq.n	8003be2 <sniprintf+0x16>
 8003c26:	2200      	movs	r2, #0
 8003c28:	9b02      	ldr	r3, [sp, #8]
 8003c2a:	701a      	strb	r2, [r3, #0]
 8003c2c:	e7d9      	b.n	8003be2 <sniprintf+0x16>
 8003c2e:	bf00      	nop
 8003c30:	2000000c 	.word	0x2000000c

08003c34 <siprintf>:
 8003c34:	b40e      	push	{r1, r2, r3}
 8003c36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c3a:	b500      	push	{lr}
 8003c3c:	b09c      	sub	sp, #112	; 0x70
 8003c3e:	ab1d      	add	r3, sp, #116	; 0x74
 8003c40:	9002      	str	r0, [sp, #8]
 8003c42:	9006      	str	r0, [sp, #24]
 8003c44:	9107      	str	r1, [sp, #28]
 8003c46:	9104      	str	r1, [sp, #16]
 8003c48:	4808      	ldr	r0, [pc, #32]	; (8003c6c <siprintf+0x38>)
 8003c4a:	4909      	ldr	r1, [pc, #36]	; (8003c70 <siprintf+0x3c>)
 8003c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c50:	9105      	str	r1, [sp, #20]
 8003c52:	6800      	ldr	r0, [r0, #0]
 8003c54:	a902      	add	r1, sp, #8
 8003c56:	9301      	str	r3, [sp, #4]
 8003c58:	f002 fd84 	bl	8006764 <_svfiprintf_r>
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	9b02      	ldr	r3, [sp, #8]
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	b01c      	add	sp, #112	; 0x70
 8003c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c68:	b003      	add	sp, #12
 8003c6a:	4770      	bx	lr
 8003c6c:	2000000c 	.word	0x2000000c
 8003c70:	ffff0208 	.word	0xffff0208

08003c74 <sulp>:
 8003c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c78:	460f      	mov	r7, r1
 8003c7a:	4690      	mov	r8, r2
 8003c7c:	f002 fb36 	bl	80062ec <__ulp>
 8003c80:	4604      	mov	r4, r0
 8003c82:	460d      	mov	r5, r1
 8003c84:	f1b8 0f00 	cmp.w	r8, #0
 8003c88:	d011      	beq.n	8003cae <sulp+0x3a>
 8003c8a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003c8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	dd0b      	ble.n	8003cae <sulp+0x3a>
 8003c96:	2400      	movs	r4, #0
 8003c98:	051b      	lsls	r3, r3, #20
 8003c9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003c9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003ca2:	4622      	mov	r2, r4
 8003ca4:	462b      	mov	r3, r5
 8003ca6:	f7fc fc17 	bl	80004d8 <__aeabi_dmul>
 8003caa:	4604      	mov	r4, r0
 8003cac:	460d      	mov	r5, r1
 8003cae:	4620      	mov	r0, r4
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003cb8 <_strtod_l>:
 8003cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cbc:	461f      	mov	r7, r3
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	b0a1      	sub	sp, #132	; 0x84
 8003cc2:	4683      	mov	fp, r0
 8003cc4:	4638      	mov	r0, r7
 8003cc6:	460e      	mov	r6, r1
 8003cc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8003cca:	931c      	str	r3, [sp, #112]	; 0x70
 8003ccc:	f001 ffff 	bl	8005cce <__localeconv_l>
 8003cd0:	4680      	mov	r8, r0
 8003cd2:	6800      	ldr	r0, [r0, #0]
 8003cd4:	f7fc fa3c 	bl	8000150 <strlen>
 8003cd8:	f04f 0900 	mov.w	r9, #0
 8003cdc:	4604      	mov	r4, r0
 8003cde:	f04f 0a00 	mov.w	sl, #0
 8003ce2:	961b      	str	r6, [sp, #108]	; 0x6c
 8003ce4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ce6:	781a      	ldrb	r2, [r3, #0]
 8003ce8:	2a0d      	cmp	r2, #13
 8003cea:	d832      	bhi.n	8003d52 <_strtod_l+0x9a>
 8003cec:	2a09      	cmp	r2, #9
 8003cee:	d236      	bcs.n	8003d5e <_strtod_l+0xa6>
 8003cf0:	2a00      	cmp	r2, #0
 8003cf2:	d03e      	beq.n	8003d72 <_strtod_l+0xba>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	930d      	str	r3, [sp, #52]	; 0x34
 8003cf8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003cfa:	782b      	ldrb	r3, [r5, #0]
 8003cfc:	2b30      	cmp	r3, #48	; 0x30
 8003cfe:	f040 80ac 	bne.w	8003e5a <_strtod_l+0x1a2>
 8003d02:	786b      	ldrb	r3, [r5, #1]
 8003d04:	2b58      	cmp	r3, #88	; 0x58
 8003d06:	d001      	beq.n	8003d0c <_strtod_l+0x54>
 8003d08:	2b78      	cmp	r3, #120	; 0x78
 8003d0a:	d167      	bne.n	8003ddc <_strtod_l+0x124>
 8003d0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d0e:	9702      	str	r7, [sp, #8]
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	ab1c      	add	r3, sp, #112	; 0x70
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	4a89      	ldr	r2, [pc, #548]	; (8003f3c <_strtod_l+0x284>)
 8003d18:	ab1d      	add	r3, sp, #116	; 0x74
 8003d1a:	a91b      	add	r1, sp, #108	; 0x6c
 8003d1c:	4658      	mov	r0, fp
 8003d1e:	f001 fcfb 	bl	8005718 <__gethex>
 8003d22:	f010 0407 	ands.w	r4, r0, #7
 8003d26:	4606      	mov	r6, r0
 8003d28:	d005      	beq.n	8003d36 <_strtod_l+0x7e>
 8003d2a:	2c06      	cmp	r4, #6
 8003d2c:	d12b      	bne.n	8003d86 <_strtod_l+0xce>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	3501      	adds	r5, #1
 8003d32:	951b      	str	r5, [sp, #108]	; 0x6c
 8003d34:	930d      	str	r3, [sp, #52]	; 0x34
 8003d36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f040 85a6 	bne.w	800488a <_strtod_l+0xbd2>
 8003d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d40:	b1e3      	cbz	r3, 8003d7c <_strtod_l+0xc4>
 8003d42:	464a      	mov	r2, r9
 8003d44:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	b021      	add	sp, #132	; 0x84
 8003d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d52:	2a2b      	cmp	r2, #43	; 0x2b
 8003d54:	d015      	beq.n	8003d82 <_strtod_l+0xca>
 8003d56:	2a2d      	cmp	r2, #45	; 0x2d
 8003d58:	d004      	beq.n	8003d64 <_strtod_l+0xac>
 8003d5a:	2a20      	cmp	r2, #32
 8003d5c:	d1ca      	bne.n	8003cf4 <_strtod_l+0x3c>
 8003d5e:	3301      	adds	r3, #1
 8003d60:	931b      	str	r3, [sp, #108]	; 0x6c
 8003d62:	e7bf      	b.n	8003ce4 <_strtod_l+0x2c>
 8003d64:	2201      	movs	r2, #1
 8003d66:	920d      	str	r2, [sp, #52]	; 0x34
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	921b      	str	r2, [sp, #108]	; 0x6c
 8003d6c:	785b      	ldrb	r3, [r3, #1]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1c2      	bne.n	8003cf8 <_strtod_l+0x40>
 8003d72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003d74:	961b      	str	r6, [sp, #108]	; 0x6c
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f040 8585 	bne.w	8004886 <_strtod_l+0xbce>
 8003d7c:	464a      	mov	r2, r9
 8003d7e:	4653      	mov	r3, sl
 8003d80:	e7e2      	b.n	8003d48 <_strtod_l+0x90>
 8003d82:	2200      	movs	r2, #0
 8003d84:	e7ef      	b.n	8003d66 <_strtod_l+0xae>
 8003d86:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003d88:	b13a      	cbz	r2, 8003d9a <_strtod_l+0xe2>
 8003d8a:	2135      	movs	r1, #53	; 0x35
 8003d8c:	a81e      	add	r0, sp, #120	; 0x78
 8003d8e:	f002 fba0 	bl	80064d2 <__copybits>
 8003d92:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003d94:	4658      	mov	r0, fp
 8003d96:	f002 f812 	bl	8005dbe <_Bfree>
 8003d9a:	3c01      	subs	r4, #1
 8003d9c:	2c04      	cmp	r4, #4
 8003d9e:	d806      	bhi.n	8003dae <_strtod_l+0xf6>
 8003da0:	e8df f004 	tbb	[pc, r4]
 8003da4:	1714030a 	.word	0x1714030a
 8003da8:	0a          	.byte	0x0a
 8003da9:	00          	.byte	0x00
 8003daa:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8003dae:	0731      	lsls	r1, r6, #28
 8003db0:	d5c1      	bpl.n	8003d36 <_strtod_l+0x7e>
 8003db2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8003db6:	e7be      	b.n	8003d36 <_strtod_l+0x7e>
 8003db8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003dba:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8003dbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003dc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003dc6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8003dca:	e7f0      	b.n	8003dae <_strtod_l+0xf6>
 8003dcc:	f8df a170 	ldr.w	sl, [pc, #368]	; 8003f40 <_strtod_l+0x288>
 8003dd0:	e7ed      	b.n	8003dae <_strtod_l+0xf6>
 8003dd2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8003dd6:	f04f 39ff 	mov.w	r9, #4294967295
 8003dda:	e7e8      	b.n	8003dae <_strtod_l+0xf6>
 8003ddc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	921b      	str	r2, [sp, #108]	; 0x6c
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	2b30      	cmp	r3, #48	; 0x30
 8003de6:	d0f9      	beq.n	8003ddc <_strtod_l+0x124>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0a4      	beq.n	8003d36 <_strtod_l+0x7e>
 8003dec:	2301      	movs	r3, #1
 8003dee:	2500      	movs	r5, #0
 8003df0:	220a      	movs	r2, #10
 8003df2:	9307      	str	r3, [sp, #28]
 8003df4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003df6:	9506      	str	r5, [sp, #24]
 8003df8:	9308      	str	r3, [sp, #32]
 8003dfa:	9504      	str	r5, [sp, #16]
 8003dfc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003dfe:	7807      	ldrb	r7, [r0, #0]
 8003e00:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8003e04:	b2d9      	uxtb	r1, r3
 8003e06:	2909      	cmp	r1, #9
 8003e08:	d929      	bls.n	8003e5e <_strtod_l+0x1a6>
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	f8d8 1000 	ldr.w	r1, [r8]
 8003e10:	f002 fdb0 	bl	8006974 <strncmp>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d031      	beq.n	8003e7c <_strtod_l+0x1c4>
 8003e18:	2000      	movs	r0, #0
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	9c04      	ldr	r4, [sp, #16]
 8003e20:	9005      	str	r0, [sp, #20]
 8003e22:	2b65      	cmp	r3, #101	; 0x65
 8003e24:	d001      	beq.n	8003e2a <_strtod_l+0x172>
 8003e26:	2b45      	cmp	r3, #69	; 0x45
 8003e28:	d114      	bne.n	8003e54 <_strtod_l+0x19c>
 8003e2a:	b924      	cbnz	r4, 8003e36 <_strtod_l+0x17e>
 8003e2c:	b910      	cbnz	r0, 8003e34 <_strtod_l+0x17c>
 8003e2e:	9b07      	ldr	r3, [sp, #28]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d09e      	beq.n	8003d72 <_strtod_l+0xba>
 8003e34:	2400      	movs	r4, #0
 8003e36:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003e38:	1c73      	adds	r3, r6, #1
 8003e3a:	931b      	str	r3, [sp, #108]	; 0x6c
 8003e3c:	7873      	ldrb	r3, [r6, #1]
 8003e3e:	2b2b      	cmp	r3, #43	; 0x2b
 8003e40:	d078      	beq.n	8003f34 <_strtod_l+0x27c>
 8003e42:	2b2d      	cmp	r3, #45	; 0x2d
 8003e44:	d070      	beq.n	8003f28 <_strtod_l+0x270>
 8003e46:	f04f 0c00 	mov.w	ip, #0
 8003e4a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8003e4e:	2f09      	cmp	r7, #9
 8003e50:	d97c      	bls.n	8003f4c <_strtod_l+0x294>
 8003e52:	961b      	str	r6, [sp, #108]	; 0x6c
 8003e54:	f04f 0e00 	mov.w	lr, #0
 8003e58:	e09a      	b.n	8003f90 <_strtod_l+0x2d8>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e7c7      	b.n	8003dee <_strtod_l+0x136>
 8003e5e:	9904      	ldr	r1, [sp, #16]
 8003e60:	3001      	adds	r0, #1
 8003e62:	2908      	cmp	r1, #8
 8003e64:	bfd7      	itett	le
 8003e66:	9906      	ldrle	r1, [sp, #24]
 8003e68:	fb02 3505 	mlagt	r5, r2, r5, r3
 8003e6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8003e70:	9306      	strle	r3, [sp, #24]
 8003e72:	9b04      	ldr	r3, [sp, #16]
 8003e74:	901b      	str	r0, [sp, #108]	; 0x6c
 8003e76:	3301      	adds	r3, #1
 8003e78:	9304      	str	r3, [sp, #16]
 8003e7a:	e7bf      	b.n	8003dfc <_strtod_l+0x144>
 8003e7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e7e:	191a      	adds	r2, r3, r4
 8003e80:	921b      	str	r2, [sp, #108]	; 0x6c
 8003e82:	9a04      	ldr	r2, [sp, #16]
 8003e84:	5d1b      	ldrb	r3, [r3, r4]
 8003e86:	2a00      	cmp	r2, #0
 8003e88:	d037      	beq.n	8003efa <_strtod_l+0x242>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	9c04      	ldr	r4, [sp, #16]
 8003e8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003e92:	2909      	cmp	r1, #9
 8003e94:	d913      	bls.n	8003ebe <_strtod_l+0x206>
 8003e96:	2101      	movs	r1, #1
 8003e98:	9105      	str	r1, [sp, #20]
 8003e9a:	e7c2      	b.n	8003e22 <_strtod_l+0x16a>
 8003e9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e9e:	3001      	adds	r0, #1
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	921b      	str	r2, [sp, #108]	; 0x6c
 8003ea4:	785b      	ldrb	r3, [r3, #1]
 8003ea6:	2b30      	cmp	r3, #48	; 0x30
 8003ea8:	d0f8      	beq.n	8003e9c <_strtod_l+0x1e4>
 8003eaa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003eae:	2a08      	cmp	r2, #8
 8003eb0:	f200 84f0 	bhi.w	8004894 <_strtod_l+0xbdc>
 8003eb4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003eb6:	9208      	str	r2, [sp, #32]
 8003eb8:	4602      	mov	r2, r0
 8003eba:	2000      	movs	r0, #0
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8003ec2:	f100 0101 	add.w	r1, r0, #1
 8003ec6:	d012      	beq.n	8003eee <_strtod_l+0x236>
 8003ec8:	440a      	add	r2, r1
 8003eca:	270a      	movs	r7, #10
 8003ecc:	4621      	mov	r1, r4
 8003ece:	eb00 0c04 	add.w	ip, r0, r4
 8003ed2:	458c      	cmp	ip, r1
 8003ed4:	d113      	bne.n	8003efe <_strtod_l+0x246>
 8003ed6:	1821      	adds	r1, r4, r0
 8003ed8:	2908      	cmp	r1, #8
 8003eda:	f104 0401 	add.w	r4, r4, #1
 8003ede:	4404      	add	r4, r0
 8003ee0:	dc19      	bgt.n	8003f16 <_strtod_l+0x25e>
 8003ee2:	210a      	movs	r1, #10
 8003ee4:	9b06      	ldr	r3, [sp, #24]
 8003ee6:	fb01 e303 	mla	r3, r1, r3, lr
 8003eea:	9306      	str	r3, [sp, #24]
 8003eec:	2100      	movs	r1, #0
 8003eee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ef0:	1c58      	adds	r0, r3, #1
 8003ef2:	901b      	str	r0, [sp, #108]	; 0x6c
 8003ef4:	785b      	ldrb	r3, [r3, #1]
 8003ef6:	4608      	mov	r0, r1
 8003ef8:	e7c9      	b.n	8003e8e <_strtod_l+0x1d6>
 8003efa:	9804      	ldr	r0, [sp, #16]
 8003efc:	e7d3      	b.n	8003ea6 <_strtod_l+0x1ee>
 8003efe:	2908      	cmp	r1, #8
 8003f00:	f101 0101 	add.w	r1, r1, #1
 8003f04:	dc03      	bgt.n	8003f0e <_strtod_l+0x256>
 8003f06:	9b06      	ldr	r3, [sp, #24]
 8003f08:	437b      	muls	r3, r7
 8003f0a:	9306      	str	r3, [sp, #24]
 8003f0c:	e7e1      	b.n	8003ed2 <_strtod_l+0x21a>
 8003f0e:	2910      	cmp	r1, #16
 8003f10:	bfd8      	it	le
 8003f12:	437d      	mulle	r5, r7
 8003f14:	e7dd      	b.n	8003ed2 <_strtod_l+0x21a>
 8003f16:	2c10      	cmp	r4, #16
 8003f18:	bfdc      	itt	le
 8003f1a:	210a      	movle	r1, #10
 8003f1c:	fb01 e505 	mlale	r5, r1, r5, lr
 8003f20:	e7e4      	b.n	8003eec <_strtod_l+0x234>
 8003f22:	2301      	movs	r3, #1
 8003f24:	9305      	str	r3, [sp, #20]
 8003f26:	e781      	b.n	8003e2c <_strtod_l+0x174>
 8003f28:	f04f 0c01 	mov.w	ip, #1
 8003f2c:	1cb3      	adds	r3, r6, #2
 8003f2e:	931b      	str	r3, [sp, #108]	; 0x6c
 8003f30:	78b3      	ldrb	r3, [r6, #2]
 8003f32:	e78a      	b.n	8003e4a <_strtod_l+0x192>
 8003f34:	f04f 0c00 	mov.w	ip, #0
 8003f38:	e7f8      	b.n	8003f2c <_strtod_l+0x274>
 8003f3a:	bf00      	nop
 8003f3c:	08006ae8 	.word	0x08006ae8
 8003f40:	7ff00000 	.word	0x7ff00000
 8003f44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003f46:	1c5f      	adds	r7, r3, #1
 8003f48:	971b      	str	r7, [sp, #108]	; 0x6c
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	2b30      	cmp	r3, #48	; 0x30
 8003f4e:	d0f9      	beq.n	8003f44 <_strtod_l+0x28c>
 8003f50:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8003f54:	2f08      	cmp	r7, #8
 8003f56:	f63f af7d 	bhi.w	8003e54 <_strtod_l+0x19c>
 8003f5a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8003f5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003f60:	9309      	str	r3, [sp, #36]	; 0x24
 8003f62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003f64:	1c5f      	adds	r7, r3, #1
 8003f66:	971b      	str	r7, [sp, #108]	; 0x6c
 8003f68:	785b      	ldrb	r3, [r3, #1]
 8003f6a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8003f6e:	f1b8 0f09 	cmp.w	r8, #9
 8003f72:	d937      	bls.n	8003fe4 <_strtod_l+0x32c>
 8003f74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003f76:	1a7f      	subs	r7, r7, r1
 8003f78:	2f08      	cmp	r7, #8
 8003f7a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8003f7e:	dc37      	bgt.n	8003ff0 <_strtod_l+0x338>
 8003f80:	45be      	cmp	lr, r7
 8003f82:	bfa8      	it	ge
 8003f84:	46be      	movge	lr, r7
 8003f86:	f1bc 0f00 	cmp.w	ip, #0
 8003f8a:	d001      	beq.n	8003f90 <_strtod_l+0x2d8>
 8003f8c:	f1ce 0e00 	rsb	lr, lr, #0
 8003f90:	2c00      	cmp	r4, #0
 8003f92:	d151      	bne.n	8004038 <_strtod_l+0x380>
 8003f94:	2800      	cmp	r0, #0
 8003f96:	f47f aece 	bne.w	8003d36 <_strtod_l+0x7e>
 8003f9a:	9a07      	ldr	r2, [sp, #28]
 8003f9c:	2a00      	cmp	r2, #0
 8003f9e:	f47f aeca 	bne.w	8003d36 <_strtod_l+0x7e>
 8003fa2:	9a05      	ldr	r2, [sp, #20]
 8003fa4:	2a00      	cmp	r2, #0
 8003fa6:	f47f aee4 	bne.w	8003d72 <_strtod_l+0xba>
 8003faa:	2b4e      	cmp	r3, #78	; 0x4e
 8003fac:	d027      	beq.n	8003ffe <_strtod_l+0x346>
 8003fae:	dc21      	bgt.n	8003ff4 <_strtod_l+0x33c>
 8003fb0:	2b49      	cmp	r3, #73	; 0x49
 8003fb2:	f47f aede 	bne.w	8003d72 <_strtod_l+0xba>
 8003fb6:	49a4      	ldr	r1, [pc, #656]	; (8004248 <_strtod_l+0x590>)
 8003fb8:	a81b      	add	r0, sp, #108	; 0x6c
 8003fba:	f001 fde1 	bl	8005b80 <__match>
 8003fbe:	2800      	cmp	r0, #0
 8003fc0:	f43f aed7 	beq.w	8003d72 <_strtod_l+0xba>
 8003fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003fc6:	49a1      	ldr	r1, [pc, #644]	; (800424c <_strtod_l+0x594>)
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	a81b      	add	r0, sp, #108	; 0x6c
 8003fcc:	931b      	str	r3, [sp, #108]	; 0x6c
 8003fce:	f001 fdd7 	bl	8005b80 <__match>
 8003fd2:	b910      	cbnz	r0, 8003fda <_strtod_l+0x322>
 8003fd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	931b      	str	r3, [sp, #108]	; 0x6c
 8003fda:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004260 <_strtod_l+0x5a8>
 8003fde:	f04f 0900 	mov.w	r9, #0
 8003fe2:	e6a8      	b.n	8003d36 <_strtod_l+0x7e>
 8003fe4:	210a      	movs	r1, #10
 8003fe6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8003fea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003fee:	e7b8      	b.n	8003f62 <_strtod_l+0x2aa>
 8003ff0:	46be      	mov	lr, r7
 8003ff2:	e7c8      	b.n	8003f86 <_strtod_l+0x2ce>
 8003ff4:	2b69      	cmp	r3, #105	; 0x69
 8003ff6:	d0de      	beq.n	8003fb6 <_strtod_l+0x2fe>
 8003ff8:	2b6e      	cmp	r3, #110	; 0x6e
 8003ffa:	f47f aeba 	bne.w	8003d72 <_strtod_l+0xba>
 8003ffe:	4994      	ldr	r1, [pc, #592]	; (8004250 <_strtod_l+0x598>)
 8004000:	a81b      	add	r0, sp, #108	; 0x6c
 8004002:	f001 fdbd 	bl	8005b80 <__match>
 8004006:	2800      	cmp	r0, #0
 8004008:	f43f aeb3 	beq.w	8003d72 <_strtod_l+0xba>
 800400c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b28      	cmp	r3, #40	; 0x28
 8004012:	d10e      	bne.n	8004032 <_strtod_l+0x37a>
 8004014:	aa1e      	add	r2, sp, #120	; 0x78
 8004016:	498f      	ldr	r1, [pc, #572]	; (8004254 <_strtod_l+0x59c>)
 8004018:	a81b      	add	r0, sp, #108	; 0x6c
 800401a:	f001 fdc5 	bl	8005ba8 <__hexnan>
 800401e:	2805      	cmp	r0, #5
 8004020:	d107      	bne.n	8004032 <_strtod_l+0x37a>
 8004022:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004024:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8004028:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800402c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8004030:	e681      	b.n	8003d36 <_strtod_l+0x7e>
 8004032:	f8df a234 	ldr.w	sl, [pc, #564]	; 8004268 <_strtod_l+0x5b0>
 8004036:	e7d2      	b.n	8003fde <_strtod_l+0x326>
 8004038:	ebae 0302 	sub.w	r3, lr, r2
 800403c:	9307      	str	r3, [sp, #28]
 800403e:	9b04      	ldr	r3, [sp, #16]
 8004040:	9806      	ldr	r0, [sp, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	bf08      	it	eq
 8004046:	4623      	moveq	r3, r4
 8004048:	2c10      	cmp	r4, #16
 800404a:	9304      	str	r3, [sp, #16]
 800404c:	46a0      	mov	r8, r4
 800404e:	bfa8      	it	ge
 8004050:	f04f 0810 	movge.w	r8, #16
 8004054:	f7fc f9c6 	bl	80003e4 <__aeabi_ui2d>
 8004058:	2c09      	cmp	r4, #9
 800405a:	4681      	mov	r9, r0
 800405c:	468a      	mov	sl, r1
 800405e:	dc13      	bgt.n	8004088 <_strtod_l+0x3d0>
 8004060:	9b07      	ldr	r3, [sp, #28]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f43f ae67 	beq.w	8003d36 <_strtod_l+0x7e>
 8004068:	9b07      	ldr	r3, [sp, #28]
 800406a:	dd7e      	ble.n	800416a <_strtod_l+0x4b2>
 800406c:	2b16      	cmp	r3, #22
 800406e:	dc65      	bgt.n	800413c <_strtod_l+0x484>
 8004070:	4a79      	ldr	r2, [pc, #484]	; (8004258 <_strtod_l+0x5a0>)
 8004072:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004076:	464a      	mov	r2, r9
 8004078:	e9de 0100 	ldrd	r0, r1, [lr]
 800407c:	4653      	mov	r3, sl
 800407e:	f7fc fa2b 	bl	80004d8 <__aeabi_dmul>
 8004082:	4681      	mov	r9, r0
 8004084:	468a      	mov	sl, r1
 8004086:	e656      	b.n	8003d36 <_strtod_l+0x7e>
 8004088:	4b73      	ldr	r3, [pc, #460]	; (8004258 <_strtod_l+0x5a0>)
 800408a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800408e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004092:	f7fc fa21 	bl	80004d8 <__aeabi_dmul>
 8004096:	4606      	mov	r6, r0
 8004098:	4628      	mov	r0, r5
 800409a:	460f      	mov	r7, r1
 800409c:	f7fc f9a2 	bl	80003e4 <__aeabi_ui2d>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4630      	mov	r0, r6
 80040a6:	4639      	mov	r1, r7
 80040a8:	f7fc f860 	bl	800016c <__adddf3>
 80040ac:	2c0f      	cmp	r4, #15
 80040ae:	4681      	mov	r9, r0
 80040b0:	468a      	mov	sl, r1
 80040b2:	ddd5      	ble.n	8004060 <_strtod_l+0x3a8>
 80040b4:	9b07      	ldr	r3, [sp, #28]
 80040b6:	eba4 0808 	sub.w	r8, r4, r8
 80040ba:	4498      	add	r8, r3
 80040bc:	f1b8 0f00 	cmp.w	r8, #0
 80040c0:	f340 809a 	ble.w	80041f8 <_strtod_l+0x540>
 80040c4:	f018 030f 	ands.w	r3, r8, #15
 80040c8:	d00a      	beq.n	80040e0 <_strtod_l+0x428>
 80040ca:	4963      	ldr	r1, [pc, #396]	; (8004258 <_strtod_l+0x5a0>)
 80040cc:	464a      	mov	r2, r9
 80040ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80040d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040d6:	4653      	mov	r3, sl
 80040d8:	f7fc f9fe 	bl	80004d8 <__aeabi_dmul>
 80040dc:	4681      	mov	r9, r0
 80040de:	468a      	mov	sl, r1
 80040e0:	f038 080f 	bics.w	r8, r8, #15
 80040e4:	d077      	beq.n	80041d6 <_strtod_l+0x51e>
 80040e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80040ea:	dd4b      	ble.n	8004184 <_strtod_l+0x4cc>
 80040ec:	f04f 0800 	mov.w	r8, #0
 80040f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80040f4:	f8cd 8020 	str.w	r8, [sp, #32]
 80040f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80040fc:	2322      	movs	r3, #34	; 0x22
 80040fe:	f04f 0900 	mov.w	r9, #0
 8004102:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8004260 <_strtod_l+0x5a8>
 8004106:	f8cb 3000 	str.w	r3, [fp]
 800410a:	9b08      	ldr	r3, [sp, #32]
 800410c:	2b00      	cmp	r3, #0
 800410e:	f43f ae12 	beq.w	8003d36 <_strtod_l+0x7e>
 8004112:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004114:	4658      	mov	r0, fp
 8004116:	f001 fe52 	bl	8005dbe <_Bfree>
 800411a:	9906      	ldr	r1, [sp, #24]
 800411c:	4658      	mov	r0, fp
 800411e:	f001 fe4e 	bl	8005dbe <_Bfree>
 8004122:	9904      	ldr	r1, [sp, #16]
 8004124:	4658      	mov	r0, fp
 8004126:	f001 fe4a 	bl	8005dbe <_Bfree>
 800412a:	9908      	ldr	r1, [sp, #32]
 800412c:	4658      	mov	r0, fp
 800412e:	f001 fe46 	bl	8005dbe <_Bfree>
 8004132:	4641      	mov	r1, r8
 8004134:	4658      	mov	r0, fp
 8004136:	f001 fe42 	bl	8005dbe <_Bfree>
 800413a:	e5fc      	b.n	8003d36 <_strtod_l+0x7e>
 800413c:	9a07      	ldr	r2, [sp, #28]
 800413e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004142:	4293      	cmp	r3, r2
 8004144:	dbb6      	blt.n	80040b4 <_strtod_l+0x3fc>
 8004146:	4d44      	ldr	r5, [pc, #272]	; (8004258 <_strtod_l+0x5a0>)
 8004148:	f1c4 040f 	rsb	r4, r4, #15
 800414c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004150:	464a      	mov	r2, r9
 8004152:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004156:	4653      	mov	r3, sl
 8004158:	f7fc f9be 	bl	80004d8 <__aeabi_dmul>
 800415c:	9b07      	ldr	r3, [sp, #28]
 800415e:	1b1c      	subs	r4, r3, r4
 8004160:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004164:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004168:	e789      	b.n	800407e <_strtod_l+0x3c6>
 800416a:	f113 0f16 	cmn.w	r3, #22
 800416e:	dba1      	blt.n	80040b4 <_strtod_l+0x3fc>
 8004170:	4a39      	ldr	r2, [pc, #228]	; (8004258 <_strtod_l+0x5a0>)
 8004172:	4648      	mov	r0, r9
 8004174:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004178:	e9d2 2300 	ldrd	r2, r3, [r2]
 800417c:	4651      	mov	r1, sl
 800417e:	f7fc fad5 	bl	800072c <__aeabi_ddiv>
 8004182:	e77e      	b.n	8004082 <_strtod_l+0x3ca>
 8004184:	2300      	movs	r3, #0
 8004186:	4648      	mov	r0, r9
 8004188:	4651      	mov	r1, sl
 800418a:	461d      	mov	r5, r3
 800418c:	4e33      	ldr	r6, [pc, #204]	; (800425c <_strtod_l+0x5a4>)
 800418e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004192:	f1b8 0f01 	cmp.w	r8, #1
 8004196:	dc21      	bgt.n	80041dc <_strtod_l+0x524>
 8004198:	b10b      	cbz	r3, 800419e <_strtod_l+0x4e6>
 800419a:	4681      	mov	r9, r0
 800419c:	468a      	mov	sl, r1
 800419e:	4b2f      	ldr	r3, [pc, #188]	; (800425c <_strtod_l+0x5a4>)
 80041a0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80041a4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80041a8:	464a      	mov	r2, r9
 80041aa:	e9d5 0100 	ldrd	r0, r1, [r5]
 80041ae:	4653      	mov	r3, sl
 80041b0:	f7fc f992 	bl	80004d8 <__aeabi_dmul>
 80041b4:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <_strtod_l+0x5a8>)
 80041b6:	460a      	mov	r2, r1
 80041b8:	400b      	ands	r3, r1
 80041ba:	492a      	ldr	r1, [pc, #168]	; (8004264 <_strtod_l+0x5ac>)
 80041bc:	4681      	mov	r9, r0
 80041be:	428b      	cmp	r3, r1
 80041c0:	d894      	bhi.n	80040ec <_strtod_l+0x434>
 80041c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80041c6:	428b      	cmp	r3, r1
 80041c8:	bf86      	itte	hi
 80041ca:	f04f 39ff 	movhi.w	r9, #4294967295
 80041ce:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800426c <_strtod_l+0x5b4>
 80041d2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80041d6:	2300      	movs	r3, #0
 80041d8:	9305      	str	r3, [sp, #20]
 80041da:	e07b      	b.n	80042d4 <_strtod_l+0x61c>
 80041dc:	f018 0f01 	tst.w	r8, #1
 80041e0:	d006      	beq.n	80041f0 <_strtod_l+0x538>
 80041e2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80041e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ea:	f7fc f975 	bl	80004d8 <__aeabi_dmul>
 80041ee:	2301      	movs	r3, #1
 80041f0:	3501      	adds	r5, #1
 80041f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80041f6:	e7cc      	b.n	8004192 <_strtod_l+0x4da>
 80041f8:	d0ed      	beq.n	80041d6 <_strtod_l+0x51e>
 80041fa:	f1c8 0800 	rsb	r8, r8, #0
 80041fe:	f018 020f 	ands.w	r2, r8, #15
 8004202:	d00a      	beq.n	800421a <_strtod_l+0x562>
 8004204:	4b14      	ldr	r3, [pc, #80]	; (8004258 <_strtod_l+0x5a0>)
 8004206:	4648      	mov	r0, r9
 8004208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800420c:	4651      	mov	r1, sl
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	f7fc fa8b 	bl	800072c <__aeabi_ddiv>
 8004216:	4681      	mov	r9, r0
 8004218:	468a      	mov	sl, r1
 800421a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800421e:	d0da      	beq.n	80041d6 <_strtod_l+0x51e>
 8004220:	f1b8 0f1f 	cmp.w	r8, #31
 8004224:	dd24      	ble.n	8004270 <_strtod_l+0x5b8>
 8004226:	f04f 0800 	mov.w	r8, #0
 800422a:	f8cd 8010 	str.w	r8, [sp, #16]
 800422e:	f8cd 8020 	str.w	r8, [sp, #32]
 8004232:	f8cd 8018 	str.w	r8, [sp, #24]
 8004236:	2322      	movs	r3, #34	; 0x22
 8004238:	f04f 0900 	mov.w	r9, #0
 800423c:	f04f 0a00 	mov.w	sl, #0
 8004240:	f8cb 3000 	str.w	r3, [fp]
 8004244:	e761      	b.n	800410a <_strtod_l+0x452>
 8004246:	bf00      	nop
 8004248:	08006ab3 	.word	0x08006ab3
 800424c:	08006b3b 	.word	0x08006b3b
 8004250:	08006abb 	.word	0x08006abb
 8004254:	08006afc 	.word	0x08006afc
 8004258:	08006b78 	.word	0x08006b78
 800425c:	08006b50 	.word	0x08006b50
 8004260:	7ff00000 	.word	0x7ff00000
 8004264:	7ca00000 	.word	0x7ca00000
 8004268:	fff80000 	.word	0xfff80000
 800426c:	7fefffff 	.word	0x7fefffff
 8004270:	f018 0310 	ands.w	r3, r8, #16
 8004274:	bf18      	it	ne
 8004276:	236a      	movne	r3, #106	; 0x6a
 8004278:	4648      	mov	r0, r9
 800427a:	9305      	str	r3, [sp, #20]
 800427c:	4651      	mov	r1, sl
 800427e:	2300      	movs	r3, #0
 8004280:	4da1      	ldr	r5, [pc, #644]	; (8004508 <_strtod_l+0x850>)
 8004282:	f1b8 0f00 	cmp.w	r8, #0
 8004286:	f300 8113 	bgt.w	80044b0 <_strtod_l+0x7f8>
 800428a:	b10b      	cbz	r3, 8004290 <_strtod_l+0x5d8>
 800428c:	4681      	mov	r9, r0
 800428e:	468a      	mov	sl, r1
 8004290:	9b05      	ldr	r3, [sp, #20]
 8004292:	b1bb      	cbz	r3, 80042c4 <_strtod_l+0x60c>
 8004294:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8004298:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800429c:	2b00      	cmp	r3, #0
 800429e:	4651      	mov	r1, sl
 80042a0:	dd10      	ble.n	80042c4 <_strtod_l+0x60c>
 80042a2:	2b1f      	cmp	r3, #31
 80042a4:	f340 8110 	ble.w	80044c8 <_strtod_l+0x810>
 80042a8:	2b34      	cmp	r3, #52	; 0x34
 80042aa:	bfd8      	it	le
 80042ac:	f04f 32ff 	movle.w	r2, #4294967295
 80042b0:	f04f 0900 	mov.w	r9, #0
 80042b4:	bfcf      	iteee	gt
 80042b6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80042ba:	3b20      	suble	r3, #32
 80042bc:	fa02 f303 	lslle.w	r3, r2, r3
 80042c0:	ea03 0a01 	andle.w	sl, r3, r1
 80042c4:	2200      	movs	r2, #0
 80042c6:	2300      	movs	r3, #0
 80042c8:	4648      	mov	r0, r9
 80042ca:	4651      	mov	r1, sl
 80042cc:	f7fc fb6c 	bl	80009a8 <__aeabi_dcmpeq>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d1a8      	bne.n	8004226 <_strtod_l+0x56e>
 80042d4:	9b06      	ldr	r3, [sp, #24]
 80042d6:	9a04      	ldr	r2, [sp, #16]
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	9908      	ldr	r1, [sp, #32]
 80042dc:	4623      	mov	r3, r4
 80042de:	4658      	mov	r0, fp
 80042e0:	f001 fdbf 	bl	8005e62 <__s2b>
 80042e4:	9008      	str	r0, [sp, #32]
 80042e6:	2800      	cmp	r0, #0
 80042e8:	f43f af00 	beq.w	80040ec <_strtod_l+0x434>
 80042ec:	9a07      	ldr	r2, [sp, #28]
 80042ee:	9b07      	ldr	r3, [sp, #28]
 80042f0:	2a00      	cmp	r2, #0
 80042f2:	f1c3 0300 	rsb	r3, r3, #0
 80042f6:	bfa8      	it	ge
 80042f8:	2300      	movge	r3, #0
 80042fa:	f04f 0800 	mov.w	r8, #0
 80042fe:	930e      	str	r3, [sp, #56]	; 0x38
 8004300:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004304:	9316      	str	r3, [sp, #88]	; 0x58
 8004306:	f8cd 8010 	str.w	r8, [sp, #16]
 800430a:	9b08      	ldr	r3, [sp, #32]
 800430c:	4658      	mov	r0, fp
 800430e:	6859      	ldr	r1, [r3, #4]
 8004310:	f001 fd21 	bl	8005d56 <_Balloc>
 8004314:	9006      	str	r0, [sp, #24]
 8004316:	2800      	cmp	r0, #0
 8004318:	f43f aef0 	beq.w	80040fc <_strtod_l+0x444>
 800431c:	9b08      	ldr	r3, [sp, #32]
 800431e:	300c      	adds	r0, #12
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	f103 010c 	add.w	r1, r3, #12
 8004326:	3202      	adds	r2, #2
 8004328:	0092      	lsls	r2, r2, #2
 800432a:	f001 fd09 	bl	8005d40 <memcpy>
 800432e:	ab1e      	add	r3, sp, #120	; 0x78
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	ab1d      	add	r3, sp, #116	; 0x74
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	464a      	mov	r2, r9
 8004338:	4653      	mov	r3, sl
 800433a:	4658      	mov	r0, fp
 800433c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8004340:	f002 f84a 	bl	80063d8 <__d2b>
 8004344:	901c      	str	r0, [sp, #112]	; 0x70
 8004346:	2800      	cmp	r0, #0
 8004348:	f43f aed8 	beq.w	80040fc <_strtod_l+0x444>
 800434c:	2101      	movs	r1, #1
 800434e:	4658      	mov	r0, fp
 8004350:	f001 fe13 	bl	8005f7a <__i2b>
 8004354:	9004      	str	r0, [sp, #16]
 8004356:	4603      	mov	r3, r0
 8004358:	2800      	cmp	r0, #0
 800435a:	f43f aecf 	beq.w	80040fc <_strtod_l+0x444>
 800435e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004360:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004362:	2d00      	cmp	r5, #0
 8004364:	bfab      	itete	ge
 8004366:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004368:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800436a:	18ee      	addge	r6, r5, r3
 800436c:	1b5c      	sublt	r4, r3, r5
 800436e:	9b05      	ldr	r3, [sp, #20]
 8004370:	bfa8      	it	ge
 8004372:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004374:	eba5 0503 	sub.w	r5, r5, r3
 8004378:	4415      	add	r5, r2
 800437a:	4b64      	ldr	r3, [pc, #400]	; (800450c <_strtod_l+0x854>)
 800437c:	f105 35ff 	add.w	r5, r5, #4294967295
 8004380:	bfb8      	it	lt
 8004382:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004384:	429d      	cmp	r5, r3
 8004386:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800438a:	f280 80af 	bge.w	80044ec <_strtod_l+0x834>
 800438e:	1b5b      	subs	r3, r3, r5
 8004390:	2b1f      	cmp	r3, #31
 8004392:	eba2 0203 	sub.w	r2, r2, r3
 8004396:	f04f 0701 	mov.w	r7, #1
 800439a:	f300 809c 	bgt.w	80044d6 <_strtod_l+0x81e>
 800439e:	2500      	movs	r5, #0
 80043a0:	fa07 f303 	lsl.w	r3, r7, r3
 80043a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80043a6:	18b7      	adds	r7, r6, r2
 80043a8:	9b05      	ldr	r3, [sp, #20]
 80043aa:	42be      	cmp	r6, r7
 80043ac:	4414      	add	r4, r2
 80043ae:	441c      	add	r4, r3
 80043b0:	4633      	mov	r3, r6
 80043b2:	bfa8      	it	ge
 80043b4:	463b      	movge	r3, r7
 80043b6:	42a3      	cmp	r3, r4
 80043b8:	bfa8      	it	ge
 80043ba:	4623      	movge	r3, r4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bfc2      	ittt	gt
 80043c0:	1aff      	subgt	r7, r7, r3
 80043c2:	1ae4      	subgt	r4, r4, r3
 80043c4:	1af6      	subgt	r6, r6, r3
 80043c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043c8:	b1bb      	cbz	r3, 80043fa <_strtod_l+0x742>
 80043ca:	461a      	mov	r2, r3
 80043cc:	9904      	ldr	r1, [sp, #16]
 80043ce:	4658      	mov	r0, fp
 80043d0:	f001 fe72 	bl	80060b8 <__pow5mult>
 80043d4:	9004      	str	r0, [sp, #16]
 80043d6:	2800      	cmp	r0, #0
 80043d8:	f43f ae90 	beq.w	80040fc <_strtod_l+0x444>
 80043dc:	4601      	mov	r1, r0
 80043de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80043e0:	4658      	mov	r0, fp
 80043e2:	f001 fdd3 	bl	8005f8c <__multiply>
 80043e6:	9009      	str	r0, [sp, #36]	; 0x24
 80043e8:	2800      	cmp	r0, #0
 80043ea:	f43f ae87 	beq.w	80040fc <_strtod_l+0x444>
 80043ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 80043f0:	4658      	mov	r0, fp
 80043f2:	f001 fce4 	bl	8005dbe <_Bfree>
 80043f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043f8:	931c      	str	r3, [sp, #112]	; 0x70
 80043fa:	2f00      	cmp	r7, #0
 80043fc:	dc7a      	bgt.n	80044f4 <_strtod_l+0x83c>
 80043fe:	9b07      	ldr	r3, [sp, #28]
 8004400:	2b00      	cmp	r3, #0
 8004402:	dd08      	ble.n	8004416 <_strtod_l+0x75e>
 8004404:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004406:	9906      	ldr	r1, [sp, #24]
 8004408:	4658      	mov	r0, fp
 800440a:	f001 fe55 	bl	80060b8 <__pow5mult>
 800440e:	9006      	str	r0, [sp, #24]
 8004410:	2800      	cmp	r0, #0
 8004412:	f43f ae73 	beq.w	80040fc <_strtod_l+0x444>
 8004416:	2c00      	cmp	r4, #0
 8004418:	dd08      	ble.n	800442c <_strtod_l+0x774>
 800441a:	4622      	mov	r2, r4
 800441c:	9906      	ldr	r1, [sp, #24]
 800441e:	4658      	mov	r0, fp
 8004420:	f001 fe98 	bl	8006154 <__lshift>
 8004424:	9006      	str	r0, [sp, #24]
 8004426:	2800      	cmp	r0, #0
 8004428:	f43f ae68 	beq.w	80040fc <_strtod_l+0x444>
 800442c:	2e00      	cmp	r6, #0
 800442e:	dd08      	ble.n	8004442 <_strtod_l+0x78a>
 8004430:	4632      	mov	r2, r6
 8004432:	9904      	ldr	r1, [sp, #16]
 8004434:	4658      	mov	r0, fp
 8004436:	f001 fe8d 	bl	8006154 <__lshift>
 800443a:	9004      	str	r0, [sp, #16]
 800443c:	2800      	cmp	r0, #0
 800443e:	f43f ae5d 	beq.w	80040fc <_strtod_l+0x444>
 8004442:	9a06      	ldr	r2, [sp, #24]
 8004444:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004446:	4658      	mov	r0, fp
 8004448:	f001 fef2 	bl	8006230 <__mdiff>
 800444c:	4680      	mov	r8, r0
 800444e:	2800      	cmp	r0, #0
 8004450:	f43f ae54 	beq.w	80040fc <_strtod_l+0x444>
 8004454:	2400      	movs	r4, #0
 8004456:	68c3      	ldr	r3, [r0, #12]
 8004458:	9904      	ldr	r1, [sp, #16]
 800445a:	60c4      	str	r4, [r0, #12]
 800445c:	930c      	str	r3, [sp, #48]	; 0x30
 800445e:	f001 fecd 	bl	80061fc <__mcmp>
 8004462:	42a0      	cmp	r0, r4
 8004464:	da54      	bge.n	8004510 <_strtod_l+0x858>
 8004466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004468:	b9f3      	cbnz	r3, 80044a8 <_strtod_l+0x7f0>
 800446a:	f1b9 0f00 	cmp.w	r9, #0
 800446e:	d11b      	bne.n	80044a8 <_strtod_l+0x7f0>
 8004470:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004474:	b9c3      	cbnz	r3, 80044a8 <_strtod_l+0x7f0>
 8004476:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800447a:	0d1b      	lsrs	r3, r3, #20
 800447c:	051b      	lsls	r3, r3, #20
 800447e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004482:	d911      	bls.n	80044a8 <_strtod_l+0x7f0>
 8004484:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004488:	b91b      	cbnz	r3, 8004492 <_strtod_l+0x7da>
 800448a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800448e:	2b01      	cmp	r3, #1
 8004490:	dd0a      	ble.n	80044a8 <_strtod_l+0x7f0>
 8004492:	4641      	mov	r1, r8
 8004494:	2201      	movs	r2, #1
 8004496:	4658      	mov	r0, fp
 8004498:	f001 fe5c 	bl	8006154 <__lshift>
 800449c:	9904      	ldr	r1, [sp, #16]
 800449e:	4680      	mov	r8, r0
 80044a0:	f001 feac 	bl	80061fc <__mcmp>
 80044a4:	2800      	cmp	r0, #0
 80044a6:	dc68      	bgt.n	800457a <_strtod_l+0x8c2>
 80044a8:	9b05      	ldr	r3, [sp, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d172      	bne.n	8004594 <_strtod_l+0x8dc>
 80044ae:	e630      	b.n	8004112 <_strtod_l+0x45a>
 80044b0:	f018 0f01 	tst.w	r8, #1
 80044b4:	d004      	beq.n	80044c0 <_strtod_l+0x808>
 80044b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80044ba:	f7fc f80d 	bl	80004d8 <__aeabi_dmul>
 80044be:	2301      	movs	r3, #1
 80044c0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80044c4:	3508      	adds	r5, #8
 80044c6:	e6dc      	b.n	8004282 <_strtod_l+0x5ca>
 80044c8:	f04f 32ff 	mov.w	r2, #4294967295
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	ea03 0909 	and.w	r9, r3, r9
 80044d4:	e6f6      	b.n	80042c4 <_strtod_l+0x60c>
 80044d6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80044da:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80044de:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80044e2:	35e2      	adds	r5, #226	; 0xe2
 80044e4:	fa07 f505 	lsl.w	r5, r7, r5
 80044e8:	970f      	str	r7, [sp, #60]	; 0x3c
 80044ea:	e75c      	b.n	80043a6 <_strtod_l+0x6ee>
 80044ec:	2301      	movs	r3, #1
 80044ee:	2500      	movs	r5, #0
 80044f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80044f2:	e758      	b.n	80043a6 <_strtod_l+0x6ee>
 80044f4:	463a      	mov	r2, r7
 80044f6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80044f8:	4658      	mov	r0, fp
 80044fa:	f001 fe2b 	bl	8006154 <__lshift>
 80044fe:	901c      	str	r0, [sp, #112]	; 0x70
 8004500:	2800      	cmp	r0, #0
 8004502:	f47f af7c 	bne.w	80043fe <_strtod_l+0x746>
 8004506:	e5f9      	b.n	80040fc <_strtod_l+0x444>
 8004508:	08006b10 	.word	0x08006b10
 800450c:	fffffc02 	.word	0xfffffc02
 8004510:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004514:	f040 8089 	bne.w	800462a <_strtod_l+0x972>
 8004518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800451a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800451e:	b342      	cbz	r2, 8004572 <_strtod_l+0x8ba>
 8004520:	4aaf      	ldr	r2, [pc, #700]	; (80047e0 <_strtod_l+0xb28>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d156      	bne.n	80045d4 <_strtod_l+0x91c>
 8004526:	9b05      	ldr	r3, [sp, #20]
 8004528:	4648      	mov	r0, r9
 800452a:	b1eb      	cbz	r3, 8004568 <_strtod_l+0x8b0>
 800452c:	4653      	mov	r3, sl
 800452e:	4aad      	ldr	r2, [pc, #692]	; (80047e4 <_strtod_l+0xb2c>)
 8004530:	f04f 31ff 	mov.w	r1, #4294967295
 8004534:	401a      	ands	r2, r3
 8004536:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800453a:	d818      	bhi.n	800456e <_strtod_l+0x8b6>
 800453c:	0d12      	lsrs	r2, r2, #20
 800453e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004542:	fa01 f303 	lsl.w	r3, r1, r3
 8004546:	4298      	cmp	r0, r3
 8004548:	d144      	bne.n	80045d4 <_strtod_l+0x91c>
 800454a:	4ba7      	ldr	r3, [pc, #668]	; (80047e8 <_strtod_l+0xb30>)
 800454c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800454e:	429a      	cmp	r2, r3
 8004550:	d102      	bne.n	8004558 <_strtod_l+0x8a0>
 8004552:	3001      	adds	r0, #1
 8004554:	f43f add2 	beq.w	80040fc <_strtod_l+0x444>
 8004558:	4ba2      	ldr	r3, [pc, #648]	; (80047e4 <_strtod_l+0xb2c>)
 800455a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800455c:	f04f 0900 	mov.w	r9, #0
 8004560:	401a      	ands	r2, r3
 8004562:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8004566:	e79f      	b.n	80044a8 <_strtod_l+0x7f0>
 8004568:	f04f 33ff 	mov.w	r3, #4294967295
 800456c:	e7eb      	b.n	8004546 <_strtod_l+0x88e>
 800456e:	460b      	mov	r3, r1
 8004570:	e7e9      	b.n	8004546 <_strtod_l+0x88e>
 8004572:	bb7b      	cbnz	r3, 80045d4 <_strtod_l+0x91c>
 8004574:	f1b9 0f00 	cmp.w	r9, #0
 8004578:	d12c      	bne.n	80045d4 <_strtod_l+0x91c>
 800457a:	9905      	ldr	r1, [sp, #20]
 800457c:	4653      	mov	r3, sl
 800457e:	4a99      	ldr	r2, [pc, #612]	; (80047e4 <_strtod_l+0xb2c>)
 8004580:	b1f1      	cbz	r1, 80045c0 <_strtod_l+0x908>
 8004582:	ea02 010a 	and.w	r1, r2, sl
 8004586:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800458a:	dc19      	bgt.n	80045c0 <_strtod_l+0x908>
 800458c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004590:	f77f ae51 	ble.w	8004236 <_strtod_l+0x57e>
 8004594:	2300      	movs	r3, #0
 8004596:	4a95      	ldr	r2, [pc, #596]	; (80047ec <_strtod_l+0xb34>)
 8004598:	4648      	mov	r0, r9
 800459a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800459e:	4651      	mov	r1, sl
 80045a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80045a4:	f7fb ff98 	bl	80004d8 <__aeabi_dmul>
 80045a8:	4681      	mov	r9, r0
 80045aa:	468a      	mov	sl, r1
 80045ac:	2900      	cmp	r1, #0
 80045ae:	f47f adb0 	bne.w	8004112 <_strtod_l+0x45a>
 80045b2:	2800      	cmp	r0, #0
 80045b4:	f47f adad 	bne.w	8004112 <_strtod_l+0x45a>
 80045b8:	2322      	movs	r3, #34	; 0x22
 80045ba:	f8cb 3000 	str.w	r3, [fp]
 80045be:	e5a8      	b.n	8004112 <_strtod_l+0x45a>
 80045c0:	4013      	ands	r3, r2
 80045c2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80045c6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80045ca:	f04f 39ff 	mov.w	r9, #4294967295
 80045ce:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80045d2:	e769      	b.n	80044a8 <_strtod_l+0x7f0>
 80045d4:	b19d      	cbz	r5, 80045fe <_strtod_l+0x946>
 80045d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d8:	421d      	tst	r5, r3
 80045da:	f43f af65 	beq.w	80044a8 <_strtod_l+0x7f0>
 80045de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045e0:	9a05      	ldr	r2, [sp, #20]
 80045e2:	4648      	mov	r0, r9
 80045e4:	4651      	mov	r1, sl
 80045e6:	b173      	cbz	r3, 8004606 <_strtod_l+0x94e>
 80045e8:	f7ff fb44 	bl	8003c74 <sulp>
 80045ec:	4602      	mov	r2, r0
 80045ee:	460b      	mov	r3, r1
 80045f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80045f4:	f7fb fdba 	bl	800016c <__adddf3>
 80045f8:	4681      	mov	r9, r0
 80045fa:	468a      	mov	sl, r1
 80045fc:	e754      	b.n	80044a8 <_strtod_l+0x7f0>
 80045fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004600:	ea13 0f09 	tst.w	r3, r9
 8004604:	e7e9      	b.n	80045da <_strtod_l+0x922>
 8004606:	f7ff fb35 	bl	8003c74 <sulp>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004612:	f7fb fda9 	bl	8000168 <__aeabi_dsub>
 8004616:	2200      	movs	r2, #0
 8004618:	2300      	movs	r3, #0
 800461a:	4681      	mov	r9, r0
 800461c:	468a      	mov	sl, r1
 800461e:	f7fc f9c3 	bl	80009a8 <__aeabi_dcmpeq>
 8004622:	2800      	cmp	r0, #0
 8004624:	f47f ae07 	bne.w	8004236 <_strtod_l+0x57e>
 8004628:	e73e      	b.n	80044a8 <_strtod_l+0x7f0>
 800462a:	9904      	ldr	r1, [sp, #16]
 800462c:	4640      	mov	r0, r8
 800462e:	f001 ff22 	bl	8006476 <__ratio>
 8004632:	2200      	movs	r2, #0
 8004634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004638:	4606      	mov	r6, r0
 800463a:	460f      	mov	r7, r1
 800463c:	f7fc f9c8 	bl	80009d0 <__aeabi_dcmple>
 8004640:	2800      	cmp	r0, #0
 8004642:	d075      	beq.n	8004730 <_strtod_l+0xa78>
 8004644:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004646:	2b00      	cmp	r3, #0
 8004648:	d047      	beq.n	80046da <_strtod_l+0xa22>
 800464a:	2600      	movs	r6, #0
 800464c:	4f68      	ldr	r7, [pc, #416]	; (80047f0 <_strtod_l+0xb38>)
 800464e:	4d68      	ldr	r5, [pc, #416]	; (80047f0 <_strtod_l+0xb38>)
 8004650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004652:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004656:	0d1b      	lsrs	r3, r3, #20
 8004658:	051b      	lsls	r3, r3, #20
 800465a:	930f      	str	r3, [sp, #60]	; 0x3c
 800465c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800465e:	4b65      	ldr	r3, [pc, #404]	; (80047f4 <_strtod_l+0xb3c>)
 8004660:	429a      	cmp	r2, r3
 8004662:	f040 80cf 	bne.w	8004804 <_strtod_l+0xb4c>
 8004666:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800466a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800466e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004670:	4648      	mov	r0, r9
 8004672:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8004676:	4651      	mov	r1, sl
 8004678:	f001 fe38 	bl	80062ec <__ulp>
 800467c:	4602      	mov	r2, r0
 800467e:	460b      	mov	r3, r1
 8004680:	4630      	mov	r0, r6
 8004682:	4639      	mov	r1, r7
 8004684:	f7fb ff28 	bl	80004d8 <__aeabi_dmul>
 8004688:	464a      	mov	r2, r9
 800468a:	4653      	mov	r3, sl
 800468c:	f7fb fd6e 	bl	800016c <__adddf3>
 8004690:	460b      	mov	r3, r1
 8004692:	4954      	ldr	r1, [pc, #336]	; (80047e4 <_strtod_l+0xb2c>)
 8004694:	4a58      	ldr	r2, [pc, #352]	; (80047f8 <_strtod_l+0xb40>)
 8004696:	4019      	ands	r1, r3
 8004698:	4291      	cmp	r1, r2
 800469a:	4681      	mov	r9, r0
 800469c:	d95e      	bls.n	800475c <_strtod_l+0xaa4>
 800469e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046a0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d103      	bne.n	80046b0 <_strtod_l+0x9f8>
 80046a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046aa:	3301      	adds	r3, #1
 80046ac:	f43f ad26 	beq.w	80040fc <_strtod_l+0x444>
 80046b0:	f04f 39ff 	mov.w	r9, #4294967295
 80046b4:	f8df a130 	ldr.w	sl, [pc, #304]	; 80047e8 <_strtod_l+0xb30>
 80046b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80046ba:	4658      	mov	r0, fp
 80046bc:	f001 fb7f 	bl	8005dbe <_Bfree>
 80046c0:	9906      	ldr	r1, [sp, #24]
 80046c2:	4658      	mov	r0, fp
 80046c4:	f001 fb7b 	bl	8005dbe <_Bfree>
 80046c8:	9904      	ldr	r1, [sp, #16]
 80046ca:	4658      	mov	r0, fp
 80046cc:	f001 fb77 	bl	8005dbe <_Bfree>
 80046d0:	4641      	mov	r1, r8
 80046d2:	4658      	mov	r0, fp
 80046d4:	f001 fb73 	bl	8005dbe <_Bfree>
 80046d8:	e617      	b.n	800430a <_strtod_l+0x652>
 80046da:	f1b9 0f00 	cmp.w	r9, #0
 80046de:	d119      	bne.n	8004714 <_strtod_l+0xa5c>
 80046e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046e6:	b9e3      	cbnz	r3, 8004722 <_strtod_l+0xa6a>
 80046e8:	2200      	movs	r2, #0
 80046ea:	4b41      	ldr	r3, [pc, #260]	; (80047f0 <_strtod_l+0xb38>)
 80046ec:	4630      	mov	r0, r6
 80046ee:	4639      	mov	r1, r7
 80046f0:	f7fc f964 	bl	80009bc <__aeabi_dcmplt>
 80046f4:	b9c8      	cbnz	r0, 800472a <_strtod_l+0xa72>
 80046f6:	2200      	movs	r2, #0
 80046f8:	4b40      	ldr	r3, [pc, #256]	; (80047fc <_strtod_l+0xb44>)
 80046fa:	4630      	mov	r0, r6
 80046fc:	4639      	mov	r1, r7
 80046fe:	f7fb feeb 	bl	80004d8 <__aeabi_dmul>
 8004702:	4604      	mov	r4, r0
 8004704:	460d      	mov	r5, r1
 8004706:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800470a:	9418      	str	r4, [sp, #96]	; 0x60
 800470c:	9319      	str	r3, [sp, #100]	; 0x64
 800470e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004712:	e79d      	b.n	8004650 <_strtod_l+0x998>
 8004714:	f1b9 0f01 	cmp.w	r9, #1
 8004718:	d103      	bne.n	8004722 <_strtod_l+0xa6a>
 800471a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800471c:	2b00      	cmp	r3, #0
 800471e:	f43f ad8a 	beq.w	8004236 <_strtod_l+0x57e>
 8004722:	2600      	movs	r6, #0
 8004724:	4f36      	ldr	r7, [pc, #216]	; (8004800 <_strtod_l+0xb48>)
 8004726:	2400      	movs	r4, #0
 8004728:	e791      	b.n	800464e <_strtod_l+0x996>
 800472a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800472c:	4d33      	ldr	r5, [pc, #204]	; (80047fc <_strtod_l+0xb44>)
 800472e:	e7ea      	b.n	8004706 <_strtod_l+0xa4e>
 8004730:	4b32      	ldr	r3, [pc, #200]	; (80047fc <_strtod_l+0xb44>)
 8004732:	2200      	movs	r2, #0
 8004734:	4630      	mov	r0, r6
 8004736:	4639      	mov	r1, r7
 8004738:	f7fb fece 	bl	80004d8 <__aeabi_dmul>
 800473c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800473e:	4604      	mov	r4, r0
 8004740:	460d      	mov	r5, r1
 8004742:	b933      	cbnz	r3, 8004752 <_strtod_l+0xa9a>
 8004744:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004748:	9010      	str	r0, [sp, #64]	; 0x40
 800474a:	9311      	str	r3, [sp, #68]	; 0x44
 800474c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004750:	e77e      	b.n	8004650 <_strtod_l+0x998>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800475a:	e7f7      	b.n	800474c <_strtod_l+0xa94>
 800475c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8004760:	9b05      	ldr	r3, [sp, #20]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1a8      	bne.n	80046b8 <_strtod_l+0xa00>
 8004766:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800476a:	0d1b      	lsrs	r3, r3, #20
 800476c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800476e:	051b      	lsls	r3, r3, #20
 8004770:	429a      	cmp	r2, r3
 8004772:	4656      	mov	r6, sl
 8004774:	d1a0      	bne.n	80046b8 <_strtod_l+0xa00>
 8004776:	4629      	mov	r1, r5
 8004778:	4620      	mov	r0, r4
 800477a:	f7fc f95d 	bl	8000a38 <__aeabi_d2iz>
 800477e:	f7fb fe41 	bl	8000404 <__aeabi_i2d>
 8004782:	460b      	mov	r3, r1
 8004784:	4602      	mov	r2, r0
 8004786:	4629      	mov	r1, r5
 8004788:	4620      	mov	r0, r4
 800478a:	f7fb fced 	bl	8000168 <__aeabi_dsub>
 800478e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004790:	4604      	mov	r4, r0
 8004792:	460d      	mov	r5, r1
 8004794:	b933      	cbnz	r3, 80047a4 <_strtod_l+0xaec>
 8004796:	f1b9 0f00 	cmp.w	r9, #0
 800479a:	d103      	bne.n	80047a4 <_strtod_l+0xaec>
 800479c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80047a0:	2e00      	cmp	r6, #0
 80047a2:	d06a      	beq.n	800487a <_strtod_l+0xbc2>
 80047a4:	a30a      	add	r3, pc, #40	; (adr r3, 80047d0 <_strtod_l+0xb18>)
 80047a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047aa:	4620      	mov	r0, r4
 80047ac:	4629      	mov	r1, r5
 80047ae:	f7fc f905 	bl	80009bc <__aeabi_dcmplt>
 80047b2:	2800      	cmp	r0, #0
 80047b4:	f47f acad 	bne.w	8004112 <_strtod_l+0x45a>
 80047b8:	a307      	add	r3, pc, #28	; (adr r3, 80047d8 <_strtod_l+0xb20>)
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	4620      	mov	r0, r4
 80047c0:	4629      	mov	r1, r5
 80047c2:	f7fc f919 	bl	80009f8 <__aeabi_dcmpgt>
 80047c6:	2800      	cmp	r0, #0
 80047c8:	f43f af76 	beq.w	80046b8 <_strtod_l+0xa00>
 80047cc:	e4a1      	b.n	8004112 <_strtod_l+0x45a>
 80047ce:	bf00      	nop
 80047d0:	94a03595 	.word	0x94a03595
 80047d4:	3fdfffff 	.word	0x3fdfffff
 80047d8:	35afe535 	.word	0x35afe535
 80047dc:	3fe00000 	.word	0x3fe00000
 80047e0:	000fffff 	.word	0x000fffff
 80047e4:	7ff00000 	.word	0x7ff00000
 80047e8:	7fefffff 	.word	0x7fefffff
 80047ec:	39500000 	.word	0x39500000
 80047f0:	3ff00000 	.word	0x3ff00000
 80047f4:	7fe00000 	.word	0x7fe00000
 80047f8:	7c9fffff 	.word	0x7c9fffff
 80047fc:	3fe00000 	.word	0x3fe00000
 8004800:	bff00000 	.word	0xbff00000
 8004804:	9b05      	ldr	r3, [sp, #20]
 8004806:	b313      	cbz	r3, 800484e <_strtod_l+0xb96>
 8004808:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800480a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800480e:	d81e      	bhi.n	800484e <_strtod_l+0xb96>
 8004810:	a325      	add	r3, pc, #148	; (adr r3, 80048a8 <_strtod_l+0xbf0>)
 8004812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004816:	4620      	mov	r0, r4
 8004818:	4629      	mov	r1, r5
 800481a:	f7fc f8d9 	bl	80009d0 <__aeabi_dcmple>
 800481e:	b190      	cbz	r0, 8004846 <_strtod_l+0xb8e>
 8004820:	4629      	mov	r1, r5
 8004822:	4620      	mov	r0, r4
 8004824:	f7fc f930 	bl	8000a88 <__aeabi_d2uiz>
 8004828:	2800      	cmp	r0, #0
 800482a:	bf08      	it	eq
 800482c:	2001      	moveq	r0, #1
 800482e:	f7fb fdd9 	bl	80003e4 <__aeabi_ui2d>
 8004832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004834:	4604      	mov	r4, r0
 8004836:	460d      	mov	r5, r1
 8004838:	b9d3      	cbnz	r3, 8004870 <_strtod_l+0xbb8>
 800483a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800483e:	9012      	str	r0, [sp, #72]	; 0x48
 8004840:	9313      	str	r3, [sp, #76]	; 0x4c
 8004842:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004846:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004848:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800484c:	1a9f      	subs	r7, r3, r2
 800484e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004852:	f001 fd4b 	bl	80062ec <__ulp>
 8004856:	4602      	mov	r2, r0
 8004858:	460b      	mov	r3, r1
 800485a:	4630      	mov	r0, r6
 800485c:	4639      	mov	r1, r7
 800485e:	f7fb fe3b 	bl	80004d8 <__aeabi_dmul>
 8004862:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004866:	f7fb fc81 	bl	800016c <__adddf3>
 800486a:	4681      	mov	r9, r0
 800486c:	468a      	mov	sl, r1
 800486e:	e777      	b.n	8004760 <_strtod_l+0xaa8>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004878:	e7e3      	b.n	8004842 <_strtod_l+0xb8a>
 800487a:	a30d      	add	r3, pc, #52	; (adr r3, 80048b0 <_strtod_l+0xbf8>)
 800487c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004880:	f7fc f89c 	bl	80009bc <__aeabi_dcmplt>
 8004884:	e79f      	b.n	80047c6 <_strtod_l+0xb0e>
 8004886:	2300      	movs	r3, #0
 8004888:	930d      	str	r3, [sp, #52]	; 0x34
 800488a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800488c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	f7ff ba55 	b.w	8003d3e <_strtod_l+0x86>
 8004894:	2b65      	cmp	r3, #101	; 0x65
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	f43f ab42 	beq.w	8003f22 <_strtod_l+0x26a>
 800489e:	2101      	movs	r1, #1
 80048a0:	4614      	mov	r4, r2
 80048a2:	9105      	str	r1, [sp, #20]
 80048a4:	f7ff babf 	b.w	8003e26 <_strtod_l+0x16e>
 80048a8:	ffc00000 	.word	0xffc00000
 80048ac:	41dfffff 	.word	0x41dfffff
 80048b0:	94a03595 	.word	0x94a03595
 80048b4:	3fcfffff 	.word	0x3fcfffff

080048b8 <_strtod_r>:
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <_strtod_r+0x18>)
 80048ba:	b410      	push	{r4}
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4c05      	ldr	r4, [pc, #20]	; (80048d4 <_strtod_r+0x1c>)
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	bf08      	it	eq
 80048c6:	4623      	moveq	r3, r4
 80048c8:	bc10      	pop	{r4}
 80048ca:	f7ff b9f5 	b.w	8003cb8 <_strtod_l>
 80048ce:	bf00      	nop
 80048d0:	2000000c 	.word	0x2000000c
 80048d4:	20000070 	.word	0x20000070

080048d8 <_strtol_l.isra.0>:
 80048d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	4680      	mov	r8, r0
 80048de:	4689      	mov	r9, r1
 80048e0:	4692      	mov	sl, r2
 80048e2:	461e      	mov	r6, r3
 80048e4:	460f      	mov	r7, r1
 80048e6:	463d      	mov	r5, r7
 80048e8:	9808      	ldr	r0, [sp, #32]
 80048ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80048ee:	f001 f9eb 	bl	8005cc8 <__locale_ctype_ptr_l>
 80048f2:	4420      	add	r0, r4
 80048f4:	7843      	ldrb	r3, [r0, #1]
 80048f6:	f013 0308 	ands.w	r3, r3, #8
 80048fa:	d132      	bne.n	8004962 <_strtol_l.isra.0+0x8a>
 80048fc:	2c2d      	cmp	r4, #45	; 0x2d
 80048fe:	d132      	bne.n	8004966 <_strtol_l.isra.0+0x8e>
 8004900:	2201      	movs	r2, #1
 8004902:	787c      	ldrb	r4, [r7, #1]
 8004904:	1cbd      	adds	r5, r7, #2
 8004906:	2e00      	cmp	r6, #0
 8004908:	d05d      	beq.n	80049c6 <_strtol_l.isra.0+0xee>
 800490a:	2e10      	cmp	r6, #16
 800490c:	d109      	bne.n	8004922 <_strtol_l.isra.0+0x4a>
 800490e:	2c30      	cmp	r4, #48	; 0x30
 8004910:	d107      	bne.n	8004922 <_strtol_l.isra.0+0x4a>
 8004912:	782b      	ldrb	r3, [r5, #0]
 8004914:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004918:	2b58      	cmp	r3, #88	; 0x58
 800491a:	d14f      	bne.n	80049bc <_strtol_l.isra.0+0xe4>
 800491c:	2610      	movs	r6, #16
 800491e:	786c      	ldrb	r4, [r5, #1]
 8004920:	3502      	adds	r5, #2
 8004922:	2a00      	cmp	r2, #0
 8004924:	bf14      	ite	ne
 8004926:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800492a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800492e:	2700      	movs	r7, #0
 8004930:	fbb1 fcf6 	udiv	ip, r1, r6
 8004934:	4638      	mov	r0, r7
 8004936:	fb06 1e1c 	mls	lr, r6, ip, r1
 800493a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800493e:	2b09      	cmp	r3, #9
 8004940:	d817      	bhi.n	8004972 <_strtol_l.isra.0+0x9a>
 8004942:	461c      	mov	r4, r3
 8004944:	42a6      	cmp	r6, r4
 8004946:	dd23      	ble.n	8004990 <_strtol_l.isra.0+0xb8>
 8004948:	1c7b      	adds	r3, r7, #1
 800494a:	d007      	beq.n	800495c <_strtol_l.isra.0+0x84>
 800494c:	4584      	cmp	ip, r0
 800494e:	d31c      	bcc.n	800498a <_strtol_l.isra.0+0xb2>
 8004950:	d101      	bne.n	8004956 <_strtol_l.isra.0+0x7e>
 8004952:	45a6      	cmp	lr, r4
 8004954:	db19      	blt.n	800498a <_strtol_l.isra.0+0xb2>
 8004956:	2701      	movs	r7, #1
 8004958:	fb00 4006 	mla	r0, r0, r6, r4
 800495c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004960:	e7eb      	b.n	800493a <_strtol_l.isra.0+0x62>
 8004962:	462f      	mov	r7, r5
 8004964:	e7bf      	b.n	80048e6 <_strtol_l.isra.0+0xe>
 8004966:	2c2b      	cmp	r4, #43	; 0x2b
 8004968:	bf04      	itt	eq
 800496a:	1cbd      	addeq	r5, r7, #2
 800496c:	787c      	ldrbeq	r4, [r7, #1]
 800496e:	461a      	mov	r2, r3
 8004970:	e7c9      	b.n	8004906 <_strtol_l.isra.0+0x2e>
 8004972:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004976:	2b19      	cmp	r3, #25
 8004978:	d801      	bhi.n	800497e <_strtol_l.isra.0+0xa6>
 800497a:	3c37      	subs	r4, #55	; 0x37
 800497c:	e7e2      	b.n	8004944 <_strtol_l.isra.0+0x6c>
 800497e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004982:	2b19      	cmp	r3, #25
 8004984:	d804      	bhi.n	8004990 <_strtol_l.isra.0+0xb8>
 8004986:	3c57      	subs	r4, #87	; 0x57
 8004988:	e7dc      	b.n	8004944 <_strtol_l.isra.0+0x6c>
 800498a:	f04f 37ff 	mov.w	r7, #4294967295
 800498e:	e7e5      	b.n	800495c <_strtol_l.isra.0+0x84>
 8004990:	1c7b      	adds	r3, r7, #1
 8004992:	d108      	bne.n	80049a6 <_strtol_l.isra.0+0xce>
 8004994:	2322      	movs	r3, #34	; 0x22
 8004996:	4608      	mov	r0, r1
 8004998:	f8c8 3000 	str.w	r3, [r8]
 800499c:	f1ba 0f00 	cmp.w	sl, #0
 80049a0:	d107      	bne.n	80049b2 <_strtol_l.isra.0+0xda>
 80049a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a6:	b102      	cbz	r2, 80049aa <_strtol_l.isra.0+0xd2>
 80049a8:	4240      	negs	r0, r0
 80049aa:	f1ba 0f00 	cmp.w	sl, #0
 80049ae:	d0f8      	beq.n	80049a2 <_strtol_l.isra.0+0xca>
 80049b0:	b10f      	cbz	r7, 80049b6 <_strtol_l.isra.0+0xde>
 80049b2:	f105 39ff 	add.w	r9, r5, #4294967295
 80049b6:	f8ca 9000 	str.w	r9, [sl]
 80049ba:	e7f2      	b.n	80049a2 <_strtol_l.isra.0+0xca>
 80049bc:	2430      	movs	r4, #48	; 0x30
 80049be:	2e00      	cmp	r6, #0
 80049c0:	d1af      	bne.n	8004922 <_strtol_l.isra.0+0x4a>
 80049c2:	2608      	movs	r6, #8
 80049c4:	e7ad      	b.n	8004922 <_strtol_l.isra.0+0x4a>
 80049c6:	2c30      	cmp	r4, #48	; 0x30
 80049c8:	d0a3      	beq.n	8004912 <_strtol_l.isra.0+0x3a>
 80049ca:	260a      	movs	r6, #10
 80049cc:	e7a9      	b.n	8004922 <_strtol_l.isra.0+0x4a>
	...

080049d0 <_strtol_r>:
 80049d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049d2:	4c06      	ldr	r4, [pc, #24]	; (80049ec <_strtol_r+0x1c>)
 80049d4:	4d06      	ldr	r5, [pc, #24]	; (80049f0 <_strtol_r+0x20>)
 80049d6:	6824      	ldr	r4, [r4, #0]
 80049d8:	6a24      	ldr	r4, [r4, #32]
 80049da:	2c00      	cmp	r4, #0
 80049dc:	bf08      	it	eq
 80049de:	462c      	moveq	r4, r5
 80049e0:	9400      	str	r4, [sp, #0]
 80049e2:	f7ff ff79 	bl	80048d8 <_strtol_l.isra.0>
 80049e6:	b003      	add	sp, #12
 80049e8:	bd30      	pop	{r4, r5, pc}
 80049ea:	bf00      	nop
 80049ec:	2000000c 	.word	0x2000000c
 80049f0:	20000070 	.word	0x20000070

080049f4 <quorem>:
 80049f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f8:	6903      	ldr	r3, [r0, #16]
 80049fa:	690c      	ldr	r4, [r1, #16]
 80049fc:	4680      	mov	r8, r0
 80049fe:	42a3      	cmp	r3, r4
 8004a00:	f2c0 8084 	blt.w	8004b0c <quorem+0x118>
 8004a04:	3c01      	subs	r4, #1
 8004a06:	f101 0714 	add.w	r7, r1, #20
 8004a0a:	f100 0614 	add.w	r6, r0, #20
 8004a0e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004a12:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004a16:	3501      	adds	r5, #1
 8004a18:	fbb0 f5f5 	udiv	r5, r0, r5
 8004a1c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004a20:	eb06 030c 	add.w	r3, r6, ip
 8004a24:	eb07 090c 	add.w	r9, r7, ip
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	b39d      	cbz	r5, 8004a94 <quorem+0xa0>
 8004a2c:	f04f 0a00 	mov.w	sl, #0
 8004a30:	4638      	mov	r0, r7
 8004a32:	46b6      	mov	lr, r6
 8004a34:	46d3      	mov	fp, sl
 8004a36:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a3a:	b293      	uxth	r3, r2
 8004a3c:	fb05 a303 	mla	r3, r5, r3, sl
 8004a40:	0c12      	lsrs	r2, r2, #16
 8004a42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a46:	fb05 a202 	mla	r2, r5, r2, sl
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	ebab 0303 	sub.w	r3, fp, r3
 8004a50:	f8de b000 	ldr.w	fp, [lr]
 8004a54:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004a58:	fa1f fb8b 	uxth.w	fp, fp
 8004a5c:	445b      	add	r3, fp
 8004a5e:	fa1f fb82 	uxth.w	fp, r2
 8004a62:	f8de 2000 	ldr.w	r2, [lr]
 8004a66:	4581      	cmp	r9, r0
 8004a68:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004a6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a76:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004a7a:	f84e 3b04 	str.w	r3, [lr], #4
 8004a7e:	d2da      	bcs.n	8004a36 <quorem+0x42>
 8004a80:	f856 300c 	ldr.w	r3, [r6, ip]
 8004a84:	b933      	cbnz	r3, 8004a94 <quorem+0xa0>
 8004a86:	9b01      	ldr	r3, [sp, #4]
 8004a88:	3b04      	subs	r3, #4
 8004a8a:	429e      	cmp	r6, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	d331      	bcc.n	8004af4 <quorem+0x100>
 8004a90:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a94:	4640      	mov	r0, r8
 8004a96:	f001 fbb1 	bl	80061fc <__mcmp>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	db26      	blt.n	8004aec <quorem+0xf8>
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	f04f 0c00 	mov.w	ip, #0
 8004aa4:	3501      	adds	r5, #1
 8004aa6:	f857 1b04 	ldr.w	r1, [r7], #4
 8004aaa:	f8d0 e000 	ldr.w	lr, [r0]
 8004aae:	b28b      	uxth	r3, r1
 8004ab0:	ebac 0303 	sub.w	r3, ip, r3
 8004ab4:	fa1f f28e 	uxth.w	r2, lr
 8004ab8:	4413      	add	r3, r2
 8004aba:	0c0a      	lsrs	r2, r1, #16
 8004abc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ac0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004aca:	45b9      	cmp	r9, r7
 8004acc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ad0:	f840 3b04 	str.w	r3, [r0], #4
 8004ad4:	d2e7      	bcs.n	8004aa6 <quorem+0xb2>
 8004ad6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004ada:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004ade:	b92a      	cbnz	r2, 8004aec <quorem+0xf8>
 8004ae0:	3b04      	subs	r3, #4
 8004ae2:	429e      	cmp	r6, r3
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	d30b      	bcc.n	8004b00 <quorem+0x10c>
 8004ae8:	f8c8 4010 	str.w	r4, [r8, #16]
 8004aec:	4628      	mov	r0, r5
 8004aee:	b003      	add	sp, #12
 8004af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	3b04      	subs	r3, #4
 8004af8:	2a00      	cmp	r2, #0
 8004afa:	d1c9      	bne.n	8004a90 <quorem+0x9c>
 8004afc:	3c01      	subs	r4, #1
 8004afe:	e7c4      	b.n	8004a8a <quorem+0x96>
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	3b04      	subs	r3, #4
 8004b04:	2a00      	cmp	r2, #0
 8004b06:	d1ef      	bne.n	8004ae8 <quorem+0xf4>
 8004b08:	3c01      	subs	r4, #1
 8004b0a:	e7ea      	b.n	8004ae2 <quorem+0xee>
 8004b0c:	2000      	movs	r0, #0
 8004b0e:	e7ee      	b.n	8004aee <quorem+0xfa>

08004b10 <_dtoa_r>:
 8004b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b14:	4616      	mov	r6, r2
 8004b16:	461f      	mov	r7, r3
 8004b18:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b1a:	b095      	sub	sp, #84	; 0x54
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004b22:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004b26:	b93d      	cbnz	r5, 8004b38 <_dtoa_r+0x28>
 8004b28:	2010      	movs	r0, #16
 8004b2a:	f001 f8e1 	bl	8005cf0 <malloc>
 8004b2e:	6260      	str	r0, [r4, #36]	; 0x24
 8004b30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b34:	6005      	str	r5, [r0, #0]
 8004b36:	60c5      	str	r5, [r0, #12]
 8004b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b3a:	6819      	ldr	r1, [r3, #0]
 8004b3c:	b151      	cbz	r1, 8004b54 <_dtoa_r+0x44>
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	2301      	movs	r3, #1
 8004b42:	4093      	lsls	r3, r2
 8004b44:	604a      	str	r2, [r1, #4]
 8004b46:	608b      	str	r3, [r1, #8]
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f001 f938 	bl	8005dbe <_Bfree>
 8004b4e:	2200      	movs	r2, #0
 8004b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	1e3b      	subs	r3, r7, #0
 8004b56:	bfaf      	iteee	ge
 8004b58:	2300      	movge	r3, #0
 8004b5a:	2201      	movlt	r2, #1
 8004b5c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b60:	9303      	strlt	r3, [sp, #12]
 8004b62:	bfac      	ite	ge
 8004b64:	f8c8 3000 	strge.w	r3, [r8]
 8004b68:	f8c8 2000 	strlt.w	r2, [r8]
 8004b6c:	4bae      	ldr	r3, [pc, #696]	; (8004e28 <_dtoa_r+0x318>)
 8004b6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004b72:	ea33 0308 	bics.w	r3, r3, r8
 8004b76:	d11b      	bne.n	8004bb0 <_dtoa_r+0xa0>
 8004b78:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	9b02      	ldr	r3, [sp, #8]
 8004b82:	b923      	cbnz	r3, 8004b8e <_dtoa_r+0x7e>
 8004b84:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	f000 8545 	beq.w	8005618 <_dtoa_r+0xb08>
 8004b8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b90:	b953      	cbnz	r3, 8004ba8 <_dtoa_r+0x98>
 8004b92:	4ba6      	ldr	r3, [pc, #664]	; (8004e2c <_dtoa_r+0x31c>)
 8004b94:	e021      	b.n	8004bda <_dtoa_r+0xca>
 8004b96:	4ba6      	ldr	r3, [pc, #664]	; (8004e30 <_dtoa_r+0x320>)
 8004b98:	9306      	str	r3, [sp, #24]
 8004b9a:	3308      	adds	r3, #8
 8004b9c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	9806      	ldr	r0, [sp, #24]
 8004ba2:	b015      	add	sp, #84	; 0x54
 8004ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba8:	4ba0      	ldr	r3, [pc, #640]	; (8004e2c <_dtoa_r+0x31c>)
 8004baa:	9306      	str	r3, [sp, #24]
 8004bac:	3303      	adds	r3, #3
 8004bae:	e7f5      	b.n	8004b9c <_dtoa_r+0x8c>
 8004bb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	4630      	mov	r0, r6
 8004bba:	4639      	mov	r1, r7
 8004bbc:	f7fb fef4 	bl	80009a8 <__aeabi_dcmpeq>
 8004bc0:	4682      	mov	sl, r0
 8004bc2:	b160      	cbz	r0, 8004bde <_dtoa_r+0xce>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 8520 	beq.w	8005612 <_dtoa_r+0xb02>
 8004bd2:	4b98      	ldr	r3, [pc, #608]	; (8004e34 <_dtoa_r+0x324>)
 8004bd4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	9306      	str	r3, [sp, #24]
 8004bdc:	e7e0      	b.n	8004ba0 <_dtoa_r+0x90>
 8004bde:	ab12      	add	r3, sp, #72	; 0x48
 8004be0:	9301      	str	r3, [sp, #4]
 8004be2:	ab13      	add	r3, sp, #76	; 0x4c
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	4632      	mov	r2, r6
 8004be8:	463b      	mov	r3, r7
 8004bea:	4620      	mov	r0, r4
 8004bec:	f001 fbf4 	bl	80063d8 <__d2b>
 8004bf0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004bf4:	4683      	mov	fp, r0
 8004bf6:	2d00      	cmp	r5, #0
 8004bf8:	d07d      	beq.n	8004cf6 <_dtoa_r+0x1e6>
 8004bfa:	46b0      	mov	r8, r6
 8004bfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004c00:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004c04:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004c08:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c0c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004c10:	2200      	movs	r2, #0
 8004c12:	4b89      	ldr	r3, [pc, #548]	; (8004e38 <_dtoa_r+0x328>)
 8004c14:	4640      	mov	r0, r8
 8004c16:	4649      	mov	r1, r9
 8004c18:	f7fb faa6 	bl	8000168 <__aeabi_dsub>
 8004c1c:	a37c      	add	r3, pc, #496	; (adr r3, 8004e10 <_dtoa_r+0x300>)
 8004c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c22:	f7fb fc59 	bl	80004d8 <__aeabi_dmul>
 8004c26:	a37c      	add	r3, pc, #496	; (adr r3, 8004e18 <_dtoa_r+0x308>)
 8004c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2c:	f7fb fa9e 	bl	800016c <__adddf3>
 8004c30:	4606      	mov	r6, r0
 8004c32:	4628      	mov	r0, r5
 8004c34:	460f      	mov	r7, r1
 8004c36:	f7fb fbe5 	bl	8000404 <__aeabi_i2d>
 8004c3a:	a379      	add	r3, pc, #484	; (adr r3, 8004e20 <_dtoa_r+0x310>)
 8004c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c40:	f7fb fc4a 	bl	80004d8 <__aeabi_dmul>
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	4630      	mov	r0, r6
 8004c4a:	4639      	mov	r1, r7
 8004c4c:	f7fb fa8e 	bl	800016c <__adddf3>
 8004c50:	4606      	mov	r6, r0
 8004c52:	460f      	mov	r7, r1
 8004c54:	f7fb fef0 	bl	8000a38 <__aeabi_d2iz>
 8004c58:	2200      	movs	r2, #0
 8004c5a:	4682      	mov	sl, r0
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	4630      	mov	r0, r6
 8004c60:	4639      	mov	r1, r7
 8004c62:	f7fb feab 	bl	80009bc <__aeabi_dcmplt>
 8004c66:	b148      	cbz	r0, 8004c7c <_dtoa_r+0x16c>
 8004c68:	4650      	mov	r0, sl
 8004c6a:	f7fb fbcb 	bl	8000404 <__aeabi_i2d>
 8004c6e:	4632      	mov	r2, r6
 8004c70:	463b      	mov	r3, r7
 8004c72:	f7fb fe99 	bl	80009a8 <__aeabi_dcmpeq>
 8004c76:	b908      	cbnz	r0, 8004c7c <_dtoa_r+0x16c>
 8004c78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c7c:	f1ba 0f16 	cmp.w	sl, #22
 8004c80:	d85a      	bhi.n	8004d38 <_dtoa_r+0x228>
 8004c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c86:	496d      	ldr	r1, [pc, #436]	; (8004e3c <_dtoa_r+0x32c>)
 8004c88:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c90:	f7fb feb2 	bl	80009f8 <__aeabi_dcmpgt>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	d051      	beq.n	8004d3c <_dtoa_r+0x22c>
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004c9e:	930d      	str	r3, [sp, #52]	; 0x34
 8004ca0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ca2:	1b5d      	subs	r5, r3, r5
 8004ca4:	1e6b      	subs	r3, r5, #1
 8004ca6:	9307      	str	r3, [sp, #28]
 8004ca8:	bf43      	ittte	mi
 8004caa:	2300      	movmi	r3, #0
 8004cac:	f1c5 0901 	rsbmi	r9, r5, #1
 8004cb0:	9307      	strmi	r3, [sp, #28]
 8004cb2:	f04f 0900 	movpl.w	r9, #0
 8004cb6:	f1ba 0f00 	cmp.w	sl, #0
 8004cba:	db41      	blt.n	8004d40 <_dtoa_r+0x230>
 8004cbc:	9b07      	ldr	r3, [sp, #28]
 8004cbe:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004cc2:	4453      	add	r3, sl
 8004cc4:	9307      	str	r3, [sp, #28]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	9308      	str	r3, [sp, #32]
 8004cca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004ccc:	2b09      	cmp	r3, #9
 8004cce:	f200 808f 	bhi.w	8004df0 <_dtoa_r+0x2e0>
 8004cd2:	2b05      	cmp	r3, #5
 8004cd4:	bfc4      	itt	gt
 8004cd6:	3b04      	subgt	r3, #4
 8004cd8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004cda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004cdc:	bfc8      	it	gt
 8004cde:	2500      	movgt	r5, #0
 8004ce0:	f1a3 0302 	sub.w	r3, r3, #2
 8004ce4:	bfd8      	it	le
 8004ce6:	2501      	movle	r5, #1
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	f200 808d 	bhi.w	8004e08 <_dtoa_r+0x2f8>
 8004cee:	e8df f003 	tbb	[pc, r3]
 8004cf2:	7d7b      	.short	0x7d7b
 8004cf4:	6f2f      	.short	0x6f2f
 8004cf6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004cfa:	441d      	add	r5, r3
 8004cfc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004d00:	2820      	cmp	r0, #32
 8004d02:	dd13      	ble.n	8004d2c <_dtoa_r+0x21c>
 8004d04:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004d08:	9b02      	ldr	r3, [sp, #8]
 8004d0a:	fa08 f800 	lsl.w	r8, r8, r0
 8004d0e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004d12:	fa23 f000 	lsr.w	r0, r3, r0
 8004d16:	ea48 0000 	orr.w	r0, r8, r0
 8004d1a:	f7fb fb63 	bl	80003e4 <__aeabi_ui2d>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	4680      	mov	r8, r0
 8004d22:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004d26:	3d01      	subs	r5, #1
 8004d28:	9310      	str	r3, [sp, #64]	; 0x40
 8004d2a:	e771      	b.n	8004c10 <_dtoa_r+0x100>
 8004d2c:	9b02      	ldr	r3, [sp, #8]
 8004d2e:	f1c0 0020 	rsb	r0, r0, #32
 8004d32:	fa03 f000 	lsl.w	r0, r3, r0
 8004d36:	e7f0      	b.n	8004d1a <_dtoa_r+0x20a>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e7b0      	b.n	8004c9e <_dtoa_r+0x18e>
 8004d3c:	900d      	str	r0, [sp, #52]	; 0x34
 8004d3e:	e7af      	b.n	8004ca0 <_dtoa_r+0x190>
 8004d40:	f1ca 0300 	rsb	r3, sl, #0
 8004d44:	9308      	str	r3, [sp, #32]
 8004d46:	2300      	movs	r3, #0
 8004d48:	eba9 090a 	sub.w	r9, r9, sl
 8004d4c:	930c      	str	r3, [sp, #48]	; 0x30
 8004d4e:	e7bc      	b.n	8004cca <_dtoa_r+0x1ba>
 8004d50:	2301      	movs	r3, #1
 8004d52:	9309      	str	r3, [sp, #36]	; 0x24
 8004d54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	dd74      	ble.n	8004e44 <_dtoa_r+0x334>
 8004d5a:	4698      	mov	r8, r3
 8004d5c:	9304      	str	r3, [sp, #16]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d62:	6072      	str	r2, [r6, #4]
 8004d64:	2204      	movs	r2, #4
 8004d66:	f102 0014 	add.w	r0, r2, #20
 8004d6a:	4298      	cmp	r0, r3
 8004d6c:	6871      	ldr	r1, [r6, #4]
 8004d6e:	d96e      	bls.n	8004e4e <_dtoa_r+0x33e>
 8004d70:	4620      	mov	r0, r4
 8004d72:	f000 fff0 	bl	8005d56 <_Balloc>
 8004d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d78:	6030      	str	r0, [r6, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f1b8 0f0e 	cmp.w	r8, #14
 8004d80:	9306      	str	r3, [sp, #24]
 8004d82:	f200 80ed 	bhi.w	8004f60 <_dtoa_r+0x450>
 8004d86:	2d00      	cmp	r5, #0
 8004d88:	f000 80ea 	beq.w	8004f60 <_dtoa_r+0x450>
 8004d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d90:	f1ba 0f00 	cmp.w	sl, #0
 8004d94:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004d98:	dd77      	ble.n	8004e8a <_dtoa_r+0x37a>
 8004d9a:	4a28      	ldr	r2, [pc, #160]	; (8004e3c <_dtoa_r+0x32c>)
 8004d9c:	f00a 030f 	and.w	r3, sl, #15
 8004da0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004da4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004da8:	06f0      	lsls	r0, r6, #27
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004db2:	d568      	bpl.n	8004e86 <_dtoa_r+0x376>
 8004db4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004db8:	4b21      	ldr	r3, [pc, #132]	; (8004e40 <_dtoa_r+0x330>)
 8004dba:	2503      	movs	r5, #3
 8004dbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004dc0:	f7fb fcb4 	bl	800072c <__aeabi_ddiv>
 8004dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004dc8:	f006 060f 	and.w	r6, r6, #15
 8004dcc:	4f1c      	ldr	r7, [pc, #112]	; (8004e40 <_dtoa_r+0x330>)
 8004dce:	e04f      	b.n	8004e70 <_dtoa_r+0x360>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004dd6:	4453      	add	r3, sl
 8004dd8:	f103 0801 	add.w	r8, r3, #1
 8004ddc:	9304      	str	r3, [sp, #16]
 8004dde:	4643      	mov	r3, r8
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	bfb8      	it	lt
 8004de4:	2301      	movlt	r3, #1
 8004de6:	e7ba      	b.n	8004d5e <_dtoa_r+0x24e>
 8004de8:	2300      	movs	r3, #0
 8004dea:	e7b2      	b.n	8004d52 <_dtoa_r+0x242>
 8004dec:	2300      	movs	r3, #0
 8004dee:	e7f0      	b.n	8004dd2 <_dtoa_r+0x2c2>
 8004df0:	2501      	movs	r5, #1
 8004df2:	2300      	movs	r3, #0
 8004df4:	9509      	str	r5, [sp, #36]	; 0x24
 8004df6:	931e      	str	r3, [sp, #120]	; 0x78
 8004df8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	9304      	str	r3, [sp, #16]
 8004e00:	4698      	mov	r8, r3
 8004e02:	2312      	movs	r3, #18
 8004e04:	921f      	str	r2, [sp, #124]	; 0x7c
 8004e06:	e7aa      	b.n	8004d5e <_dtoa_r+0x24e>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e0c:	e7f4      	b.n	8004df8 <_dtoa_r+0x2e8>
 8004e0e:	bf00      	nop
 8004e10:	636f4361 	.word	0x636f4361
 8004e14:	3fd287a7 	.word	0x3fd287a7
 8004e18:	8b60c8b3 	.word	0x8b60c8b3
 8004e1c:	3fc68a28 	.word	0x3fc68a28
 8004e20:	509f79fb 	.word	0x509f79fb
 8004e24:	3fd34413 	.word	0x3fd34413
 8004e28:	7ff00000 	.word	0x7ff00000
 8004e2c:	08006b41 	.word	0x08006b41
 8004e30:	08006b38 	.word	0x08006b38
 8004e34:	08006abf 	.word	0x08006abf
 8004e38:	3ff80000 	.word	0x3ff80000
 8004e3c:	08006b78 	.word	0x08006b78
 8004e40:	08006b50 	.word	0x08006b50
 8004e44:	2301      	movs	r3, #1
 8004e46:	9304      	str	r3, [sp, #16]
 8004e48:	4698      	mov	r8, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	e7da      	b.n	8004e04 <_dtoa_r+0x2f4>
 8004e4e:	3101      	adds	r1, #1
 8004e50:	6071      	str	r1, [r6, #4]
 8004e52:	0052      	lsls	r2, r2, #1
 8004e54:	e787      	b.n	8004d66 <_dtoa_r+0x256>
 8004e56:	07f1      	lsls	r1, r6, #31
 8004e58:	d508      	bpl.n	8004e6c <_dtoa_r+0x35c>
 8004e5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e62:	f7fb fb39 	bl	80004d8 <__aeabi_dmul>
 8004e66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004e6a:	3501      	adds	r5, #1
 8004e6c:	1076      	asrs	r6, r6, #1
 8004e6e:	3708      	adds	r7, #8
 8004e70:	2e00      	cmp	r6, #0
 8004e72:	d1f0      	bne.n	8004e56 <_dtoa_r+0x346>
 8004e74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e7c:	f7fb fc56 	bl	800072c <__aeabi_ddiv>
 8004e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e84:	e01b      	b.n	8004ebe <_dtoa_r+0x3ae>
 8004e86:	2502      	movs	r5, #2
 8004e88:	e7a0      	b.n	8004dcc <_dtoa_r+0x2bc>
 8004e8a:	f000 80a4 	beq.w	8004fd6 <_dtoa_r+0x4c6>
 8004e8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004e92:	f1ca 0600 	rsb	r6, sl, #0
 8004e96:	4ba0      	ldr	r3, [pc, #640]	; (8005118 <_dtoa_r+0x608>)
 8004e98:	f006 020f 	and.w	r2, r6, #15
 8004e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	f7fb fb18 	bl	80004d8 <__aeabi_dmul>
 8004ea8:	2502      	movs	r5, #2
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eb0:	4f9a      	ldr	r7, [pc, #616]	; (800511c <_dtoa_r+0x60c>)
 8004eb2:	1136      	asrs	r6, r6, #4
 8004eb4:	2e00      	cmp	r6, #0
 8004eb6:	f040 8083 	bne.w	8004fc0 <_dtoa_r+0x4b0>
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e0      	bne.n	8004e80 <_dtoa_r+0x370>
 8004ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 808a 	beq.w	8004fda <_dtoa_r+0x4ca>
 8004ec6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004eca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004ece:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	4b92      	ldr	r3, [pc, #584]	; (8005120 <_dtoa_r+0x610>)
 8004ed6:	f7fb fd71 	bl	80009bc <__aeabi_dcmplt>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d07d      	beq.n	8004fda <_dtoa_r+0x4ca>
 8004ede:	f1b8 0f00 	cmp.w	r8, #0
 8004ee2:	d07a      	beq.n	8004fda <_dtoa_r+0x4ca>
 8004ee4:	9b04      	ldr	r3, [sp, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	dd36      	ble.n	8004f58 <_dtoa_r+0x448>
 8004eea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004eee:	2200      	movs	r2, #0
 8004ef0:	4b8c      	ldr	r3, [pc, #560]	; (8005124 <_dtoa_r+0x614>)
 8004ef2:	f7fb faf1 	bl	80004d8 <__aeabi_dmul>
 8004ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004efa:	9e04      	ldr	r6, [sp, #16]
 8004efc:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004f00:	3501      	adds	r5, #1
 8004f02:	4628      	mov	r0, r5
 8004f04:	f7fb fa7e 	bl	8000404 <__aeabi_i2d>
 8004f08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f0c:	f7fb fae4 	bl	80004d8 <__aeabi_dmul>
 8004f10:	2200      	movs	r2, #0
 8004f12:	4b85      	ldr	r3, [pc, #532]	; (8005128 <_dtoa_r+0x618>)
 8004f14:	f7fb f92a 	bl	800016c <__adddf3>
 8004f18:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004f1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f20:	950b      	str	r5, [sp, #44]	; 0x2c
 8004f22:	2e00      	cmp	r6, #0
 8004f24:	d15c      	bne.n	8004fe0 <_dtoa_r+0x4d0>
 8004f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	4b7f      	ldr	r3, [pc, #508]	; (800512c <_dtoa_r+0x61c>)
 8004f2e:	f7fb f91b 	bl	8000168 <__aeabi_dsub>
 8004f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f34:	462b      	mov	r3, r5
 8004f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f3a:	f7fb fd5d 	bl	80009f8 <__aeabi_dcmpgt>
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	f040 8281 	bne.w	8005446 <_dtoa_r+0x936>
 8004f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f4a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004f4e:	f7fb fd35 	bl	80009bc <__aeabi_dcmplt>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	f040 8275 	bne.w	8005442 <_dtoa_r+0x932>
 8004f58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004f5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f2c0 814b 	blt.w	80051fe <_dtoa_r+0x6ee>
 8004f68:	f1ba 0f0e 	cmp.w	sl, #14
 8004f6c:	f300 8147 	bgt.w	80051fe <_dtoa_r+0x6ee>
 8004f70:	4b69      	ldr	r3, [pc, #420]	; (8005118 <_dtoa_r+0x608>)
 8004f72:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f7e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f280 80d7 	bge.w	8005134 <_dtoa_r+0x624>
 8004f86:	f1b8 0f00 	cmp.w	r8, #0
 8004f8a:	f300 80d3 	bgt.w	8005134 <_dtoa_r+0x624>
 8004f8e:	f040 8257 	bne.w	8005440 <_dtoa_r+0x930>
 8004f92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f96:	2200      	movs	r2, #0
 8004f98:	4b64      	ldr	r3, [pc, #400]	; (800512c <_dtoa_r+0x61c>)
 8004f9a:	f7fb fa9d 	bl	80004d8 <__aeabi_dmul>
 8004f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fa2:	f7fb fd1f 	bl	80009e4 <__aeabi_dcmpge>
 8004fa6:	4646      	mov	r6, r8
 8004fa8:	4647      	mov	r7, r8
 8004faa:	2800      	cmp	r0, #0
 8004fac:	f040 822d 	bne.w	800540a <_dtoa_r+0x8fa>
 8004fb0:	9b06      	ldr	r3, [sp, #24]
 8004fb2:	9a06      	ldr	r2, [sp, #24]
 8004fb4:	1c5d      	adds	r5, r3, #1
 8004fb6:	2331      	movs	r3, #49	; 0x31
 8004fb8:	f10a 0a01 	add.w	sl, sl, #1
 8004fbc:	7013      	strb	r3, [r2, #0]
 8004fbe:	e228      	b.n	8005412 <_dtoa_r+0x902>
 8004fc0:	07f2      	lsls	r2, r6, #31
 8004fc2:	d505      	bpl.n	8004fd0 <_dtoa_r+0x4c0>
 8004fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fc8:	f7fb fa86 	bl	80004d8 <__aeabi_dmul>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	3501      	adds	r5, #1
 8004fd0:	1076      	asrs	r6, r6, #1
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	e76e      	b.n	8004eb4 <_dtoa_r+0x3a4>
 8004fd6:	2502      	movs	r5, #2
 8004fd8:	e771      	b.n	8004ebe <_dtoa_r+0x3ae>
 8004fda:	4657      	mov	r7, sl
 8004fdc:	4646      	mov	r6, r8
 8004fde:	e790      	b.n	8004f02 <_dtoa_r+0x3f2>
 8004fe0:	4b4d      	ldr	r3, [pc, #308]	; (8005118 <_dtoa_r+0x608>)
 8004fe2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004fe6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d048      	beq.n	8005082 <_dtoa_r+0x572>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	494e      	ldr	r1, [pc, #312]	; (8005130 <_dtoa_r+0x620>)
 8004ff8:	f7fb fb98 	bl	800072c <__aeabi_ddiv>
 8004ffc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005000:	f7fb f8b2 	bl	8000168 <__aeabi_dsub>
 8005004:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005008:	9d06      	ldr	r5, [sp, #24]
 800500a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800500e:	f7fb fd13 	bl	8000a38 <__aeabi_d2iz>
 8005012:	9011      	str	r0, [sp, #68]	; 0x44
 8005014:	f7fb f9f6 	bl	8000404 <__aeabi_i2d>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005020:	f7fb f8a2 	bl	8000168 <__aeabi_dsub>
 8005024:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800502a:	3330      	adds	r3, #48	; 0x30
 800502c:	f805 3b01 	strb.w	r3, [r5], #1
 8005030:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005034:	f7fb fcc2 	bl	80009bc <__aeabi_dcmplt>
 8005038:	2800      	cmp	r0, #0
 800503a:	d163      	bne.n	8005104 <_dtoa_r+0x5f4>
 800503c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005040:	2000      	movs	r0, #0
 8005042:	4937      	ldr	r1, [pc, #220]	; (8005120 <_dtoa_r+0x610>)
 8005044:	f7fb f890 	bl	8000168 <__aeabi_dsub>
 8005048:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800504c:	f7fb fcb6 	bl	80009bc <__aeabi_dcmplt>
 8005050:	2800      	cmp	r0, #0
 8005052:	f040 80b5 	bne.w	80051c0 <_dtoa_r+0x6b0>
 8005056:	9b06      	ldr	r3, [sp, #24]
 8005058:	1aeb      	subs	r3, r5, r3
 800505a:	429e      	cmp	r6, r3
 800505c:	f77f af7c 	ble.w	8004f58 <_dtoa_r+0x448>
 8005060:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005064:	2200      	movs	r2, #0
 8005066:	4b2f      	ldr	r3, [pc, #188]	; (8005124 <_dtoa_r+0x614>)
 8005068:	f7fb fa36 	bl	80004d8 <__aeabi_dmul>
 800506c:	2200      	movs	r2, #0
 800506e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005076:	4b2b      	ldr	r3, [pc, #172]	; (8005124 <_dtoa_r+0x614>)
 8005078:	f7fb fa2e 	bl	80004d8 <__aeabi_dmul>
 800507c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005080:	e7c3      	b.n	800500a <_dtoa_r+0x4fa>
 8005082:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005086:	f7fb fa27 	bl	80004d8 <__aeabi_dmul>
 800508a:	9b06      	ldr	r3, [sp, #24]
 800508c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005090:	199d      	adds	r5, r3, r6
 8005092:	461e      	mov	r6, r3
 8005094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005098:	f7fb fcce 	bl	8000a38 <__aeabi_d2iz>
 800509c:	9011      	str	r0, [sp, #68]	; 0x44
 800509e:	f7fb f9b1 	bl	8000404 <__aeabi_i2d>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050aa:	f7fb f85d 	bl	8000168 <__aeabi_dsub>
 80050ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050b4:	3330      	adds	r3, #48	; 0x30
 80050b6:	f806 3b01 	strb.w	r3, [r6], #1
 80050ba:	42ae      	cmp	r6, r5
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	d124      	bne.n	800510c <_dtoa_r+0x5fc>
 80050c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050c6:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <_dtoa_r+0x620>)
 80050c8:	f7fb f850 	bl	800016c <__adddf3>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050d4:	f7fb fc90 	bl	80009f8 <__aeabi_dcmpgt>
 80050d8:	2800      	cmp	r0, #0
 80050da:	d171      	bne.n	80051c0 <_dtoa_r+0x6b0>
 80050dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050e0:	2000      	movs	r0, #0
 80050e2:	4913      	ldr	r1, [pc, #76]	; (8005130 <_dtoa_r+0x620>)
 80050e4:	f7fb f840 	bl	8000168 <__aeabi_dsub>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050f0:	f7fb fc64 	bl	80009bc <__aeabi_dcmplt>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	f43f af2f 	beq.w	8004f58 <_dtoa_r+0x448>
 80050fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80050fe:	1e6a      	subs	r2, r5, #1
 8005100:	2b30      	cmp	r3, #48	; 0x30
 8005102:	d001      	beq.n	8005108 <_dtoa_r+0x5f8>
 8005104:	46ba      	mov	sl, r7
 8005106:	e04a      	b.n	800519e <_dtoa_r+0x68e>
 8005108:	4615      	mov	r5, r2
 800510a:	e7f6      	b.n	80050fa <_dtoa_r+0x5ea>
 800510c:	4b05      	ldr	r3, [pc, #20]	; (8005124 <_dtoa_r+0x614>)
 800510e:	f7fb f9e3 	bl	80004d8 <__aeabi_dmul>
 8005112:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005116:	e7bd      	b.n	8005094 <_dtoa_r+0x584>
 8005118:	08006b78 	.word	0x08006b78
 800511c:	08006b50 	.word	0x08006b50
 8005120:	3ff00000 	.word	0x3ff00000
 8005124:	40240000 	.word	0x40240000
 8005128:	401c0000 	.word	0x401c0000
 800512c:	40140000 	.word	0x40140000
 8005130:	3fe00000 	.word	0x3fe00000
 8005134:	9d06      	ldr	r5, [sp, #24]
 8005136:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800513a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800513e:	4630      	mov	r0, r6
 8005140:	4639      	mov	r1, r7
 8005142:	f7fb faf3 	bl	800072c <__aeabi_ddiv>
 8005146:	f7fb fc77 	bl	8000a38 <__aeabi_d2iz>
 800514a:	4681      	mov	r9, r0
 800514c:	f7fb f95a 	bl	8000404 <__aeabi_i2d>
 8005150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005154:	f7fb f9c0 	bl	80004d8 <__aeabi_dmul>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4630      	mov	r0, r6
 800515e:	4639      	mov	r1, r7
 8005160:	f7fb f802 	bl	8000168 <__aeabi_dsub>
 8005164:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005168:	f805 6b01 	strb.w	r6, [r5], #1
 800516c:	9e06      	ldr	r6, [sp, #24]
 800516e:	4602      	mov	r2, r0
 8005170:	1bae      	subs	r6, r5, r6
 8005172:	45b0      	cmp	r8, r6
 8005174:	460b      	mov	r3, r1
 8005176:	d135      	bne.n	80051e4 <_dtoa_r+0x6d4>
 8005178:	f7fa fff8 	bl	800016c <__adddf3>
 800517c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005180:	4606      	mov	r6, r0
 8005182:	460f      	mov	r7, r1
 8005184:	f7fb fc38 	bl	80009f8 <__aeabi_dcmpgt>
 8005188:	b9c8      	cbnz	r0, 80051be <_dtoa_r+0x6ae>
 800518a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800518e:	4630      	mov	r0, r6
 8005190:	4639      	mov	r1, r7
 8005192:	f7fb fc09 	bl	80009a8 <__aeabi_dcmpeq>
 8005196:	b110      	cbz	r0, 800519e <_dtoa_r+0x68e>
 8005198:	f019 0f01 	tst.w	r9, #1
 800519c:	d10f      	bne.n	80051be <_dtoa_r+0x6ae>
 800519e:	4659      	mov	r1, fp
 80051a0:	4620      	mov	r0, r4
 80051a2:	f000 fe0c 	bl	8005dbe <_Bfree>
 80051a6:	2300      	movs	r3, #0
 80051a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051aa:	702b      	strb	r3, [r5, #0]
 80051ac:	f10a 0301 	add.w	r3, sl, #1
 80051b0:	6013      	str	r3, [r2, #0]
 80051b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f43f acf3 	beq.w	8004ba0 <_dtoa_r+0x90>
 80051ba:	601d      	str	r5, [r3, #0]
 80051bc:	e4f0      	b.n	8004ba0 <_dtoa_r+0x90>
 80051be:	4657      	mov	r7, sl
 80051c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80051c4:	1e6b      	subs	r3, r5, #1
 80051c6:	2a39      	cmp	r2, #57	; 0x39
 80051c8:	d106      	bne.n	80051d8 <_dtoa_r+0x6c8>
 80051ca:	9a06      	ldr	r2, [sp, #24]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d107      	bne.n	80051e0 <_dtoa_r+0x6d0>
 80051d0:	2330      	movs	r3, #48	; 0x30
 80051d2:	7013      	strb	r3, [r2, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	3701      	adds	r7, #1
 80051d8:	781a      	ldrb	r2, [r3, #0]
 80051da:	3201      	adds	r2, #1
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	e791      	b.n	8005104 <_dtoa_r+0x5f4>
 80051e0:	461d      	mov	r5, r3
 80051e2:	e7ed      	b.n	80051c0 <_dtoa_r+0x6b0>
 80051e4:	2200      	movs	r2, #0
 80051e6:	4b99      	ldr	r3, [pc, #612]	; (800544c <_dtoa_r+0x93c>)
 80051e8:	f7fb f976 	bl	80004d8 <__aeabi_dmul>
 80051ec:	2200      	movs	r2, #0
 80051ee:	2300      	movs	r3, #0
 80051f0:	4606      	mov	r6, r0
 80051f2:	460f      	mov	r7, r1
 80051f4:	f7fb fbd8 	bl	80009a8 <__aeabi_dcmpeq>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d09e      	beq.n	800513a <_dtoa_r+0x62a>
 80051fc:	e7cf      	b.n	800519e <_dtoa_r+0x68e>
 80051fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005200:	2a00      	cmp	r2, #0
 8005202:	f000 8088 	beq.w	8005316 <_dtoa_r+0x806>
 8005206:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005208:	2a01      	cmp	r2, #1
 800520a:	dc6d      	bgt.n	80052e8 <_dtoa_r+0x7d8>
 800520c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800520e:	2a00      	cmp	r2, #0
 8005210:	d066      	beq.n	80052e0 <_dtoa_r+0x7d0>
 8005212:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005216:	464d      	mov	r5, r9
 8005218:	9e08      	ldr	r6, [sp, #32]
 800521a:	9a07      	ldr	r2, [sp, #28]
 800521c:	2101      	movs	r1, #1
 800521e:	441a      	add	r2, r3
 8005220:	4620      	mov	r0, r4
 8005222:	4499      	add	r9, r3
 8005224:	9207      	str	r2, [sp, #28]
 8005226:	f000 fea8 	bl	8005f7a <__i2b>
 800522a:	4607      	mov	r7, r0
 800522c:	2d00      	cmp	r5, #0
 800522e:	dd0b      	ble.n	8005248 <_dtoa_r+0x738>
 8005230:	9b07      	ldr	r3, [sp, #28]
 8005232:	2b00      	cmp	r3, #0
 8005234:	dd08      	ble.n	8005248 <_dtoa_r+0x738>
 8005236:	42ab      	cmp	r3, r5
 8005238:	bfa8      	it	ge
 800523a:	462b      	movge	r3, r5
 800523c:	9a07      	ldr	r2, [sp, #28]
 800523e:	eba9 0903 	sub.w	r9, r9, r3
 8005242:	1aed      	subs	r5, r5, r3
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	9307      	str	r3, [sp, #28]
 8005248:	9b08      	ldr	r3, [sp, #32]
 800524a:	b1eb      	cbz	r3, 8005288 <_dtoa_r+0x778>
 800524c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800524e:	2b00      	cmp	r3, #0
 8005250:	d065      	beq.n	800531e <_dtoa_r+0x80e>
 8005252:	b18e      	cbz	r6, 8005278 <_dtoa_r+0x768>
 8005254:	4639      	mov	r1, r7
 8005256:	4632      	mov	r2, r6
 8005258:	4620      	mov	r0, r4
 800525a:	f000 ff2d 	bl	80060b8 <__pow5mult>
 800525e:	465a      	mov	r2, fp
 8005260:	4601      	mov	r1, r0
 8005262:	4607      	mov	r7, r0
 8005264:	4620      	mov	r0, r4
 8005266:	f000 fe91 	bl	8005f8c <__multiply>
 800526a:	4659      	mov	r1, fp
 800526c:	900a      	str	r0, [sp, #40]	; 0x28
 800526e:	4620      	mov	r0, r4
 8005270:	f000 fda5 	bl	8005dbe <_Bfree>
 8005274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005276:	469b      	mov	fp, r3
 8005278:	9b08      	ldr	r3, [sp, #32]
 800527a:	1b9a      	subs	r2, r3, r6
 800527c:	d004      	beq.n	8005288 <_dtoa_r+0x778>
 800527e:	4659      	mov	r1, fp
 8005280:	4620      	mov	r0, r4
 8005282:	f000 ff19 	bl	80060b8 <__pow5mult>
 8005286:	4683      	mov	fp, r0
 8005288:	2101      	movs	r1, #1
 800528a:	4620      	mov	r0, r4
 800528c:	f000 fe75 	bl	8005f7a <__i2b>
 8005290:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005292:	4606      	mov	r6, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 81c6 	beq.w	8005626 <_dtoa_r+0xb16>
 800529a:	461a      	mov	r2, r3
 800529c:	4601      	mov	r1, r0
 800529e:	4620      	mov	r0, r4
 80052a0:	f000 ff0a 	bl	80060b8 <__pow5mult>
 80052a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80052a6:	4606      	mov	r6, r0
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	dc3e      	bgt.n	800532a <_dtoa_r+0x81a>
 80052ac:	9b02      	ldr	r3, [sp, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d137      	bne.n	8005322 <_dtoa_r+0x812>
 80052b2:	9b03      	ldr	r3, [sp, #12]
 80052b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d134      	bne.n	8005326 <_dtoa_r+0x816>
 80052bc:	9b03      	ldr	r3, [sp, #12]
 80052be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052c2:	0d1b      	lsrs	r3, r3, #20
 80052c4:	051b      	lsls	r3, r3, #20
 80052c6:	b12b      	cbz	r3, 80052d4 <_dtoa_r+0x7c4>
 80052c8:	9b07      	ldr	r3, [sp, #28]
 80052ca:	f109 0901 	add.w	r9, r9, #1
 80052ce:	3301      	adds	r3, #1
 80052d0:	9307      	str	r3, [sp, #28]
 80052d2:	2301      	movs	r3, #1
 80052d4:	9308      	str	r3, [sp, #32]
 80052d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d128      	bne.n	800532e <_dtoa_r+0x81e>
 80052dc:	2001      	movs	r0, #1
 80052de:	e02e      	b.n	800533e <_dtoa_r+0x82e>
 80052e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80052e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052e6:	e796      	b.n	8005216 <_dtoa_r+0x706>
 80052e8:	9b08      	ldr	r3, [sp, #32]
 80052ea:	f108 36ff 	add.w	r6, r8, #4294967295
 80052ee:	42b3      	cmp	r3, r6
 80052f0:	bfb7      	itett	lt
 80052f2:	9b08      	ldrlt	r3, [sp, #32]
 80052f4:	1b9e      	subge	r6, r3, r6
 80052f6:	1af2      	sublt	r2, r6, r3
 80052f8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80052fa:	bfbf      	itttt	lt
 80052fc:	9608      	strlt	r6, [sp, #32]
 80052fe:	189b      	addlt	r3, r3, r2
 8005300:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005302:	2600      	movlt	r6, #0
 8005304:	f1b8 0f00 	cmp.w	r8, #0
 8005308:	bfb9      	ittee	lt
 800530a:	eba9 0508 	sublt.w	r5, r9, r8
 800530e:	2300      	movlt	r3, #0
 8005310:	464d      	movge	r5, r9
 8005312:	4643      	movge	r3, r8
 8005314:	e781      	b.n	800521a <_dtoa_r+0x70a>
 8005316:	9e08      	ldr	r6, [sp, #32]
 8005318:	464d      	mov	r5, r9
 800531a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800531c:	e786      	b.n	800522c <_dtoa_r+0x71c>
 800531e:	9a08      	ldr	r2, [sp, #32]
 8005320:	e7ad      	b.n	800527e <_dtoa_r+0x76e>
 8005322:	2300      	movs	r3, #0
 8005324:	e7d6      	b.n	80052d4 <_dtoa_r+0x7c4>
 8005326:	9b02      	ldr	r3, [sp, #8]
 8005328:	e7d4      	b.n	80052d4 <_dtoa_r+0x7c4>
 800532a:	2300      	movs	r3, #0
 800532c:	9308      	str	r3, [sp, #32]
 800532e:	6933      	ldr	r3, [r6, #16]
 8005330:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005334:	6918      	ldr	r0, [r3, #16]
 8005336:	f000 fdd2 	bl	8005ede <__hi0bits>
 800533a:	f1c0 0020 	rsb	r0, r0, #32
 800533e:	9b07      	ldr	r3, [sp, #28]
 8005340:	4418      	add	r0, r3
 8005342:	f010 001f 	ands.w	r0, r0, #31
 8005346:	d047      	beq.n	80053d8 <_dtoa_r+0x8c8>
 8005348:	f1c0 0320 	rsb	r3, r0, #32
 800534c:	2b04      	cmp	r3, #4
 800534e:	dd3b      	ble.n	80053c8 <_dtoa_r+0x8b8>
 8005350:	9b07      	ldr	r3, [sp, #28]
 8005352:	f1c0 001c 	rsb	r0, r0, #28
 8005356:	4481      	add	r9, r0
 8005358:	4405      	add	r5, r0
 800535a:	4403      	add	r3, r0
 800535c:	9307      	str	r3, [sp, #28]
 800535e:	f1b9 0f00 	cmp.w	r9, #0
 8005362:	dd05      	ble.n	8005370 <_dtoa_r+0x860>
 8005364:	4659      	mov	r1, fp
 8005366:	464a      	mov	r2, r9
 8005368:	4620      	mov	r0, r4
 800536a:	f000 fef3 	bl	8006154 <__lshift>
 800536e:	4683      	mov	fp, r0
 8005370:	9b07      	ldr	r3, [sp, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	dd05      	ble.n	8005382 <_dtoa_r+0x872>
 8005376:	4631      	mov	r1, r6
 8005378:	461a      	mov	r2, r3
 800537a:	4620      	mov	r0, r4
 800537c:	f000 feea 	bl	8006154 <__lshift>
 8005380:	4606      	mov	r6, r0
 8005382:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005384:	b353      	cbz	r3, 80053dc <_dtoa_r+0x8cc>
 8005386:	4631      	mov	r1, r6
 8005388:	4658      	mov	r0, fp
 800538a:	f000 ff37 	bl	80061fc <__mcmp>
 800538e:	2800      	cmp	r0, #0
 8005390:	da24      	bge.n	80053dc <_dtoa_r+0x8cc>
 8005392:	2300      	movs	r3, #0
 8005394:	4659      	mov	r1, fp
 8005396:	220a      	movs	r2, #10
 8005398:	4620      	mov	r0, r4
 800539a:	f000 fd27 	bl	8005dec <__multadd>
 800539e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053a4:	4683      	mov	fp, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 8144 	beq.w	8005634 <_dtoa_r+0xb24>
 80053ac:	2300      	movs	r3, #0
 80053ae:	4639      	mov	r1, r7
 80053b0:	220a      	movs	r2, #10
 80053b2:	4620      	mov	r0, r4
 80053b4:	f000 fd1a 	bl	8005dec <__multadd>
 80053b8:	9b04      	ldr	r3, [sp, #16]
 80053ba:	4607      	mov	r7, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	dc4d      	bgt.n	800545c <_dtoa_r+0x94c>
 80053c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	dd4a      	ble.n	800545c <_dtoa_r+0x94c>
 80053c6:	e011      	b.n	80053ec <_dtoa_r+0x8dc>
 80053c8:	d0c9      	beq.n	800535e <_dtoa_r+0x84e>
 80053ca:	9a07      	ldr	r2, [sp, #28]
 80053cc:	331c      	adds	r3, #28
 80053ce:	441a      	add	r2, r3
 80053d0:	4499      	add	r9, r3
 80053d2:	441d      	add	r5, r3
 80053d4:	4613      	mov	r3, r2
 80053d6:	e7c1      	b.n	800535c <_dtoa_r+0x84c>
 80053d8:	4603      	mov	r3, r0
 80053da:	e7f6      	b.n	80053ca <_dtoa_r+0x8ba>
 80053dc:	f1b8 0f00 	cmp.w	r8, #0
 80053e0:	dc36      	bgt.n	8005450 <_dtoa_r+0x940>
 80053e2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	dd33      	ble.n	8005450 <_dtoa_r+0x940>
 80053e8:	f8cd 8010 	str.w	r8, [sp, #16]
 80053ec:	9b04      	ldr	r3, [sp, #16]
 80053ee:	b963      	cbnz	r3, 800540a <_dtoa_r+0x8fa>
 80053f0:	4631      	mov	r1, r6
 80053f2:	2205      	movs	r2, #5
 80053f4:	4620      	mov	r0, r4
 80053f6:	f000 fcf9 	bl	8005dec <__multadd>
 80053fa:	4601      	mov	r1, r0
 80053fc:	4606      	mov	r6, r0
 80053fe:	4658      	mov	r0, fp
 8005400:	f000 fefc 	bl	80061fc <__mcmp>
 8005404:	2800      	cmp	r0, #0
 8005406:	f73f add3 	bgt.w	8004fb0 <_dtoa_r+0x4a0>
 800540a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800540c:	9d06      	ldr	r5, [sp, #24]
 800540e:	ea6f 0a03 	mvn.w	sl, r3
 8005412:	f04f 0900 	mov.w	r9, #0
 8005416:	4631      	mov	r1, r6
 8005418:	4620      	mov	r0, r4
 800541a:	f000 fcd0 	bl	8005dbe <_Bfree>
 800541e:	2f00      	cmp	r7, #0
 8005420:	f43f aebd 	beq.w	800519e <_dtoa_r+0x68e>
 8005424:	f1b9 0f00 	cmp.w	r9, #0
 8005428:	d005      	beq.n	8005436 <_dtoa_r+0x926>
 800542a:	45b9      	cmp	r9, r7
 800542c:	d003      	beq.n	8005436 <_dtoa_r+0x926>
 800542e:	4649      	mov	r1, r9
 8005430:	4620      	mov	r0, r4
 8005432:	f000 fcc4 	bl	8005dbe <_Bfree>
 8005436:	4639      	mov	r1, r7
 8005438:	4620      	mov	r0, r4
 800543a:	f000 fcc0 	bl	8005dbe <_Bfree>
 800543e:	e6ae      	b.n	800519e <_dtoa_r+0x68e>
 8005440:	2600      	movs	r6, #0
 8005442:	4637      	mov	r7, r6
 8005444:	e7e1      	b.n	800540a <_dtoa_r+0x8fa>
 8005446:	46ba      	mov	sl, r7
 8005448:	4637      	mov	r7, r6
 800544a:	e5b1      	b.n	8004fb0 <_dtoa_r+0x4a0>
 800544c:	40240000 	.word	0x40240000
 8005450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005452:	f8cd 8010 	str.w	r8, [sp, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 80f3 	beq.w	8005642 <_dtoa_r+0xb32>
 800545c:	2d00      	cmp	r5, #0
 800545e:	dd05      	ble.n	800546c <_dtoa_r+0x95c>
 8005460:	4639      	mov	r1, r7
 8005462:	462a      	mov	r2, r5
 8005464:	4620      	mov	r0, r4
 8005466:	f000 fe75 	bl	8006154 <__lshift>
 800546a:	4607      	mov	r7, r0
 800546c:	9b08      	ldr	r3, [sp, #32]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d04c      	beq.n	800550c <_dtoa_r+0x9fc>
 8005472:	6879      	ldr	r1, [r7, #4]
 8005474:	4620      	mov	r0, r4
 8005476:	f000 fc6e 	bl	8005d56 <_Balloc>
 800547a:	4605      	mov	r5, r0
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	f107 010c 	add.w	r1, r7, #12
 8005482:	3202      	adds	r2, #2
 8005484:	0092      	lsls	r2, r2, #2
 8005486:	300c      	adds	r0, #12
 8005488:	f000 fc5a 	bl	8005d40 <memcpy>
 800548c:	2201      	movs	r2, #1
 800548e:	4629      	mov	r1, r5
 8005490:	4620      	mov	r0, r4
 8005492:	f000 fe5f 	bl	8006154 <__lshift>
 8005496:	46b9      	mov	r9, r7
 8005498:	4607      	mov	r7, r0
 800549a:	9b06      	ldr	r3, [sp, #24]
 800549c:	9307      	str	r3, [sp, #28]
 800549e:	9b02      	ldr	r3, [sp, #8]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	9308      	str	r3, [sp, #32]
 80054a6:	4631      	mov	r1, r6
 80054a8:	4658      	mov	r0, fp
 80054aa:	f7ff faa3 	bl	80049f4 <quorem>
 80054ae:	4649      	mov	r1, r9
 80054b0:	4605      	mov	r5, r0
 80054b2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80054b6:	4658      	mov	r0, fp
 80054b8:	f000 fea0 	bl	80061fc <__mcmp>
 80054bc:	463a      	mov	r2, r7
 80054be:	9002      	str	r0, [sp, #8]
 80054c0:	4631      	mov	r1, r6
 80054c2:	4620      	mov	r0, r4
 80054c4:	f000 feb4 	bl	8006230 <__mdiff>
 80054c8:	68c3      	ldr	r3, [r0, #12]
 80054ca:	4602      	mov	r2, r0
 80054cc:	bb03      	cbnz	r3, 8005510 <_dtoa_r+0xa00>
 80054ce:	4601      	mov	r1, r0
 80054d0:	9009      	str	r0, [sp, #36]	; 0x24
 80054d2:	4658      	mov	r0, fp
 80054d4:	f000 fe92 	bl	80061fc <__mcmp>
 80054d8:	4603      	mov	r3, r0
 80054da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054dc:	4611      	mov	r1, r2
 80054de:	4620      	mov	r0, r4
 80054e0:	9309      	str	r3, [sp, #36]	; 0x24
 80054e2:	f000 fc6c 	bl	8005dbe <_Bfree>
 80054e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054e8:	b9a3      	cbnz	r3, 8005514 <_dtoa_r+0xa04>
 80054ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80054ec:	b992      	cbnz	r2, 8005514 <_dtoa_r+0xa04>
 80054ee:	9a08      	ldr	r2, [sp, #32]
 80054f0:	b982      	cbnz	r2, 8005514 <_dtoa_r+0xa04>
 80054f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80054f6:	d029      	beq.n	800554c <_dtoa_r+0xa3c>
 80054f8:	9b02      	ldr	r3, [sp, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	dd01      	ble.n	8005502 <_dtoa_r+0x9f2>
 80054fe:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005502:	9b07      	ldr	r3, [sp, #28]
 8005504:	1c5d      	adds	r5, r3, #1
 8005506:	f883 8000 	strb.w	r8, [r3]
 800550a:	e784      	b.n	8005416 <_dtoa_r+0x906>
 800550c:	4638      	mov	r0, r7
 800550e:	e7c2      	b.n	8005496 <_dtoa_r+0x986>
 8005510:	2301      	movs	r3, #1
 8005512:	e7e3      	b.n	80054dc <_dtoa_r+0x9cc>
 8005514:	9a02      	ldr	r2, [sp, #8]
 8005516:	2a00      	cmp	r2, #0
 8005518:	db04      	blt.n	8005524 <_dtoa_r+0xa14>
 800551a:	d123      	bne.n	8005564 <_dtoa_r+0xa54>
 800551c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800551e:	bb0a      	cbnz	r2, 8005564 <_dtoa_r+0xa54>
 8005520:	9a08      	ldr	r2, [sp, #32]
 8005522:	b9fa      	cbnz	r2, 8005564 <_dtoa_r+0xa54>
 8005524:	2b00      	cmp	r3, #0
 8005526:	ddec      	ble.n	8005502 <_dtoa_r+0x9f2>
 8005528:	4659      	mov	r1, fp
 800552a:	2201      	movs	r2, #1
 800552c:	4620      	mov	r0, r4
 800552e:	f000 fe11 	bl	8006154 <__lshift>
 8005532:	4631      	mov	r1, r6
 8005534:	4683      	mov	fp, r0
 8005536:	f000 fe61 	bl	80061fc <__mcmp>
 800553a:	2800      	cmp	r0, #0
 800553c:	dc03      	bgt.n	8005546 <_dtoa_r+0xa36>
 800553e:	d1e0      	bne.n	8005502 <_dtoa_r+0x9f2>
 8005540:	f018 0f01 	tst.w	r8, #1
 8005544:	d0dd      	beq.n	8005502 <_dtoa_r+0x9f2>
 8005546:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800554a:	d1d8      	bne.n	80054fe <_dtoa_r+0x9ee>
 800554c:	9b07      	ldr	r3, [sp, #28]
 800554e:	9a07      	ldr	r2, [sp, #28]
 8005550:	1c5d      	adds	r5, r3, #1
 8005552:	2339      	movs	r3, #57	; 0x39
 8005554:	7013      	strb	r3, [r2, #0]
 8005556:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800555a:	1e6a      	subs	r2, r5, #1
 800555c:	2b39      	cmp	r3, #57	; 0x39
 800555e:	d04d      	beq.n	80055fc <_dtoa_r+0xaec>
 8005560:	3301      	adds	r3, #1
 8005562:	e052      	b.n	800560a <_dtoa_r+0xafa>
 8005564:	9a07      	ldr	r2, [sp, #28]
 8005566:	2b00      	cmp	r3, #0
 8005568:	f102 0501 	add.w	r5, r2, #1
 800556c:	dd06      	ble.n	800557c <_dtoa_r+0xa6c>
 800556e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005572:	d0eb      	beq.n	800554c <_dtoa_r+0xa3c>
 8005574:	f108 0801 	add.w	r8, r8, #1
 8005578:	9b07      	ldr	r3, [sp, #28]
 800557a:	e7c4      	b.n	8005506 <_dtoa_r+0x9f6>
 800557c:	9b06      	ldr	r3, [sp, #24]
 800557e:	9a04      	ldr	r2, [sp, #16]
 8005580:	1aeb      	subs	r3, r5, r3
 8005582:	4293      	cmp	r3, r2
 8005584:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005588:	d021      	beq.n	80055ce <_dtoa_r+0xabe>
 800558a:	4659      	mov	r1, fp
 800558c:	2300      	movs	r3, #0
 800558e:	220a      	movs	r2, #10
 8005590:	4620      	mov	r0, r4
 8005592:	f000 fc2b 	bl	8005dec <__multadd>
 8005596:	45b9      	cmp	r9, r7
 8005598:	4683      	mov	fp, r0
 800559a:	f04f 0300 	mov.w	r3, #0
 800559e:	f04f 020a 	mov.w	r2, #10
 80055a2:	4649      	mov	r1, r9
 80055a4:	4620      	mov	r0, r4
 80055a6:	d105      	bne.n	80055b4 <_dtoa_r+0xaa4>
 80055a8:	f000 fc20 	bl	8005dec <__multadd>
 80055ac:	4681      	mov	r9, r0
 80055ae:	4607      	mov	r7, r0
 80055b0:	9507      	str	r5, [sp, #28]
 80055b2:	e778      	b.n	80054a6 <_dtoa_r+0x996>
 80055b4:	f000 fc1a 	bl	8005dec <__multadd>
 80055b8:	4639      	mov	r1, r7
 80055ba:	4681      	mov	r9, r0
 80055bc:	2300      	movs	r3, #0
 80055be:	220a      	movs	r2, #10
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 fc13 	bl	8005dec <__multadd>
 80055c6:	4607      	mov	r7, r0
 80055c8:	e7f2      	b.n	80055b0 <_dtoa_r+0xaa0>
 80055ca:	f04f 0900 	mov.w	r9, #0
 80055ce:	4659      	mov	r1, fp
 80055d0:	2201      	movs	r2, #1
 80055d2:	4620      	mov	r0, r4
 80055d4:	f000 fdbe 	bl	8006154 <__lshift>
 80055d8:	4631      	mov	r1, r6
 80055da:	4683      	mov	fp, r0
 80055dc:	f000 fe0e 	bl	80061fc <__mcmp>
 80055e0:	2800      	cmp	r0, #0
 80055e2:	dcb8      	bgt.n	8005556 <_dtoa_r+0xa46>
 80055e4:	d102      	bne.n	80055ec <_dtoa_r+0xadc>
 80055e6:	f018 0f01 	tst.w	r8, #1
 80055ea:	d1b4      	bne.n	8005556 <_dtoa_r+0xa46>
 80055ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055f0:	1e6a      	subs	r2, r5, #1
 80055f2:	2b30      	cmp	r3, #48	; 0x30
 80055f4:	f47f af0f 	bne.w	8005416 <_dtoa_r+0x906>
 80055f8:	4615      	mov	r5, r2
 80055fa:	e7f7      	b.n	80055ec <_dtoa_r+0xadc>
 80055fc:	9b06      	ldr	r3, [sp, #24]
 80055fe:	4293      	cmp	r3, r2
 8005600:	d105      	bne.n	800560e <_dtoa_r+0xafe>
 8005602:	2331      	movs	r3, #49	; 0x31
 8005604:	9a06      	ldr	r2, [sp, #24]
 8005606:	f10a 0a01 	add.w	sl, sl, #1
 800560a:	7013      	strb	r3, [r2, #0]
 800560c:	e703      	b.n	8005416 <_dtoa_r+0x906>
 800560e:	4615      	mov	r5, r2
 8005610:	e7a1      	b.n	8005556 <_dtoa_r+0xa46>
 8005612:	4b17      	ldr	r3, [pc, #92]	; (8005670 <_dtoa_r+0xb60>)
 8005614:	f7ff bae1 	b.w	8004bda <_dtoa_r+0xca>
 8005618:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800561a:	2b00      	cmp	r3, #0
 800561c:	f47f aabb 	bne.w	8004b96 <_dtoa_r+0x86>
 8005620:	4b14      	ldr	r3, [pc, #80]	; (8005674 <_dtoa_r+0xb64>)
 8005622:	f7ff bada 	b.w	8004bda <_dtoa_r+0xca>
 8005626:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005628:	2b01      	cmp	r3, #1
 800562a:	f77f ae3f 	ble.w	80052ac <_dtoa_r+0x79c>
 800562e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005630:	9308      	str	r3, [sp, #32]
 8005632:	e653      	b.n	80052dc <_dtoa_r+0x7cc>
 8005634:	9b04      	ldr	r3, [sp, #16]
 8005636:	2b00      	cmp	r3, #0
 8005638:	dc03      	bgt.n	8005642 <_dtoa_r+0xb32>
 800563a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800563c:	2b02      	cmp	r3, #2
 800563e:	f73f aed5 	bgt.w	80053ec <_dtoa_r+0x8dc>
 8005642:	9d06      	ldr	r5, [sp, #24]
 8005644:	4631      	mov	r1, r6
 8005646:	4658      	mov	r0, fp
 8005648:	f7ff f9d4 	bl	80049f4 <quorem>
 800564c:	9b06      	ldr	r3, [sp, #24]
 800564e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005652:	f805 8b01 	strb.w	r8, [r5], #1
 8005656:	9a04      	ldr	r2, [sp, #16]
 8005658:	1aeb      	subs	r3, r5, r3
 800565a:	429a      	cmp	r2, r3
 800565c:	ddb5      	ble.n	80055ca <_dtoa_r+0xaba>
 800565e:	4659      	mov	r1, fp
 8005660:	2300      	movs	r3, #0
 8005662:	220a      	movs	r2, #10
 8005664:	4620      	mov	r0, r4
 8005666:	f000 fbc1 	bl	8005dec <__multadd>
 800566a:	4683      	mov	fp, r0
 800566c:	e7ea      	b.n	8005644 <_dtoa_r+0xb34>
 800566e:	bf00      	nop
 8005670:	08006abe 	.word	0x08006abe
 8005674:	08006b38 	.word	0x08006b38

08005678 <rshift>:
 8005678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800567a:	6906      	ldr	r6, [r0, #16]
 800567c:	114b      	asrs	r3, r1, #5
 800567e:	429e      	cmp	r6, r3
 8005680:	f100 0414 	add.w	r4, r0, #20
 8005684:	dd31      	ble.n	80056ea <rshift+0x72>
 8005686:	f011 011f 	ands.w	r1, r1, #31
 800568a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800568e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005692:	d108      	bne.n	80056a6 <rshift+0x2e>
 8005694:	4621      	mov	r1, r4
 8005696:	42b2      	cmp	r2, r6
 8005698:	460b      	mov	r3, r1
 800569a:	d211      	bcs.n	80056c0 <rshift+0x48>
 800569c:	f852 3b04 	ldr.w	r3, [r2], #4
 80056a0:	f841 3b04 	str.w	r3, [r1], #4
 80056a4:	e7f7      	b.n	8005696 <rshift+0x1e>
 80056a6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80056aa:	4623      	mov	r3, r4
 80056ac:	f1c1 0c20 	rsb	ip, r1, #32
 80056b0:	40cd      	lsrs	r5, r1
 80056b2:	3204      	adds	r2, #4
 80056b4:	42b2      	cmp	r2, r6
 80056b6:	4617      	mov	r7, r2
 80056b8:	d30d      	bcc.n	80056d6 <rshift+0x5e>
 80056ba:	601d      	str	r5, [r3, #0]
 80056bc:	b105      	cbz	r5, 80056c0 <rshift+0x48>
 80056be:	3304      	adds	r3, #4
 80056c0:	42a3      	cmp	r3, r4
 80056c2:	eba3 0204 	sub.w	r2, r3, r4
 80056c6:	bf08      	it	eq
 80056c8:	2300      	moveq	r3, #0
 80056ca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80056ce:	6102      	str	r2, [r0, #16]
 80056d0:	bf08      	it	eq
 80056d2:	6143      	streq	r3, [r0, #20]
 80056d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056d6:	683f      	ldr	r7, [r7, #0]
 80056d8:	fa07 f70c 	lsl.w	r7, r7, ip
 80056dc:	433d      	orrs	r5, r7
 80056de:	f843 5b04 	str.w	r5, [r3], #4
 80056e2:	f852 5b04 	ldr.w	r5, [r2], #4
 80056e6:	40cd      	lsrs	r5, r1
 80056e8:	e7e4      	b.n	80056b4 <rshift+0x3c>
 80056ea:	4623      	mov	r3, r4
 80056ec:	e7e8      	b.n	80056c0 <rshift+0x48>

080056ee <__hexdig_fun>:
 80056ee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80056f2:	2b09      	cmp	r3, #9
 80056f4:	d802      	bhi.n	80056fc <__hexdig_fun+0xe>
 80056f6:	3820      	subs	r0, #32
 80056f8:	b2c0      	uxtb	r0, r0
 80056fa:	4770      	bx	lr
 80056fc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005700:	2b05      	cmp	r3, #5
 8005702:	d801      	bhi.n	8005708 <__hexdig_fun+0x1a>
 8005704:	3847      	subs	r0, #71	; 0x47
 8005706:	e7f7      	b.n	80056f8 <__hexdig_fun+0xa>
 8005708:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800570c:	2b05      	cmp	r3, #5
 800570e:	d801      	bhi.n	8005714 <__hexdig_fun+0x26>
 8005710:	3827      	subs	r0, #39	; 0x27
 8005712:	e7f1      	b.n	80056f8 <__hexdig_fun+0xa>
 8005714:	2000      	movs	r0, #0
 8005716:	4770      	bx	lr

08005718 <__gethex>:
 8005718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	b08b      	sub	sp, #44	; 0x2c
 800571e:	9002      	str	r0, [sp, #8]
 8005720:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005722:	468a      	mov	sl, r1
 8005724:	4690      	mov	r8, r2
 8005726:	9306      	str	r3, [sp, #24]
 8005728:	f000 fad1 	bl	8005cce <__localeconv_l>
 800572c:	6803      	ldr	r3, [r0, #0]
 800572e:	f04f 0b00 	mov.w	fp, #0
 8005732:	4618      	mov	r0, r3
 8005734:	9303      	str	r3, [sp, #12]
 8005736:	f7fa fd0b 	bl	8000150 <strlen>
 800573a:	9b03      	ldr	r3, [sp, #12]
 800573c:	9001      	str	r0, [sp, #4]
 800573e:	4403      	add	r3, r0
 8005740:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005744:	9307      	str	r3, [sp, #28]
 8005746:	f8da 3000 	ldr.w	r3, [sl]
 800574a:	3302      	adds	r3, #2
 800574c:	461f      	mov	r7, r3
 800574e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005752:	2830      	cmp	r0, #48	; 0x30
 8005754:	d06c      	beq.n	8005830 <__gethex+0x118>
 8005756:	f7ff ffca 	bl	80056ee <__hexdig_fun>
 800575a:	4604      	mov	r4, r0
 800575c:	2800      	cmp	r0, #0
 800575e:	d16a      	bne.n	8005836 <__gethex+0x11e>
 8005760:	9a01      	ldr	r2, [sp, #4]
 8005762:	9903      	ldr	r1, [sp, #12]
 8005764:	4638      	mov	r0, r7
 8005766:	f001 f905 	bl	8006974 <strncmp>
 800576a:	2800      	cmp	r0, #0
 800576c:	d166      	bne.n	800583c <__gethex+0x124>
 800576e:	9b01      	ldr	r3, [sp, #4]
 8005770:	5cf8      	ldrb	r0, [r7, r3]
 8005772:	18fe      	adds	r6, r7, r3
 8005774:	f7ff ffbb 	bl	80056ee <__hexdig_fun>
 8005778:	2800      	cmp	r0, #0
 800577a:	d062      	beq.n	8005842 <__gethex+0x12a>
 800577c:	4633      	mov	r3, r6
 800577e:	7818      	ldrb	r0, [r3, #0]
 8005780:	461f      	mov	r7, r3
 8005782:	2830      	cmp	r0, #48	; 0x30
 8005784:	f103 0301 	add.w	r3, r3, #1
 8005788:	d0f9      	beq.n	800577e <__gethex+0x66>
 800578a:	f7ff ffb0 	bl	80056ee <__hexdig_fun>
 800578e:	fab0 f580 	clz	r5, r0
 8005792:	4634      	mov	r4, r6
 8005794:	f04f 0b01 	mov.w	fp, #1
 8005798:	096d      	lsrs	r5, r5, #5
 800579a:	463a      	mov	r2, r7
 800579c:	4616      	mov	r6, r2
 800579e:	7830      	ldrb	r0, [r6, #0]
 80057a0:	3201      	adds	r2, #1
 80057a2:	f7ff ffa4 	bl	80056ee <__hexdig_fun>
 80057a6:	2800      	cmp	r0, #0
 80057a8:	d1f8      	bne.n	800579c <__gethex+0x84>
 80057aa:	9a01      	ldr	r2, [sp, #4]
 80057ac:	9903      	ldr	r1, [sp, #12]
 80057ae:	4630      	mov	r0, r6
 80057b0:	f001 f8e0 	bl	8006974 <strncmp>
 80057b4:	b950      	cbnz	r0, 80057cc <__gethex+0xb4>
 80057b6:	b954      	cbnz	r4, 80057ce <__gethex+0xb6>
 80057b8:	9b01      	ldr	r3, [sp, #4]
 80057ba:	18f4      	adds	r4, r6, r3
 80057bc:	4622      	mov	r2, r4
 80057be:	4616      	mov	r6, r2
 80057c0:	7830      	ldrb	r0, [r6, #0]
 80057c2:	3201      	adds	r2, #1
 80057c4:	f7ff ff93 	bl	80056ee <__hexdig_fun>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	d1f8      	bne.n	80057be <__gethex+0xa6>
 80057cc:	b10c      	cbz	r4, 80057d2 <__gethex+0xba>
 80057ce:	1ba4      	subs	r4, r4, r6
 80057d0:	00a4      	lsls	r4, r4, #2
 80057d2:	7833      	ldrb	r3, [r6, #0]
 80057d4:	2b50      	cmp	r3, #80	; 0x50
 80057d6:	d001      	beq.n	80057dc <__gethex+0xc4>
 80057d8:	2b70      	cmp	r3, #112	; 0x70
 80057da:	d140      	bne.n	800585e <__gethex+0x146>
 80057dc:	7873      	ldrb	r3, [r6, #1]
 80057de:	2b2b      	cmp	r3, #43	; 0x2b
 80057e0:	d031      	beq.n	8005846 <__gethex+0x12e>
 80057e2:	2b2d      	cmp	r3, #45	; 0x2d
 80057e4:	d033      	beq.n	800584e <__gethex+0x136>
 80057e6:	f04f 0900 	mov.w	r9, #0
 80057ea:	1c71      	adds	r1, r6, #1
 80057ec:	7808      	ldrb	r0, [r1, #0]
 80057ee:	f7ff ff7e 	bl	80056ee <__hexdig_fun>
 80057f2:	1e43      	subs	r3, r0, #1
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b18      	cmp	r3, #24
 80057f8:	d831      	bhi.n	800585e <__gethex+0x146>
 80057fa:	f1a0 0210 	sub.w	r2, r0, #16
 80057fe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005802:	f7ff ff74 	bl	80056ee <__hexdig_fun>
 8005806:	1e43      	subs	r3, r0, #1
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b18      	cmp	r3, #24
 800580c:	d922      	bls.n	8005854 <__gethex+0x13c>
 800580e:	f1b9 0f00 	cmp.w	r9, #0
 8005812:	d000      	beq.n	8005816 <__gethex+0xfe>
 8005814:	4252      	negs	r2, r2
 8005816:	4414      	add	r4, r2
 8005818:	f8ca 1000 	str.w	r1, [sl]
 800581c:	b30d      	cbz	r5, 8005862 <__gethex+0x14a>
 800581e:	f1bb 0f00 	cmp.w	fp, #0
 8005822:	bf0c      	ite	eq
 8005824:	2706      	moveq	r7, #6
 8005826:	2700      	movne	r7, #0
 8005828:	4638      	mov	r0, r7
 800582a:	b00b      	add	sp, #44	; 0x2c
 800582c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005830:	f10b 0b01 	add.w	fp, fp, #1
 8005834:	e78a      	b.n	800574c <__gethex+0x34>
 8005836:	2500      	movs	r5, #0
 8005838:	462c      	mov	r4, r5
 800583a:	e7ae      	b.n	800579a <__gethex+0x82>
 800583c:	463e      	mov	r6, r7
 800583e:	2501      	movs	r5, #1
 8005840:	e7c7      	b.n	80057d2 <__gethex+0xba>
 8005842:	4604      	mov	r4, r0
 8005844:	e7fb      	b.n	800583e <__gethex+0x126>
 8005846:	f04f 0900 	mov.w	r9, #0
 800584a:	1cb1      	adds	r1, r6, #2
 800584c:	e7ce      	b.n	80057ec <__gethex+0xd4>
 800584e:	f04f 0901 	mov.w	r9, #1
 8005852:	e7fa      	b.n	800584a <__gethex+0x132>
 8005854:	230a      	movs	r3, #10
 8005856:	fb03 0202 	mla	r2, r3, r2, r0
 800585a:	3a10      	subs	r2, #16
 800585c:	e7cf      	b.n	80057fe <__gethex+0xe6>
 800585e:	4631      	mov	r1, r6
 8005860:	e7da      	b.n	8005818 <__gethex+0x100>
 8005862:	4629      	mov	r1, r5
 8005864:	1bf3      	subs	r3, r6, r7
 8005866:	3b01      	subs	r3, #1
 8005868:	2b07      	cmp	r3, #7
 800586a:	dc49      	bgt.n	8005900 <__gethex+0x1e8>
 800586c:	9802      	ldr	r0, [sp, #8]
 800586e:	f000 fa72 	bl	8005d56 <_Balloc>
 8005872:	f04f 0b00 	mov.w	fp, #0
 8005876:	4605      	mov	r5, r0
 8005878:	46da      	mov	sl, fp
 800587a:	9b01      	ldr	r3, [sp, #4]
 800587c:	f100 0914 	add.w	r9, r0, #20
 8005880:	f1c3 0301 	rsb	r3, r3, #1
 8005884:	f8cd 9010 	str.w	r9, [sp, #16]
 8005888:	9308      	str	r3, [sp, #32]
 800588a:	42b7      	cmp	r7, r6
 800588c:	d33b      	bcc.n	8005906 <__gethex+0x1ee>
 800588e:	9804      	ldr	r0, [sp, #16]
 8005890:	f840 ab04 	str.w	sl, [r0], #4
 8005894:	eba0 0009 	sub.w	r0, r0, r9
 8005898:	1080      	asrs	r0, r0, #2
 800589a:	6128      	str	r0, [r5, #16]
 800589c:	0147      	lsls	r7, r0, #5
 800589e:	4650      	mov	r0, sl
 80058a0:	f000 fb1d 	bl	8005ede <__hi0bits>
 80058a4:	f8d8 6000 	ldr.w	r6, [r8]
 80058a8:	1a3f      	subs	r7, r7, r0
 80058aa:	42b7      	cmp	r7, r6
 80058ac:	dd64      	ble.n	8005978 <__gethex+0x260>
 80058ae:	1bbf      	subs	r7, r7, r6
 80058b0:	4639      	mov	r1, r7
 80058b2:	4628      	mov	r0, r5
 80058b4:	f000 fe27 	bl	8006506 <__any_on>
 80058b8:	4682      	mov	sl, r0
 80058ba:	b178      	cbz	r0, 80058dc <__gethex+0x1c4>
 80058bc:	f04f 0a01 	mov.w	sl, #1
 80058c0:	1e7b      	subs	r3, r7, #1
 80058c2:	1159      	asrs	r1, r3, #5
 80058c4:	f003 021f 	and.w	r2, r3, #31
 80058c8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80058cc:	fa0a f202 	lsl.w	r2, sl, r2
 80058d0:	420a      	tst	r2, r1
 80058d2:	d003      	beq.n	80058dc <__gethex+0x1c4>
 80058d4:	4553      	cmp	r3, sl
 80058d6:	dc46      	bgt.n	8005966 <__gethex+0x24e>
 80058d8:	f04f 0a02 	mov.w	sl, #2
 80058dc:	4639      	mov	r1, r7
 80058de:	4628      	mov	r0, r5
 80058e0:	f7ff feca 	bl	8005678 <rshift>
 80058e4:	443c      	add	r4, r7
 80058e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80058ea:	42a3      	cmp	r3, r4
 80058ec:	da52      	bge.n	8005994 <__gethex+0x27c>
 80058ee:	4629      	mov	r1, r5
 80058f0:	9802      	ldr	r0, [sp, #8]
 80058f2:	f000 fa64 	bl	8005dbe <_Bfree>
 80058f6:	2300      	movs	r3, #0
 80058f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80058fa:	27a3      	movs	r7, #163	; 0xa3
 80058fc:	6013      	str	r3, [r2, #0]
 80058fe:	e793      	b.n	8005828 <__gethex+0x110>
 8005900:	3101      	adds	r1, #1
 8005902:	105b      	asrs	r3, r3, #1
 8005904:	e7b0      	b.n	8005868 <__gethex+0x150>
 8005906:	1e73      	subs	r3, r6, #1
 8005908:	9305      	str	r3, [sp, #20]
 800590a:	9a07      	ldr	r2, [sp, #28]
 800590c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005910:	4293      	cmp	r3, r2
 8005912:	d018      	beq.n	8005946 <__gethex+0x22e>
 8005914:	f1bb 0f20 	cmp.w	fp, #32
 8005918:	d107      	bne.n	800592a <__gethex+0x212>
 800591a:	9b04      	ldr	r3, [sp, #16]
 800591c:	f8c3 a000 	str.w	sl, [r3]
 8005920:	f04f 0a00 	mov.w	sl, #0
 8005924:	46d3      	mov	fp, sl
 8005926:	3304      	adds	r3, #4
 8005928:	9304      	str	r3, [sp, #16]
 800592a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800592e:	f7ff fede 	bl	80056ee <__hexdig_fun>
 8005932:	f000 000f 	and.w	r0, r0, #15
 8005936:	fa00 f00b 	lsl.w	r0, r0, fp
 800593a:	ea4a 0a00 	orr.w	sl, sl, r0
 800593e:	f10b 0b04 	add.w	fp, fp, #4
 8005942:	9b05      	ldr	r3, [sp, #20]
 8005944:	e00d      	b.n	8005962 <__gethex+0x24a>
 8005946:	9b05      	ldr	r3, [sp, #20]
 8005948:	9a08      	ldr	r2, [sp, #32]
 800594a:	4413      	add	r3, r2
 800594c:	42bb      	cmp	r3, r7
 800594e:	d3e1      	bcc.n	8005914 <__gethex+0x1fc>
 8005950:	4618      	mov	r0, r3
 8005952:	9a01      	ldr	r2, [sp, #4]
 8005954:	9903      	ldr	r1, [sp, #12]
 8005956:	9309      	str	r3, [sp, #36]	; 0x24
 8005958:	f001 f80c 	bl	8006974 <strncmp>
 800595c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800595e:	2800      	cmp	r0, #0
 8005960:	d1d8      	bne.n	8005914 <__gethex+0x1fc>
 8005962:	461e      	mov	r6, r3
 8005964:	e791      	b.n	800588a <__gethex+0x172>
 8005966:	1eb9      	subs	r1, r7, #2
 8005968:	4628      	mov	r0, r5
 800596a:	f000 fdcc 	bl	8006506 <__any_on>
 800596e:	2800      	cmp	r0, #0
 8005970:	d0b2      	beq.n	80058d8 <__gethex+0x1c0>
 8005972:	f04f 0a03 	mov.w	sl, #3
 8005976:	e7b1      	b.n	80058dc <__gethex+0x1c4>
 8005978:	da09      	bge.n	800598e <__gethex+0x276>
 800597a:	1bf7      	subs	r7, r6, r7
 800597c:	4629      	mov	r1, r5
 800597e:	463a      	mov	r2, r7
 8005980:	9802      	ldr	r0, [sp, #8]
 8005982:	f000 fbe7 	bl	8006154 <__lshift>
 8005986:	4605      	mov	r5, r0
 8005988:	1be4      	subs	r4, r4, r7
 800598a:	f100 0914 	add.w	r9, r0, #20
 800598e:	f04f 0a00 	mov.w	sl, #0
 8005992:	e7a8      	b.n	80058e6 <__gethex+0x1ce>
 8005994:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005998:	42a0      	cmp	r0, r4
 800599a:	dd6b      	ble.n	8005a74 <__gethex+0x35c>
 800599c:	1b04      	subs	r4, r0, r4
 800599e:	42a6      	cmp	r6, r4
 80059a0:	dc2e      	bgt.n	8005a00 <__gethex+0x2e8>
 80059a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d022      	beq.n	80059f0 <__gethex+0x2d8>
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d024      	beq.n	80059f8 <__gethex+0x2e0>
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d115      	bne.n	80059de <__gethex+0x2c6>
 80059b2:	42a6      	cmp	r6, r4
 80059b4:	d113      	bne.n	80059de <__gethex+0x2c6>
 80059b6:	2e01      	cmp	r6, #1
 80059b8:	dc0b      	bgt.n	80059d2 <__gethex+0x2ba>
 80059ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80059be:	9a06      	ldr	r2, [sp, #24]
 80059c0:	2762      	movs	r7, #98	; 0x62
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	2301      	movs	r3, #1
 80059c6:	612b      	str	r3, [r5, #16]
 80059c8:	f8c9 3000 	str.w	r3, [r9]
 80059cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80059ce:	601d      	str	r5, [r3, #0]
 80059d0:	e72a      	b.n	8005828 <__gethex+0x110>
 80059d2:	1e71      	subs	r1, r6, #1
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 fd96 	bl	8006506 <__any_on>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d1ed      	bne.n	80059ba <__gethex+0x2a2>
 80059de:	4629      	mov	r1, r5
 80059e0:	9802      	ldr	r0, [sp, #8]
 80059e2:	f000 f9ec 	bl	8005dbe <_Bfree>
 80059e6:	2300      	movs	r3, #0
 80059e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80059ea:	2750      	movs	r7, #80	; 0x50
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	e71b      	b.n	8005828 <__gethex+0x110>
 80059f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0e1      	beq.n	80059ba <__gethex+0x2a2>
 80059f6:	e7f2      	b.n	80059de <__gethex+0x2c6>
 80059f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1dd      	bne.n	80059ba <__gethex+0x2a2>
 80059fe:	e7ee      	b.n	80059de <__gethex+0x2c6>
 8005a00:	1e67      	subs	r7, r4, #1
 8005a02:	f1ba 0f00 	cmp.w	sl, #0
 8005a06:	d132      	bne.n	8005a6e <__gethex+0x356>
 8005a08:	b127      	cbz	r7, 8005a14 <__gethex+0x2fc>
 8005a0a:	4639      	mov	r1, r7
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	f000 fd7a 	bl	8006506 <__any_on>
 8005a12:	4682      	mov	sl, r0
 8005a14:	2301      	movs	r3, #1
 8005a16:	117a      	asrs	r2, r7, #5
 8005a18:	f007 071f 	and.w	r7, r7, #31
 8005a1c:	fa03 f707 	lsl.w	r7, r3, r7
 8005a20:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005a24:	4621      	mov	r1, r4
 8005a26:	421f      	tst	r7, r3
 8005a28:	f04f 0702 	mov.w	r7, #2
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	bf18      	it	ne
 8005a30:	f04a 0a02 	orrne.w	sl, sl, #2
 8005a34:	1b36      	subs	r6, r6, r4
 8005a36:	f7ff fe1f 	bl	8005678 <rshift>
 8005a3a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005a3e:	f1ba 0f00 	cmp.w	sl, #0
 8005a42:	d048      	beq.n	8005ad6 <__gethex+0x3be>
 8005a44:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d015      	beq.n	8005a78 <__gethex+0x360>
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d017      	beq.n	8005a80 <__gethex+0x368>
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d109      	bne.n	8005a68 <__gethex+0x350>
 8005a54:	f01a 0f02 	tst.w	sl, #2
 8005a58:	d006      	beq.n	8005a68 <__gethex+0x350>
 8005a5a:	f8d9 3000 	ldr.w	r3, [r9]
 8005a5e:	ea4a 0a03 	orr.w	sl, sl, r3
 8005a62:	f01a 0f01 	tst.w	sl, #1
 8005a66:	d10e      	bne.n	8005a86 <__gethex+0x36e>
 8005a68:	f047 0710 	orr.w	r7, r7, #16
 8005a6c:	e033      	b.n	8005ad6 <__gethex+0x3be>
 8005a6e:	f04f 0a01 	mov.w	sl, #1
 8005a72:	e7cf      	b.n	8005a14 <__gethex+0x2fc>
 8005a74:	2701      	movs	r7, #1
 8005a76:	e7e2      	b.n	8005a3e <__gethex+0x326>
 8005a78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a7a:	f1c3 0301 	rsb	r3, r3, #1
 8005a7e:	9315      	str	r3, [sp, #84]	; 0x54
 8005a80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0f0      	beq.n	8005a68 <__gethex+0x350>
 8005a86:	f04f 0c00 	mov.w	ip, #0
 8005a8a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005a8e:	f105 0314 	add.w	r3, r5, #20
 8005a92:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005a96:	eb03 010a 	add.w	r1, r3, sl
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aa0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005aa4:	d01c      	beq.n	8005ae0 <__gethex+0x3c8>
 8005aa6:	3201      	adds	r2, #1
 8005aa8:	6002      	str	r2, [r0, #0]
 8005aaa:	2f02      	cmp	r7, #2
 8005aac:	f105 0314 	add.w	r3, r5, #20
 8005ab0:	d138      	bne.n	8005b24 <__gethex+0x40c>
 8005ab2:	f8d8 2000 	ldr.w	r2, [r8]
 8005ab6:	3a01      	subs	r2, #1
 8005ab8:	42b2      	cmp	r2, r6
 8005aba:	d10a      	bne.n	8005ad2 <__gethex+0x3ba>
 8005abc:	2201      	movs	r2, #1
 8005abe:	1171      	asrs	r1, r6, #5
 8005ac0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005ac4:	f006 061f 	and.w	r6, r6, #31
 8005ac8:	fa02 f606 	lsl.w	r6, r2, r6
 8005acc:	421e      	tst	r6, r3
 8005ace:	bf18      	it	ne
 8005ad0:	4617      	movne	r7, r2
 8005ad2:	f047 0720 	orr.w	r7, r7, #32
 8005ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ad8:	601d      	str	r5, [r3, #0]
 8005ada:	9b06      	ldr	r3, [sp, #24]
 8005adc:	601c      	str	r4, [r3, #0]
 8005ade:	e6a3      	b.n	8005828 <__gethex+0x110>
 8005ae0:	4299      	cmp	r1, r3
 8005ae2:	f843 cc04 	str.w	ip, [r3, #-4]
 8005ae6:	d8d8      	bhi.n	8005a9a <__gethex+0x382>
 8005ae8:	68ab      	ldr	r3, [r5, #8]
 8005aea:	4599      	cmp	r9, r3
 8005aec:	db12      	blt.n	8005b14 <__gethex+0x3fc>
 8005aee:	6869      	ldr	r1, [r5, #4]
 8005af0:	9802      	ldr	r0, [sp, #8]
 8005af2:	3101      	adds	r1, #1
 8005af4:	f000 f92f 	bl	8005d56 <_Balloc>
 8005af8:	4683      	mov	fp, r0
 8005afa:	692a      	ldr	r2, [r5, #16]
 8005afc:	f105 010c 	add.w	r1, r5, #12
 8005b00:	3202      	adds	r2, #2
 8005b02:	0092      	lsls	r2, r2, #2
 8005b04:	300c      	adds	r0, #12
 8005b06:	f000 f91b 	bl	8005d40 <memcpy>
 8005b0a:	4629      	mov	r1, r5
 8005b0c:	9802      	ldr	r0, [sp, #8]
 8005b0e:	f000 f956 	bl	8005dbe <_Bfree>
 8005b12:	465d      	mov	r5, fp
 8005b14:	692b      	ldr	r3, [r5, #16]
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	612a      	str	r2, [r5, #16]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005b20:	615a      	str	r2, [r3, #20]
 8005b22:	e7c2      	b.n	8005aaa <__gethex+0x392>
 8005b24:	692a      	ldr	r2, [r5, #16]
 8005b26:	454a      	cmp	r2, r9
 8005b28:	dd0b      	ble.n	8005b42 <__gethex+0x42a>
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f7ff fda3 	bl	8005678 <rshift>
 8005b32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005b36:	3401      	adds	r4, #1
 8005b38:	42a3      	cmp	r3, r4
 8005b3a:	f6ff aed8 	blt.w	80058ee <__gethex+0x1d6>
 8005b3e:	2701      	movs	r7, #1
 8005b40:	e7c7      	b.n	8005ad2 <__gethex+0x3ba>
 8005b42:	f016 061f 	ands.w	r6, r6, #31
 8005b46:	d0fa      	beq.n	8005b3e <__gethex+0x426>
 8005b48:	449a      	add	sl, r3
 8005b4a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005b4e:	f000 f9c6 	bl	8005ede <__hi0bits>
 8005b52:	f1c6 0620 	rsb	r6, r6, #32
 8005b56:	42b0      	cmp	r0, r6
 8005b58:	dbe7      	blt.n	8005b2a <__gethex+0x412>
 8005b5a:	e7f0      	b.n	8005b3e <__gethex+0x426>

08005b5c <L_shift>:
 8005b5c:	f1c2 0208 	rsb	r2, r2, #8
 8005b60:	0092      	lsls	r2, r2, #2
 8005b62:	b570      	push	{r4, r5, r6, lr}
 8005b64:	f1c2 0620 	rsb	r6, r2, #32
 8005b68:	6843      	ldr	r3, [r0, #4]
 8005b6a:	6804      	ldr	r4, [r0, #0]
 8005b6c:	fa03 f506 	lsl.w	r5, r3, r6
 8005b70:	432c      	orrs	r4, r5
 8005b72:	40d3      	lsrs	r3, r2
 8005b74:	6004      	str	r4, [r0, #0]
 8005b76:	f840 3f04 	str.w	r3, [r0, #4]!
 8005b7a:	4288      	cmp	r0, r1
 8005b7c:	d3f4      	bcc.n	8005b68 <L_shift+0xc>
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}

08005b80 <__match>:
 8005b80:	b530      	push	{r4, r5, lr}
 8005b82:	6803      	ldr	r3, [r0, #0]
 8005b84:	3301      	adds	r3, #1
 8005b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b8a:	b914      	cbnz	r4, 8005b92 <__match+0x12>
 8005b8c:	6003      	str	r3, [r0, #0]
 8005b8e:	2001      	movs	r0, #1
 8005b90:	bd30      	pop	{r4, r5, pc}
 8005b92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005b9a:	2d19      	cmp	r5, #25
 8005b9c:	bf98      	it	ls
 8005b9e:	3220      	addls	r2, #32
 8005ba0:	42a2      	cmp	r2, r4
 8005ba2:	d0f0      	beq.n	8005b86 <__match+0x6>
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	e7f3      	b.n	8005b90 <__match+0x10>

08005ba8 <__hexnan>:
 8005ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bac:	2500      	movs	r5, #0
 8005bae:	680b      	ldr	r3, [r1, #0]
 8005bb0:	4682      	mov	sl, r0
 8005bb2:	115f      	asrs	r7, r3, #5
 8005bb4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005bb8:	f013 031f 	ands.w	r3, r3, #31
 8005bbc:	bf18      	it	ne
 8005bbe:	3704      	addne	r7, #4
 8005bc0:	1f3e      	subs	r6, r7, #4
 8005bc2:	4690      	mov	r8, r2
 8005bc4:	46b1      	mov	r9, r6
 8005bc6:	4634      	mov	r4, r6
 8005bc8:	46ab      	mov	fp, r5
 8005bca:	b087      	sub	sp, #28
 8005bcc:	6801      	ldr	r1, [r0, #0]
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	f847 5c04 	str.w	r5, [r7, #-4]
 8005bd4:	9502      	str	r5, [sp, #8]
 8005bd6:	784a      	ldrb	r2, [r1, #1]
 8005bd8:	1c4b      	adds	r3, r1, #1
 8005bda:	9303      	str	r3, [sp, #12]
 8005bdc:	b342      	cbz	r2, 8005c30 <__hexnan+0x88>
 8005bde:	4610      	mov	r0, r2
 8005be0:	9105      	str	r1, [sp, #20]
 8005be2:	9204      	str	r2, [sp, #16]
 8005be4:	f7ff fd83 	bl	80056ee <__hexdig_fun>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d143      	bne.n	8005c74 <__hexnan+0xcc>
 8005bec:	9a04      	ldr	r2, [sp, #16]
 8005bee:	9905      	ldr	r1, [sp, #20]
 8005bf0:	2a20      	cmp	r2, #32
 8005bf2:	d818      	bhi.n	8005c26 <__hexnan+0x7e>
 8005bf4:	9b02      	ldr	r3, [sp, #8]
 8005bf6:	459b      	cmp	fp, r3
 8005bf8:	dd13      	ble.n	8005c22 <__hexnan+0x7a>
 8005bfa:	454c      	cmp	r4, r9
 8005bfc:	d206      	bcs.n	8005c0c <__hexnan+0x64>
 8005bfe:	2d07      	cmp	r5, #7
 8005c00:	dc04      	bgt.n	8005c0c <__hexnan+0x64>
 8005c02:	462a      	mov	r2, r5
 8005c04:	4649      	mov	r1, r9
 8005c06:	4620      	mov	r0, r4
 8005c08:	f7ff ffa8 	bl	8005b5c <L_shift>
 8005c0c:	4544      	cmp	r4, r8
 8005c0e:	d944      	bls.n	8005c9a <__hexnan+0xf2>
 8005c10:	2300      	movs	r3, #0
 8005c12:	f1a4 0904 	sub.w	r9, r4, #4
 8005c16:	f844 3c04 	str.w	r3, [r4, #-4]
 8005c1a:	461d      	mov	r5, r3
 8005c1c:	464c      	mov	r4, r9
 8005c1e:	f8cd b008 	str.w	fp, [sp, #8]
 8005c22:	9903      	ldr	r1, [sp, #12]
 8005c24:	e7d7      	b.n	8005bd6 <__hexnan+0x2e>
 8005c26:	2a29      	cmp	r2, #41	; 0x29
 8005c28:	d14a      	bne.n	8005cc0 <__hexnan+0x118>
 8005c2a:	3102      	adds	r1, #2
 8005c2c:	f8ca 1000 	str.w	r1, [sl]
 8005c30:	f1bb 0f00 	cmp.w	fp, #0
 8005c34:	d044      	beq.n	8005cc0 <__hexnan+0x118>
 8005c36:	454c      	cmp	r4, r9
 8005c38:	d206      	bcs.n	8005c48 <__hexnan+0xa0>
 8005c3a:	2d07      	cmp	r5, #7
 8005c3c:	dc04      	bgt.n	8005c48 <__hexnan+0xa0>
 8005c3e:	462a      	mov	r2, r5
 8005c40:	4649      	mov	r1, r9
 8005c42:	4620      	mov	r0, r4
 8005c44:	f7ff ff8a 	bl	8005b5c <L_shift>
 8005c48:	4544      	cmp	r4, r8
 8005c4a:	d928      	bls.n	8005c9e <__hexnan+0xf6>
 8005c4c:	4643      	mov	r3, r8
 8005c4e:	f854 2b04 	ldr.w	r2, [r4], #4
 8005c52:	42a6      	cmp	r6, r4
 8005c54:	f843 2b04 	str.w	r2, [r3], #4
 8005c58:	d2f9      	bcs.n	8005c4e <__hexnan+0xa6>
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f843 2b04 	str.w	r2, [r3], #4
 8005c60:	429e      	cmp	r6, r3
 8005c62:	d2fb      	bcs.n	8005c5c <__hexnan+0xb4>
 8005c64:	6833      	ldr	r3, [r6, #0]
 8005c66:	b91b      	cbnz	r3, 8005c70 <__hexnan+0xc8>
 8005c68:	4546      	cmp	r6, r8
 8005c6a:	d127      	bne.n	8005cbc <__hexnan+0x114>
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	6033      	str	r3, [r6, #0]
 8005c70:	2005      	movs	r0, #5
 8005c72:	e026      	b.n	8005cc2 <__hexnan+0x11a>
 8005c74:	3501      	adds	r5, #1
 8005c76:	2d08      	cmp	r5, #8
 8005c78:	f10b 0b01 	add.w	fp, fp, #1
 8005c7c:	dd06      	ble.n	8005c8c <__hexnan+0xe4>
 8005c7e:	4544      	cmp	r4, r8
 8005c80:	d9cf      	bls.n	8005c22 <__hexnan+0x7a>
 8005c82:	2300      	movs	r3, #0
 8005c84:	2501      	movs	r5, #1
 8005c86:	f844 3c04 	str.w	r3, [r4, #-4]
 8005c8a:	3c04      	subs	r4, #4
 8005c8c:	6822      	ldr	r2, [r4, #0]
 8005c8e:	f000 000f 	and.w	r0, r0, #15
 8005c92:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005c96:	6020      	str	r0, [r4, #0]
 8005c98:	e7c3      	b.n	8005c22 <__hexnan+0x7a>
 8005c9a:	2508      	movs	r5, #8
 8005c9c:	e7c1      	b.n	8005c22 <__hexnan+0x7a>
 8005c9e:	9b01      	ldr	r3, [sp, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0df      	beq.n	8005c64 <__hexnan+0xbc>
 8005ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca8:	f1c3 0320 	rsb	r3, r3, #32
 8005cac:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005cb4:	401a      	ands	r2, r3
 8005cb6:	f847 2c04 	str.w	r2, [r7, #-4]
 8005cba:	e7d3      	b.n	8005c64 <__hexnan+0xbc>
 8005cbc:	3e04      	subs	r6, #4
 8005cbe:	e7d1      	b.n	8005c64 <__hexnan+0xbc>
 8005cc0:	2004      	movs	r0, #4
 8005cc2:	b007      	add	sp, #28
 8005cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005cc8 <__locale_ctype_ptr_l>:
 8005cc8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005ccc:	4770      	bx	lr

08005cce <__localeconv_l>:
 8005cce:	30f0      	adds	r0, #240	; 0xf0
 8005cd0:	4770      	bx	lr
	...

08005cd4 <_localeconv_r>:
 8005cd4:	4b04      	ldr	r3, [pc, #16]	; (8005ce8 <_localeconv_r+0x14>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6a18      	ldr	r0, [r3, #32]
 8005cda:	4b04      	ldr	r3, [pc, #16]	; (8005cec <_localeconv_r+0x18>)
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	bf08      	it	eq
 8005ce0:	4618      	moveq	r0, r3
 8005ce2:	30f0      	adds	r0, #240	; 0xf0
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	2000000c 	.word	0x2000000c
 8005cec:	20000070 	.word	0x20000070

08005cf0 <malloc>:
 8005cf0:	4b02      	ldr	r3, [pc, #8]	; (8005cfc <malloc+0xc>)
 8005cf2:	4601      	mov	r1, r0
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	f000 bc81 	b.w	80065fc <_malloc_r>
 8005cfa:	bf00      	nop
 8005cfc:	2000000c 	.word	0x2000000c

08005d00 <__ascii_mbtowc>:
 8005d00:	b082      	sub	sp, #8
 8005d02:	b901      	cbnz	r1, 8005d06 <__ascii_mbtowc+0x6>
 8005d04:	a901      	add	r1, sp, #4
 8005d06:	b142      	cbz	r2, 8005d1a <__ascii_mbtowc+0x1a>
 8005d08:	b14b      	cbz	r3, 8005d1e <__ascii_mbtowc+0x1e>
 8005d0a:	7813      	ldrb	r3, [r2, #0]
 8005d0c:	600b      	str	r3, [r1, #0]
 8005d0e:	7812      	ldrb	r2, [r2, #0]
 8005d10:	1c10      	adds	r0, r2, #0
 8005d12:	bf18      	it	ne
 8005d14:	2001      	movne	r0, #1
 8005d16:	b002      	add	sp, #8
 8005d18:	4770      	bx	lr
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	e7fb      	b.n	8005d16 <__ascii_mbtowc+0x16>
 8005d1e:	f06f 0001 	mvn.w	r0, #1
 8005d22:	e7f8      	b.n	8005d16 <__ascii_mbtowc+0x16>

08005d24 <memchr>:
 8005d24:	b510      	push	{r4, lr}
 8005d26:	b2c9      	uxtb	r1, r1
 8005d28:	4402      	add	r2, r0
 8005d2a:	4290      	cmp	r0, r2
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	d101      	bne.n	8005d34 <memchr+0x10>
 8005d30:	2300      	movs	r3, #0
 8005d32:	e003      	b.n	8005d3c <memchr+0x18>
 8005d34:	781c      	ldrb	r4, [r3, #0]
 8005d36:	3001      	adds	r0, #1
 8005d38:	428c      	cmp	r4, r1
 8005d3a:	d1f6      	bne.n	8005d2a <memchr+0x6>
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	bd10      	pop	{r4, pc}

08005d40 <memcpy>:
 8005d40:	b510      	push	{r4, lr}
 8005d42:	1e43      	subs	r3, r0, #1
 8005d44:	440a      	add	r2, r1
 8005d46:	4291      	cmp	r1, r2
 8005d48:	d100      	bne.n	8005d4c <memcpy+0xc>
 8005d4a:	bd10      	pop	{r4, pc}
 8005d4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d54:	e7f7      	b.n	8005d46 <memcpy+0x6>

08005d56 <_Balloc>:
 8005d56:	b570      	push	{r4, r5, r6, lr}
 8005d58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	460e      	mov	r6, r1
 8005d5e:	b93d      	cbnz	r5, 8005d70 <_Balloc+0x1a>
 8005d60:	2010      	movs	r0, #16
 8005d62:	f7ff ffc5 	bl	8005cf0 <malloc>
 8005d66:	6260      	str	r0, [r4, #36]	; 0x24
 8005d68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d6c:	6005      	str	r5, [r0, #0]
 8005d6e:	60c5      	str	r5, [r0, #12]
 8005d70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005d72:	68eb      	ldr	r3, [r5, #12]
 8005d74:	b183      	cbz	r3, 8005d98 <_Balloc+0x42>
 8005d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005d7e:	b9b8      	cbnz	r0, 8005db0 <_Balloc+0x5a>
 8005d80:	2101      	movs	r1, #1
 8005d82:	fa01 f506 	lsl.w	r5, r1, r6
 8005d86:	1d6a      	adds	r2, r5, #5
 8005d88:	0092      	lsls	r2, r2, #2
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f000 fbdc 	bl	8006548 <_calloc_r>
 8005d90:	b160      	cbz	r0, 8005dac <_Balloc+0x56>
 8005d92:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005d96:	e00e      	b.n	8005db6 <_Balloc+0x60>
 8005d98:	2221      	movs	r2, #33	; 0x21
 8005d9a:	2104      	movs	r1, #4
 8005d9c:	4620      	mov	r0, r4
 8005d9e:	f000 fbd3 	bl	8006548 <_calloc_r>
 8005da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005da4:	60e8      	str	r0, [r5, #12]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e4      	bne.n	8005d76 <_Balloc+0x20>
 8005dac:	2000      	movs	r0, #0
 8005dae:	bd70      	pop	{r4, r5, r6, pc}
 8005db0:	6802      	ldr	r2, [r0, #0]
 8005db2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005db6:	2300      	movs	r3, #0
 8005db8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005dbc:	e7f7      	b.n	8005dae <_Balloc+0x58>

08005dbe <_Bfree>:
 8005dbe:	b570      	push	{r4, r5, r6, lr}
 8005dc0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	460d      	mov	r5, r1
 8005dc6:	b93c      	cbnz	r4, 8005dd8 <_Bfree+0x1a>
 8005dc8:	2010      	movs	r0, #16
 8005dca:	f7ff ff91 	bl	8005cf0 <malloc>
 8005dce:	6270      	str	r0, [r6, #36]	; 0x24
 8005dd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dd4:	6004      	str	r4, [r0, #0]
 8005dd6:	60c4      	str	r4, [r0, #12]
 8005dd8:	b13d      	cbz	r5, 8005dea <_Bfree+0x2c>
 8005dda:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005ddc:	686a      	ldr	r2, [r5, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005de4:	6029      	str	r1, [r5, #0]
 8005de6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005dea:	bd70      	pop	{r4, r5, r6, pc}

08005dec <__multadd>:
 8005dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005df0:	461f      	mov	r7, r3
 8005df2:	4606      	mov	r6, r0
 8005df4:	460c      	mov	r4, r1
 8005df6:	2300      	movs	r3, #0
 8005df8:	690d      	ldr	r5, [r1, #16]
 8005dfa:	f101 0c14 	add.w	ip, r1, #20
 8005dfe:	f8dc 0000 	ldr.w	r0, [ip]
 8005e02:	3301      	adds	r3, #1
 8005e04:	b281      	uxth	r1, r0
 8005e06:	fb02 7101 	mla	r1, r2, r1, r7
 8005e0a:	0c00      	lsrs	r0, r0, #16
 8005e0c:	0c0f      	lsrs	r7, r1, #16
 8005e0e:	fb02 7000 	mla	r0, r2, r0, r7
 8005e12:	b289      	uxth	r1, r1
 8005e14:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005e18:	429d      	cmp	r5, r3
 8005e1a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005e1e:	f84c 1b04 	str.w	r1, [ip], #4
 8005e22:	dcec      	bgt.n	8005dfe <__multadd+0x12>
 8005e24:	b1d7      	cbz	r7, 8005e5c <__multadd+0x70>
 8005e26:	68a3      	ldr	r3, [r4, #8]
 8005e28:	42ab      	cmp	r3, r5
 8005e2a:	dc12      	bgt.n	8005e52 <__multadd+0x66>
 8005e2c:	6861      	ldr	r1, [r4, #4]
 8005e2e:	4630      	mov	r0, r6
 8005e30:	3101      	adds	r1, #1
 8005e32:	f7ff ff90 	bl	8005d56 <_Balloc>
 8005e36:	4680      	mov	r8, r0
 8005e38:	6922      	ldr	r2, [r4, #16]
 8005e3a:	f104 010c 	add.w	r1, r4, #12
 8005e3e:	3202      	adds	r2, #2
 8005e40:	0092      	lsls	r2, r2, #2
 8005e42:	300c      	adds	r0, #12
 8005e44:	f7ff ff7c 	bl	8005d40 <memcpy>
 8005e48:	4621      	mov	r1, r4
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f7ff ffb7 	bl	8005dbe <_Bfree>
 8005e50:	4644      	mov	r4, r8
 8005e52:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e56:	3501      	adds	r5, #1
 8005e58:	615f      	str	r7, [r3, #20]
 8005e5a:	6125      	str	r5, [r4, #16]
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005e62 <__s2b>:
 8005e62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e66:	4615      	mov	r5, r2
 8005e68:	2209      	movs	r2, #9
 8005e6a:	461f      	mov	r7, r3
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	460c      	mov	r4, r1
 8005e70:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e74:	4606      	mov	r6, r0
 8005e76:	2201      	movs	r2, #1
 8005e78:	2100      	movs	r1, #0
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	db20      	blt.n	8005ec0 <__s2b+0x5e>
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f7ff ff69 	bl	8005d56 <_Balloc>
 8005e84:	9b08      	ldr	r3, [sp, #32]
 8005e86:	2d09      	cmp	r5, #9
 8005e88:	6143      	str	r3, [r0, #20]
 8005e8a:	f04f 0301 	mov.w	r3, #1
 8005e8e:	6103      	str	r3, [r0, #16]
 8005e90:	dd19      	ble.n	8005ec6 <__s2b+0x64>
 8005e92:	f104 0809 	add.w	r8, r4, #9
 8005e96:	46c1      	mov	r9, r8
 8005e98:	442c      	add	r4, r5
 8005e9a:	f819 3b01 	ldrb.w	r3, [r9], #1
 8005e9e:	4601      	mov	r1, r0
 8005ea0:	3b30      	subs	r3, #48	; 0x30
 8005ea2:	220a      	movs	r2, #10
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f7ff ffa1 	bl	8005dec <__multadd>
 8005eaa:	45a1      	cmp	r9, r4
 8005eac:	d1f5      	bne.n	8005e9a <__s2b+0x38>
 8005eae:	eb08 0405 	add.w	r4, r8, r5
 8005eb2:	3c08      	subs	r4, #8
 8005eb4:	1b2d      	subs	r5, r5, r4
 8005eb6:	1963      	adds	r3, r4, r5
 8005eb8:	42bb      	cmp	r3, r7
 8005eba:	db07      	blt.n	8005ecc <__s2b+0x6a>
 8005ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ec0:	0052      	lsls	r2, r2, #1
 8005ec2:	3101      	adds	r1, #1
 8005ec4:	e7d9      	b.n	8005e7a <__s2b+0x18>
 8005ec6:	340a      	adds	r4, #10
 8005ec8:	2509      	movs	r5, #9
 8005eca:	e7f3      	b.n	8005eb4 <__s2b+0x52>
 8005ecc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ed0:	4601      	mov	r1, r0
 8005ed2:	3b30      	subs	r3, #48	; 0x30
 8005ed4:	220a      	movs	r2, #10
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f7ff ff88 	bl	8005dec <__multadd>
 8005edc:	e7eb      	b.n	8005eb6 <__s2b+0x54>

08005ede <__hi0bits>:
 8005ede:	0c02      	lsrs	r2, r0, #16
 8005ee0:	0412      	lsls	r2, r2, #16
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	b9b2      	cbnz	r2, 8005f14 <__hi0bits+0x36>
 8005ee6:	0403      	lsls	r3, r0, #16
 8005ee8:	2010      	movs	r0, #16
 8005eea:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005eee:	bf04      	itt	eq
 8005ef0:	021b      	lsleq	r3, r3, #8
 8005ef2:	3008      	addeq	r0, #8
 8005ef4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ef8:	bf04      	itt	eq
 8005efa:	011b      	lsleq	r3, r3, #4
 8005efc:	3004      	addeq	r0, #4
 8005efe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f02:	bf04      	itt	eq
 8005f04:	009b      	lsleq	r3, r3, #2
 8005f06:	3002      	addeq	r0, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	db06      	blt.n	8005f1a <__hi0bits+0x3c>
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	d503      	bpl.n	8005f18 <__hi0bits+0x3a>
 8005f10:	3001      	adds	r0, #1
 8005f12:	4770      	bx	lr
 8005f14:	2000      	movs	r0, #0
 8005f16:	e7e8      	b.n	8005eea <__hi0bits+0xc>
 8005f18:	2020      	movs	r0, #32
 8005f1a:	4770      	bx	lr

08005f1c <__lo0bits>:
 8005f1c:	6803      	ldr	r3, [r0, #0]
 8005f1e:	4601      	mov	r1, r0
 8005f20:	f013 0207 	ands.w	r2, r3, #7
 8005f24:	d00b      	beq.n	8005f3e <__lo0bits+0x22>
 8005f26:	07da      	lsls	r2, r3, #31
 8005f28:	d423      	bmi.n	8005f72 <__lo0bits+0x56>
 8005f2a:	0798      	lsls	r0, r3, #30
 8005f2c:	bf49      	itett	mi
 8005f2e:	085b      	lsrmi	r3, r3, #1
 8005f30:	089b      	lsrpl	r3, r3, #2
 8005f32:	2001      	movmi	r0, #1
 8005f34:	600b      	strmi	r3, [r1, #0]
 8005f36:	bf5c      	itt	pl
 8005f38:	600b      	strpl	r3, [r1, #0]
 8005f3a:	2002      	movpl	r0, #2
 8005f3c:	4770      	bx	lr
 8005f3e:	b298      	uxth	r0, r3
 8005f40:	b9a8      	cbnz	r0, 8005f6e <__lo0bits+0x52>
 8005f42:	2010      	movs	r0, #16
 8005f44:	0c1b      	lsrs	r3, r3, #16
 8005f46:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f4a:	bf04      	itt	eq
 8005f4c:	0a1b      	lsreq	r3, r3, #8
 8005f4e:	3008      	addeq	r0, #8
 8005f50:	071a      	lsls	r2, r3, #28
 8005f52:	bf04      	itt	eq
 8005f54:	091b      	lsreq	r3, r3, #4
 8005f56:	3004      	addeq	r0, #4
 8005f58:	079a      	lsls	r2, r3, #30
 8005f5a:	bf04      	itt	eq
 8005f5c:	089b      	lsreq	r3, r3, #2
 8005f5e:	3002      	addeq	r0, #2
 8005f60:	07da      	lsls	r2, r3, #31
 8005f62:	d402      	bmi.n	8005f6a <__lo0bits+0x4e>
 8005f64:	085b      	lsrs	r3, r3, #1
 8005f66:	d006      	beq.n	8005f76 <__lo0bits+0x5a>
 8005f68:	3001      	adds	r0, #1
 8005f6a:	600b      	str	r3, [r1, #0]
 8005f6c:	4770      	bx	lr
 8005f6e:	4610      	mov	r0, r2
 8005f70:	e7e9      	b.n	8005f46 <__lo0bits+0x2a>
 8005f72:	2000      	movs	r0, #0
 8005f74:	4770      	bx	lr
 8005f76:	2020      	movs	r0, #32
 8005f78:	4770      	bx	lr

08005f7a <__i2b>:
 8005f7a:	b510      	push	{r4, lr}
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	2101      	movs	r1, #1
 8005f80:	f7ff fee9 	bl	8005d56 <_Balloc>
 8005f84:	2201      	movs	r2, #1
 8005f86:	6144      	str	r4, [r0, #20]
 8005f88:	6102      	str	r2, [r0, #16]
 8005f8a:	bd10      	pop	{r4, pc}

08005f8c <__multiply>:
 8005f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f90:	4614      	mov	r4, r2
 8005f92:	690a      	ldr	r2, [r1, #16]
 8005f94:	6923      	ldr	r3, [r4, #16]
 8005f96:	4688      	mov	r8, r1
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	bfbe      	ittt	lt
 8005f9c:	460b      	movlt	r3, r1
 8005f9e:	46a0      	movlt	r8, r4
 8005fa0:	461c      	movlt	r4, r3
 8005fa2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005fa6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005faa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005fae:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005fb2:	eb07 0609 	add.w	r6, r7, r9
 8005fb6:	42b3      	cmp	r3, r6
 8005fb8:	bfb8      	it	lt
 8005fba:	3101      	addlt	r1, #1
 8005fbc:	f7ff fecb 	bl	8005d56 <_Balloc>
 8005fc0:	f100 0514 	add.w	r5, r0, #20
 8005fc4:	462b      	mov	r3, r5
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005fcc:	4573      	cmp	r3, lr
 8005fce:	d316      	bcc.n	8005ffe <__multiply+0x72>
 8005fd0:	f104 0214 	add.w	r2, r4, #20
 8005fd4:	f108 0114 	add.w	r1, r8, #20
 8005fd8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005fdc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	9b00      	ldr	r3, [sp, #0]
 8005fe4:	9201      	str	r2, [sp, #4]
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d80c      	bhi.n	8006004 <__multiply+0x78>
 8005fea:	2e00      	cmp	r6, #0
 8005fec:	dd03      	ble.n	8005ff6 <__multiply+0x6a>
 8005fee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d05d      	beq.n	80060b2 <__multiply+0x126>
 8005ff6:	6106      	str	r6, [r0, #16]
 8005ff8:	b003      	add	sp, #12
 8005ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffe:	f843 2b04 	str.w	r2, [r3], #4
 8006002:	e7e3      	b.n	8005fcc <__multiply+0x40>
 8006004:	f8b2 b000 	ldrh.w	fp, [r2]
 8006008:	f1bb 0f00 	cmp.w	fp, #0
 800600c:	d023      	beq.n	8006056 <__multiply+0xca>
 800600e:	4689      	mov	r9, r1
 8006010:	46ac      	mov	ip, r5
 8006012:	f04f 0800 	mov.w	r8, #0
 8006016:	f859 4b04 	ldr.w	r4, [r9], #4
 800601a:	f8dc a000 	ldr.w	sl, [ip]
 800601e:	b2a3      	uxth	r3, r4
 8006020:	fa1f fa8a 	uxth.w	sl, sl
 8006024:	fb0b a303 	mla	r3, fp, r3, sl
 8006028:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800602c:	f8dc 4000 	ldr.w	r4, [ip]
 8006030:	4443      	add	r3, r8
 8006032:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006036:	fb0b 840a 	mla	r4, fp, sl, r8
 800603a:	46e2      	mov	sl, ip
 800603c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006040:	b29b      	uxth	r3, r3
 8006042:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006046:	454f      	cmp	r7, r9
 8006048:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800604c:	f84a 3b04 	str.w	r3, [sl], #4
 8006050:	d82b      	bhi.n	80060aa <__multiply+0x11e>
 8006052:	f8cc 8004 	str.w	r8, [ip, #4]
 8006056:	9b01      	ldr	r3, [sp, #4]
 8006058:	3204      	adds	r2, #4
 800605a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800605e:	f1ba 0f00 	cmp.w	sl, #0
 8006062:	d020      	beq.n	80060a6 <__multiply+0x11a>
 8006064:	4689      	mov	r9, r1
 8006066:	46a8      	mov	r8, r5
 8006068:	f04f 0b00 	mov.w	fp, #0
 800606c:	682b      	ldr	r3, [r5, #0]
 800606e:	f8b9 c000 	ldrh.w	ip, [r9]
 8006072:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006076:	b29b      	uxth	r3, r3
 8006078:	fb0a 440c 	mla	r4, sl, ip, r4
 800607c:	46c4      	mov	ip, r8
 800607e:	445c      	add	r4, fp
 8006080:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006084:	f84c 3b04 	str.w	r3, [ip], #4
 8006088:	f859 3b04 	ldr.w	r3, [r9], #4
 800608c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006090:	0c1b      	lsrs	r3, r3, #16
 8006092:	fb0a b303 	mla	r3, sl, r3, fp
 8006096:	454f      	cmp	r7, r9
 8006098:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800609c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80060a0:	d805      	bhi.n	80060ae <__multiply+0x122>
 80060a2:	f8c8 3004 	str.w	r3, [r8, #4]
 80060a6:	3504      	adds	r5, #4
 80060a8:	e79b      	b.n	8005fe2 <__multiply+0x56>
 80060aa:	46d4      	mov	ip, sl
 80060ac:	e7b3      	b.n	8006016 <__multiply+0x8a>
 80060ae:	46e0      	mov	r8, ip
 80060b0:	e7dd      	b.n	800606e <__multiply+0xe2>
 80060b2:	3e01      	subs	r6, #1
 80060b4:	e799      	b.n	8005fea <__multiply+0x5e>
	...

080060b8 <__pow5mult>:
 80060b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060bc:	4615      	mov	r5, r2
 80060be:	f012 0203 	ands.w	r2, r2, #3
 80060c2:	4606      	mov	r6, r0
 80060c4:	460f      	mov	r7, r1
 80060c6:	d007      	beq.n	80060d8 <__pow5mult+0x20>
 80060c8:	4c21      	ldr	r4, [pc, #132]	; (8006150 <__pow5mult+0x98>)
 80060ca:	3a01      	subs	r2, #1
 80060cc:	2300      	movs	r3, #0
 80060ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060d2:	f7ff fe8b 	bl	8005dec <__multadd>
 80060d6:	4607      	mov	r7, r0
 80060d8:	10ad      	asrs	r5, r5, #2
 80060da:	d035      	beq.n	8006148 <__pow5mult+0x90>
 80060dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060de:	b93c      	cbnz	r4, 80060f0 <__pow5mult+0x38>
 80060e0:	2010      	movs	r0, #16
 80060e2:	f7ff fe05 	bl	8005cf0 <malloc>
 80060e6:	6270      	str	r0, [r6, #36]	; 0x24
 80060e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060ec:	6004      	str	r4, [r0, #0]
 80060ee:	60c4      	str	r4, [r0, #12]
 80060f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80060f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060f8:	b94c      	cbnz	r4, 800610e <__pow5mult+0x56>
 80060fa:	f240 2171 	movw	r1, #625	; 0x271
 80060fe:	4630      	mov	r0, r6
 8006100:	f7ff ff3b 	bl	8005f7a <__i2b>
 8006104:	2300      	movs	r3, #0
 8006106:	4604      	mov	r4, r0
 8006108:	f8c8 0008 	str.w	r0, [r8, #8]
 800610c:	6003      	str	r3, [r0, #0]
 800610e:	f04f 0800 	mov.w	r8, #0
 8006112:	07eb      	lsls	r3, r5, #31
 8006114:	d50a      	bpl.n	800612c <__pow5mult+0x74>
 8006116:	4639      	mov	r1, r7
 8006118:	4622      	mov	r2, r4
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff ff36 	bl	8005f8c <__multiply>
 8006120:	4681      	mov	r9, r0
 8006122:	4639      	mov	r1, r7
 8006124:	4630      	mov	r0, r6
 8006126:	f7ff fe4a 	bl	8005dbe <_Bfree>
 800612a:	464f      	mov	r7, r9
 800612c:	106d      	asrs	r5, r5, #1
 800612e:	d00b      	beq.n	8006148 <__pow5mult+0x90>
 8006130:	6820      	ldr	r0, [r4, #0]
 8006132:	b938      	cbnz	r0, 8006144 <__pow5mult+0x8c>
 8006134:	4622      	mov	r2, r4
 8006136:	4621      	mov	r1, r4
 8006138:	4630      	mov	r0, r6
 800613a:	f7ff ff27 	bl	8005f8c <__multiply>
 800613e:	6020      	str	r0, [r4, #0]
 8006140:	f8c0 8000 	str.w	r8, [r0]
 8006144:	4604      	mov	r4, r0
 8006146:	e7e4      	b.n	8006112 <__pow5mult+0x5a>
 8006148:	4638      	mov	r0, r7
 800614a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800614e:	bf00      	nop
 8006150:	08006c40 	.word	0x08006c40

08006154 <__lshift>:
 8006154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006158:	460c      	mov	r4, r1
 800615a:	4607      	mov	r7, r0
 800615c:	4616      	mov	r6, r2
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006164:	eb0a 0903 	add.w	r9, sl, r3
 8006168:	6849      	ldr	r1, [r1, #4]
 800616a:	68a3      	ldr	r3, [r4, #8]
 800616c:	f109 0501 	add.w	r5, r9, #1
 8006170:	42ab      	cmp	r3, r5
 8006172:	db32      	blt.n	80061da <__lshift+0x86>
 8006174:	4638      	mov	r0, r7
 8006176:	f7ff fdee 	bl	8005d56 <_Balloc>
 800617a:	2300      	movs	r3, #0
 800617c:	4680      	mov	r8, r0
 800617e:	461a      	mov	r2, r3
 8006180:	f100 0114 	add.w	r1, r0, #20
 8006184:	4553      	cmp	r3, sl
 8006186:	db2b      	blt.n	80061e0 <__lshift+0x8c>
 8006188:	6920      	ldr	r0, [r4, #16]
 800618a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800618e:	f104 0314 	add.w	r3, r4, #20
 8006192:	f016 021f 	ands.w	r2, r6, #31
 8006196:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800619a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800619e:	d025      	beq.n	80061ec <__lshift+0x98>
 80061a0:	2000      	movs	r0, #0
 80061a2:	f1c2 0e20 	rsb	lr, r2, #32
 80061a6:	468a      	mov	sl, r1
 80061a8:	681e      	ldr	r6, [r3, #0]
 80061aa:	4096      	lsls	r6, r2
 80061ac:	4330      	orrs	r0, r6
 80061ae:	f84a 0b04 	str.w	r0, [sl], #4
 80061b2:	f853 0b04 	ldr.w	r0, [r3], #4
 80061b6:	459c      	cmp	ip, r3
 80061b8:	fa20 f00e 	lsr.w	r0, r0, lr
 80061bc:	d814      	bhi.n	80061e8 <__lshift+0x94>
 80061be:	6048      	str	r0, [r1, #4]
 80061c0:	b108      	cbz	r0, 80061c6 <__lshift+0x72>
 80061c2:	f109 0502 	add.w	r5, r9, #2
 80061c6:	3d01      	subs	r5, #1
 80061c8:	4638      	mov	r0, r7
 80061ca:	f8c8 5010 	str.w	r5, [r8, #16]
 80061ce:	4621      	mov	r1, r4
 80061d0:	f7ff fdf5 	bl	8005dbe <_Bfree>
 80061d4:	4640      	mov	r0, r8
 80061d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061da:	3101      	adds	r1, #1
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	e7c7      	b.n	8006170 <__lshift+0x1c>
 80061e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80061e4:	3301      	adds	r3, #1
 80061e6:	e7cd      	b.n	8006184 <__lshift+0x30>
 80061e8:	4651      	mov	r1, sl
 80061ea:	e7dc      	b.n	80061a6 <__lshift+0x52>
 80061ec:	3904      	subs	r1, #4
 80061ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80061f2:	459c      	cmp	ip, r3
 80061f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80061f8:	d8f9      	bhi.n	80061ee <__lshift+0x9a>
 80061fa:	e7e4      	b.n	80061c6 <__lshift+0x72>

080061fc <__mcmp>:
 80061fc:	6903      	ldr	r3, [r0, #16]
 80061fe:	690a      	ldr	r2, [r1, #16]
 8006200:	b530      	push	{r4, r5, lr}
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	d10c      	bne.n	8006220 <__mcmp+0x24>
 8006206:	0092      	lsls	r2, r2, #2
 8006208:	3014      	adds	r0, #20
 800620a:	3114      	adds	r1, #20
 800620c:	1884      	adds	r4, r0, r2
 800620e:	4411      	add	r1, r2
 8006210:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006214:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006218:	4295      	cmp	r5, r2
 800621a:	d003      	beq.n	8006224 <__mcmp+0x28>
 800621c:	d305      	bcc.n	800622a <__mcmp+0x2e>
 800621e:	2301      	movs	r3, #1
 8006220:	4618      	mov	r0, r3
 8006222:	bd30      	pop	{r4, r5, pc}
 8006224:	42a0      	cmp	r0, r4
 8006226:	d3f3      	bcc.n	8006210 <__mcmp+0x14>
 8006228:	e7fa      	b.n	8006220 <__mcmp+0x24>
 800622a:	f04f 33ff 	mov.w	r3, #4294967295
 800622e:	e7f7      	b.n	8006220 <__mcmp+0x24>

08006230 <__mdiff>:
 8006230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006234:	460d      	mov	r5, r1
 8006236:	4607      	mov	r7, r0
 8006238:	4611      	mov	r1, r2
 800623a:	4628      	mov	r0, r5
 800623c:	4614      	mov	r4, r2
 800623e:	f7ff ffdd 	bl	80061fc <__mcmp>
 8006242:	1e06      	subs	r6, r0, #0
 8006244:	d108      	bne.n	8006258 <__mdiff+0x28>
 8006246:	4631      	mov	r1, r6
 8006248:	4638      	mov	r0, r7
 800624a:	f7ff fd84 	bl	8005d56 <_Balloc>
 800624e:	2301      	movs	r3, #1
 8006250:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006258:	bfa4      	itt	ge
 800625a:	4623      	movge	r3, r4
 800625c:	462c      	movge	r4, r5
 800625e:	4638      	mov	r0, r7
 8006260:	6861      	ldr	r1, [r4, #4]
 8006262:	bfa6      	itte	ge
 8006264:	461d      	movge	r5, r3
 8006266:	2600      	movge	r6, #0
 8006268:	2601      	movlt	r6, #1
 800626a:	f7ff fd74 	bl	8005d56 <_Balloc>
 800626e:	f04f 0e00 	mov.w	lr, #0
 8006272:	60c6      	str	r6, [r0, #12]
 8006274:	692b      	ldr	r3, [r5, #16]
 8006276:	6926      	ldr	r6, [r4, #16]
 8006278:	f104 0214 	add.w	r2, r4, #20
 800627c:	f105 0914 	add.w	r9, r5, #20
 8006280:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006284:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006288:	f100 0114 	add.w	r1, r0, #20
 800628c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006290:	f859 5b04 	ldr.w	r5, [r9], #4
 8006294:	fa1f f38a 	uxth.w	r3, sl
 8006298:	4473      	add	r3, lr
 800629a:	b2ac      	uxth	r4, r5
 800629c:	1b1b      	subs	r3, r3, r4
 800629e:	0c2c      	lsrs	r4, r5, #16
 80062a0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80062a4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80062ae:	45c8      	cmp	r8, r9
 80062b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80062b4:	4694      	mov	ip, r2
 80062b6:	f841 4b04 	str.w	r4, [r1], #4
 80062ba:	d8e7      	bhi.n	800628c <__mdiff+0x5c>
 80062bc:	45bc      	cmp	ip, r7
 80062be:	d304      	bcc.n	80062ca <__mdiff+0x9a>
 80062c0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80062c4:	b183      	cbz	r3, 80062e8 <__mdiff+0xb8>
 80062c6:	6106      	str	r6, [r0, #16]
 80062c8:	e7c4      	b.n	8006254 <__mdiff+0x24>
 80062ca:	f85c 4b04 	ldr.w	r4, [ip], #4
 80062ce:	b2a2      	uxth	r2, r4
 80062d0:	4472      	add	r2, lr
 80062d2:	1413      	asrs	r3, r2, #16
 80062d4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80062d8:	b292      	uxth	r2, r2
 80062da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80062de:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80062e2:	f841 2b04 	str.w	r2, [r1], #4
 80062e6:	e7e9      	b.n	80062bc <__mdiff+0x8c>
 80062e8:	3e01      	subs	r6, #1
 80062ea:	e7e9      	b.n	80062c0 <__mdiff+0x90>

080062ec <__ulp>:
 80062ec:	4b10      	ldr	r3, [pc, #64]	; (8006330 <__ulp+0x44>)
 80062ee:	400b      	ands	r3, r1
 80062f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	dd02      	ble.n	80062fe <__ulp+0x12>
 80062f8:	2000      	movs	r0, #0
 80062fa:	4619      	mov	r1, r3
 80062fc:	4770      	bx	lr
 80062fe:	425b      	negs	r3, r3
 8006300:	151b      	asrs	r3, r3, #20
 8006302:	2b13      	cmp	r3, #19
 8006304:	f04f 0000 	mov.w	r0, #0
 8006308:	f04f 0100 	mov.w	r1, #0
 800630c:	dc04      	bgt.n	8006318 <__ulp+0x2c>
 800630e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006312:	fa42 f103 	asr.w	r1, r2, r3
 8006316:	4770      	bx	lr
 8006318:	2201      	movs	r2, #1
 800631a:	3b14      	subs	r3, #20
 800631c:	2b1e      	cmp	r3, #30
 800631e:	bfce      	itee	gt
 8006320:	4613      	movgt	r3, r2
 8006322:	f1c3 031f 	rsble	r3, r3, #31
 8006326:	fa02 f303 	lslle.w	r3, r2, r3
 800632a:	4618      	mov	r0, r3
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	7ff00000 	.word	0x7ff00000

08006334 <__b2d>:
 8006334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006338:	6907      	ldr	r7, [r0, #16]
 800633a:	f100 0914 	add.w	r9, r0, #20
 800633e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006342:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006346:	f1a7 0804 	sub.w	r8, r7, #4
 800634a:	4630      	mov	r0, r6
 800634c:	f7ff fdc7 	bl	8005ede <__hi0bits>
 8006350:	f1c0 0320 	rsb	r3, r0, #32
 8006354:	280a      	cmp	r0, #10
 8006356:	600b      	str	r3, [r1, #0]
 8006358:	491e      	ldr	r1, [pc, #120]	; (80063d4 <__b2d+0xa0>)
 800635a:	dc17      	bgt.n	800638c <__b2d+0x58>
 800635c:	45c1      	cmp	r9, r8
 800635e:	bf28      	it	cs
 8006360:	2200      	movcs	r2, #0
 8006362:	f1c0 0c0b 	rsb	ip, r0, #11
 8006366:	fa26 f30c 	lsr.w	r3, r6, ip
 800636a:	bf38      	it	cc
 800636c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006370:	ea43 0501 	orr.w	r5, r3, r1
 8006374:	f100 0315 	add.w	r3, r0, #21
 8006378:	fa06 f303 	lsl.w	r3, r6, r3
 800637c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006380:	ea43 0402 	orr.w	r4, r3, r2
 8006384:	4620      	mov	r0, r4
 8006386:	4629      	mov	r1, r5
 8006388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800638c:	45c1      	cmp	r9, r8
 800638e:	bf3a      	itte	cc
 8006390:	f1a7 0808 	subcc.w	r8, r7, #8
 8006394:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006398:	2200      	movcs	r2, #0
 800639a:	f1b0 030b 	subs.w	r3, r0, #11
 800639e:	d015      	beq.n	80063cc <__b2d+0x98>
 80063a0:	409e      	lsls	r6, r3
 80063a2:	f1c3 0720 	rsb	r7, r3, #32
 80063a6:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80063aa:	fa22 f107 	lsr.w	r1, r2, r7
 80063ae:	45c8      	cmp	r8, r9
 80063b0:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80063b4:	ea46 0501 	orr.w	r5, r6, r1
 80063b8:	bf94      	ite	ls
 80063ba:	2100      	movls	r1, #0
 80063bc:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80063c0:	fa02 f003 	lsl.w	r0, r2, r3
 80063c4:	40f9      	lsrs	r1, r7
 80063c6:	ea40 0401 	orr.w	r4, r0, r1
 80063ca:	e7db      	b.n	8006384 <__b2d+0x50>
 80063cc:	ea46 0501 	orr.w	r5, r6, r1
 80063d0:	4614      	mov	r4, r2
 80063d2:	e7d7      	b.n	8006384 <__b2d+0x50>
 80063d4:	3ff00000 	.word	0x3ff00000

080063d8 <__d2b>:
 80063d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80063dc:	461c      	mov	r4, r3
 80063de:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80063e2:	2101      	movs	r1, #1
 80063e4:	4690      	mov	r8, r2
 80063e6:	f7ff fcb6 	bl	8005d56 <_Balloc>
 80063ea:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80063ee:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80063f2:	4607      	mov	r7, r0
 80063f4:	bb34      	cbnz	r4, 8006444 <__d2b+0x6c>
 80063f6:	9201      	str	r2, [sp, #4]
 80063f8:	f1b8 0200 	subs.w	r2, r8, #0
 80063fc:	d027      	beq.n	800644e <__d2b+0x76>
 80063fe:	a802      	add	r0, sp, #8
 8006400:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006404:	f7ff fd8a 	bl	8005f1c <__lo0bits>
 8006408:	9900      	ldr	r1, [sp, #0]
 800640a:	b1f0      	cbz	r0, 800644a <__d2b+0x72>
 800640c:	9a01      	ldr	r2, [sp, #4]
 800640e:	f1c0 0320 	rsb	r3, r0, #32
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	430b      	orrs	r3, r1
 8006418:	40c2      	lsrs	r2, r0
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	9201      	str	r2, [sp, #4]
 800641e:	9b01      	ldr	r3, [sp, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	bf14      	ite	ne
 8006424:	2102      	movne	r1, #2
 8006426:	2101      	moveq	r1, #1
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	6139      	str	r1, [r7, #16]
 800642c:	b1c4      	cbz	r4, 8006460 <__d2b+0x88>
 800642e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006432:	4404      	add	r4, r0
 8006434:	6034      	str	r4, [r6, #0]
 8006436:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800643a:	6028      	str	r0, [r5, #0]
 800643c:	4638      	mov	r0, r7
 800643e:	b002      	add	sp, #8
 8006440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006444:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006448:	e7d5      	b.n	80063f6 <__d2b+0x1e>
 800644a:	6179      	str	r1, [r7, #20]
 800644c:	e7e7      	b.n	800641e <__d2b+0x46>
 800644e:	a801      	add	r0, sp, #4
 8006450:	f7ff fd64 	bl	8005f1c <__lo0bits>
 8006454:	2101      	movs	r1, #1
 8006456:	9b01      	ldr	r3, [sp, #4]
 8006458:	6139      	str	r1, [r7, #16]
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	3020      	adds	r0, #32
 800645e:	e7e5      	b.n	800642c <__d2b+0x54>
 8006460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006464:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006468:	6030      	str	r0, [r6, #0]
 800646a:	6918      	ldr	r0, [r3, #16]
 800646c:	f7ff fd37 	bl	8005ede <__hi0bits>
 8006470:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006474:	e7e1      	b.n	800643a <__d2b+0x62>

08006476 <__ratio>:
 8006476:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647a:	4688      	mov	r8, r1
 800647c:	4669      	mov	r1, sp
 800647e:	4681      	mov	r9, r0
 8006480:	f7ff ff58 	bl	8006334 <__b2d>
 8006484:	468b      	mov	fp, r1
 8006486:	4606      	mov	r6, r0
 8006488:	460f      	mov	r7, r1
 800648a:	4640      	mov	r0, r8
 800648c:	a901      	add	r1, sp, #4
 800648e:	f7ff ff51 	bl	8006334 <__b2d>
 8006492:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006496:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800649a:	460d      	mov	r5, r1
 800649c:	eba3 0c02 	sub.w	ip, r3, r2
 80064a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80064a4:	1a9b      	subs	r3, r3, r2
 80064a6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	bfd5      	itete	le
 80064ae:	460a      	movle	r2, r1
 80064b0:	463a      	movgt	r2, r7
 80064b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80064b6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80064ba:	bfd8      	it	le
 80064bc:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80064c0:	462b      	mov	r3, r5
 80064c2:	4602      	mov	r2, r0
 80064c4:	4659      	mov	r1, fp
 80064c6:	4630      	mov	r0, r6
 80064c8:	f7fa f930 	bl	800072c <__aeabi_ddiv>
 80064cc:	b003      	add	sp, #12
 80064ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064d2 <__copybits>:
 80064d2:	3901      	subs	r1, #1
 80064d4:	b510      	push	{r4, lr}
 80064d6:	1149      	asrs	r1, r1, #5
 80064d8:	6914      	ldr	r4, [r2, #16]
 80064da:	3101      	adds	r1, #1
 80064dc:	f102 0314 	add.w	r3, r2, #20
 80064e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80064e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80064e8:	42a3      	cmp	r3, r4
 80064ea:	4602      	mov	r2, r0
 80064ec:	d303      	bcc.n	80064f6 <__copybits+0x24>
 80064ee:	2300      	movs	r3, #0
 80064f0:	428a      	cmp	r2, r1
 80064f2:	d305      	bcc.n	8006500 <__copybits+0x2e>
 80064f4:	bd10      	pop	{r4, pc}
 80064f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80064fa:	f840 2b04 	str.w	r2, [r0], #4
 80064fe:	e7f3      	b.n	80064e8 <__copybits+0x16>
 8006500:	f842 3b04 	str.w	r3, [r2], #4
 8006504:	e7f4      	b.n	80064f0 <__copybits+0x1e>

08006506 <__any_on>:
 8006506:	f100 0214 	add.w	r2, r0, #20
 800650a:	6900      	ldr	r0, [r0, #16]
 800650c:	114b      	asrs	r3, r1, #5
 800650e:	4298      	cmp	r0, r3
 8006510:	b510      	push	{r4, lr}
 8006512:	db11      	blt.n	8006538 <__any_on+0x32>
 8006514:	dd0a      	ble.n	800652c <__any_on+0x26>
 8006516:	f011 011f 	ands.w	r1, r1, #31
 800651a:	d007      	beq.n	800652c <__any_on+0x26>
 800651c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006520:	fa24 f001 	lsr.w	r0, r4, r1
 8006524:	fa00 f101 	lsl.w	r1, r0, r1
 8006528:	428c      	cmp	r4, r1
 800652a:	d10b      	bne.n	8006544 <__any_on+0x3e>
 800652c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006530:	4293      	cmp	r3, r2
 8006532:	d803      	bhi.n	800653c <__any_on+0x36>
 8006534:	2000      	movs	r0, #0
 8006536:	bd10      	pop	{r4, pc}
 8006538:	4603      	mov	r3, r0
 800653a:	e7f7      	b.n	800652c <__any_on+0x26>
 800653c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006540:	2900      	cmp	r1, #0
 8006542:	d0f5      	beq.n	8006530 <__any_on+0x2a>
 8006544:	2001      	movs	r0, #1
 8006546:	e7f6      	b.n	8006536 <__any_on+0x30>

08006548 <_calloc_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	fb02 f401 	mul.w	r4, r2, r1
 800654e:	4621      	mov	r1, r4
 8006550:	f000 f854 	bl	80065fc <_malloc_r>
 8006554:	4605      	mov	r5, r0
 8006556:	b118      	cbz	r0, 8006560 <_calloc_r+0x18>
 8006558:	4622      	mov	r2, r4
 800655a:	2100      	movs	r1, #0
 800655c:	f7fc fcfa 	bl	8002f54 <memset>
 8006560:	4628      	mov	r0, r5
 8006562:	bd38      	pop	{r3, r4, r5, pc}

08006564 <_free_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4605      	mov	r5, r0
 8006568:	2900      	cmp	r1, #0
 800656a:	d043      	beq.n	80065f4 <_free_r+0x90>
 800656c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006570:	1f0c      	subs	r4, r1, #4
 8006572:	2b00      	cmp	r3, #0
 8006574:	bfb8      	it	lt
 8006576:	18e4      	addlt	r4, r4, r3
 8006578:	f000 fa34 	bl	80069e4 <__malloc_lock>
 800657c:	4a1e      	ldr	r2, [pc, #120]	; (80065f8 <_free_r+0x94>)
 800657e:	6813      	ldr	r3, [r2, #0]
 8006580:	4610      	mov	r0, r2
 8006582:	b933      	cbnz	r3, 8006592 <_free_r+0x2e>
 8006584:	6063      	str	r3, [r4, #4]
 8006586:	6014      	str	r4, [r2, #0]
 8006588:	4628      	mov	r0, r5
 800658a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800658e:	f000 ba2a 	b.w	80069e6 <__malloc_unlock>
 8006592:	42a3      	cmp	r3, r4
 8006594:	d90b      	bls.n	80065ae <_free_r+0x4a>
 8006596:	6821      	ldr	r1, [r4, #0]
 8006598:	1862      	adds	r2, r4, r1
 800659a:	4293      	cmp	r3, r2
 800659c:	bf01      	itttt	eq
 800659e:	681a      	ldreq	r2, [r3, #0]
 80065a0:	685b      	ldreq	r3, [r3, #4]
 80065a2:	1852      	addeq	r2, r2, r1
 80065a4:	6022      	streq	r2, [r4, #0]
 80065a6:	6063      	str	r3, [r4, #4]
 80065a8:	6004      	str	r4, [r0, #0]
 80065aa:	e7ed      	b.n	8006588 <_free_r+0x24>
 80065ac:	4613      	mov	r3, r2
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	b10a      	cbz	r2, 80065b6 <_free_r+0x52>
 80065b2:	42a2      	cmp	r2, r4
 80065b4:	d9fa      	bls.n	80065ac <_free_r+0x48>
 80065b6:	6819      	ldr	r1, [r3, #0]
 80065b8:	1858      	adds	r0, r3, r1
 80065ba:	42a0      	cmp	r0, r4
 80065bc:	d10b      	bne.n	80065d6 <_free_r+0x72>
 80065be:	6820      	ldr	r0, [r4, #0]
 80065c0:	4401      	add	r1, r0
 80065c2:	1858      	adds	r0, r3, r1
 80065c4:	4282      	cmp	r2, r0
 80065c6:	6019      	str	r1, [r3, #0]
 80065c8:	d1de      	bne.n	8006588 <_free_r+0x24>
 80065ca:	6810      	ldr	r0, [r2, #0]
 80065cc:	6852      	ldr	r2, [r2, #4]
 80065ce:	4401      	add	r1, r0
 80065d0:	6019      	str	r1, [r3, #0]
 80065d2:	605a      	str	r2, [r3, #4]
 80065d4:	e7d8      	b.n	8006588 <_free_r+0x24>
 80065d6:	d902      	bls.n	80065de <_free_r+0x7a>
 80065d8:	230c      	movs	r3, #12
 80065da:	602b      	str	r3, [r5, #0]
 80065dc:	e7d4      	b.n	8006588 <_free_r+0x24>
 80065de:	6820      	ldr	r0, [r4, #0]
 80065e0:	1821      	adds	r1, r4, r0
 80065e2:	428a      	cmp	r2, r1
 80065e4:	bf01      	itttt	eq
 80065e6:	6811      	ldreq	r1, [r2, #0]
 80065e8:	6852      	ldreq	r2, [r2, #4]
 80065ea:	1809      	addeq	r1, r1, r0
 80065ec:	6021      	streq	r1, [r4, #0]
 80065ee:	6062      	str	r2, [r4, #4]
 80065f0:	605c      	str	r4, [r3, #4]
 80065f2:	e7c9      	b.n	8006588 <_free_r+0x24>
 80065f4:	bd38      	pop	{r3, r4, r5, pc}
 80065f6:	bf00      	nop
 80065f8:	200001fc 	.word	0x200001fc

080065fc <_malloc_r>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	1ccd      	adds	r5, r1, #3
 8006600:	f025 0503 	bic.w	r5, r5, #3
 8006604:	3508      	adds	r5, #8
 8006606:	2d0c      	cmp	r5, #12
 8006608:	bf38      	it	cc
 800660a:	250c      	movcc	r5, #12
 800660c:	2d00      	cmp	r5, #0
 800660e:	4606      	mov	r6, r0
 8006610:	db01      	blt.n	8006616 <_malloc_r+0x1a>
 8006612:	42a9      	cmp	r1, r5
 8006614:	d903      	bls.n	800661e <_malloc_r+0x22>
 8006616:	230c      	movs	r3, #12
 8006618:	6033      	str	r3, [r6, #0]
 800661a:	2000      	movs	r0, #0
 800661c:	bd70      	pop	{r4, r5, r6, pc}
 800661e:	f000 f9e1 	bl	80069e4 <__malloc_lock>
 8006622:	4a21      	ldr	r2, [pc, #132]	; (80066a8 <_malloc_r+0xac>)
 8006624:	6814      	ldr	r4, [r2, #0]
 8006626:	4621      	mov	r1, r4
 8006628:	b991      	cbnz	r1, 8006650 <_malloc_r+0x54>
 800662a:	4c20      	ldr	r4, [pc, #128]	; (80066ac <_malloc_r+0xb0>)
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	b91b      	cbnz	r3, 8006638 <_malloc_r+0x3c>
 8006630:	4630      	mov	r0, r6
 8006632:	f000 f98f 	bl	8006954 <_sbrk_r>
 8006636:	6020      	str	r0, [r4, #0]
 8006638:	4629      	mov	r1, r5
 800663a:	4630      	mov	r0, r6
 800663c:	f000 f98a 	bl	8006954 <_sbrk_r>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d124      	bne.n	800668e <_malloc_r+0x92>
 8006644:	230c      	movs	r3, #12
 8006646:	4630      	mov	r0, r6
 8006648:	6033      	str	r3, [r6, #0]
 800664a:	f000 f9cc 	bl	80069e6 <__malloc_unlock>
 800664e:	e7e4      	b.n	800661a <_malloc_r+0x1e>
 8006650:	680b      	ldr	r3, [r1, #0]
 8006652:	1b5b      	subs	r3, r3, r5
 8006654:	d418      	bmi.n	8006688 <_malloc_r+0x8c>
 8006656:	2b0b      	cmp	r3, #11
 8006658:	d90f      	bls.n	800667a <_malloc_r+0x7e>
 800665a:	600b      	str	r3, [r1, #0]
 800665c:	18cc      	adds	r4, r1, r3
 800665e:	50cd      	str	r5, [r1, r3]
 8006660:	4630      	mov	r0, r6
 8006662:	f000 f9c0 	bl	80069e6 <__malloc_unlock>
 8006666:	f104 000b 	add.w	r0, r4, #11
 800666a:	1d23      	adds	r3, r4, #4
 800666c:	f020 0007 	bic.w	r0, r0, #7
 8006670:	1ac3      	subs	r3, r0, r3
 8006672:	d0d3      	beq.n	800661c <_malloc_r+0x20>
 8006674:	425a      	negs	r2, r3
 8006676:	50e2      	str	r2, [r4, r3]
 8006678:	e7d0      	b.n	800661c <_malloc_r+0x20>
 800667a:	684b      	ldr	r3, [r1, #4]
 800667c:	428c      	cmp	r4, r1
 800667e:	bf16      	itet	ne
 8006680:	6063      	strne	r3, [r4, #4]
 8006682:	6013      	streq	r3, [r2, #0]
 8006684:	460c      	movne	r4, r1
 8006686:	e7eb      	b.n	8006660 <_malloc_r+0x64>
 8006688:	460c      	mov	r4, r1
 800668a:	6849      	ldr	r1, [r1, #4]
 800668c:	e7cc      	b.n	8006628 <_malloc_r+0x2c>
 800668e:	1cc4      	adds	r4, r0, #3
 8006690:	f024 0403 	bic.w	r4, r4, #3
 8006694:	42a0      	cmp	r0, r4
 8006696:	d005      	beq.n	80066a4 <_malloc_r+0xa8>
 8006698:	1a21      	subs	r1, r4, r0
 800669a:	4630      	mov	r0, r6
 800669c:	f000 f95a 	bl	8006954 <_sbrk_r>
 80066a0:	3001      	adds	r0, #1
 80066a2:	d0cf      	beq.n	8006644 <_malloc_r+0x48>
 80066a4:	6025      	str	r5, [r4, #0]
 80066a6:	e7db      	b.n	8006660 <_malloc_r+0x64>
 80066a8:	200001fc 	.word	0x200001fc
 80066ac:	20000200 	.word	0x20000200

080066b0 <__ssputs_r>:
 80066b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066b4:	688e      	ldr	r6, [r1, #8]
 80066b6:	4682      	mov	sl, r0
 80066b8:	429e      	cmp	r6, r3
 80066ba:	460c      	mov	r4, r1
 80066bc:	4690      	mov	r8, r2
 80066be:	4699      	mov	r9, r3
 80066c0:	d837      	bhi.n	8006732 <__ssputs_r+0x82>
 80066c2:	898a      	ldrh	r2, [r1, #12]
 80066c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80066c8:	d031      	beq.n	800672e <__ssputs_r+0x7e>
 80066ca:	2302      	movs	r3, #2
 80066cc:	6825      	ldr	r5, [r4, #0]
 80066ce:	6909      	ldr	r1, [r1, #16]
 80066d0:	1a6f      	subs	r7, r5, r1
 80066d2:	6965      	ldr	r5, [r4, #20]
 80066d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80066dc:	f109 0301 	add.w	r3, r9, #1
 80066e0:	443b      	add	r3, r7
 80066e2:	429d      	cmp	r5, r3
 80066e4:	bf38      	it	cc
 80066e6:	461d      	movcc	r5, r3
 80066e8:	0553      	lsls	r3, r2, #21
 80066ea:	d530      	bpl.n	800674e <__ssputs_r+0x9e>
 80066ec:	4629      	mov	r1, r5
 80066ee:	f7ff ff85 	bl	80065fc <_malloc_r>
 80066f2:	4606      	mov	r6, r0
 80066f4:	b950      	cbnz	r0, 800670c <__ssputs_r+0x5c>
 80066f6:	230c      	movs	r3, #12
 80066f8:	f04f 30ff 	mov.w	r0, #4294967295
 80066fc:	f8ca 3000 	str.w	r3, [sl]
 8006700:	89a3      	ldrh	r3, [r4, #12]
 8006702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006706:	81a3      	strh	r3, [r4, #12]
 8006708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800670c:	463a      	mov	r2, r7
 800670e:	6921      	ldr	r1, [r4, #16]
 8006710:	f7ff fb16 	bl	8005d40 <memcpy>
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800671a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800671e:	81a3      	strh	r3, [r4, #12]
 8006720:	6126      	str	r6, [r4, #16]
 8006722:	443e      	add	r6, r7
 8006724:	6026      	str	r6, [r4, #0]
 8006726:	464e      	mov	r6, r9
 8006728:	6165      	str	r5, [r4, #20]
 800672a:	1bed      	subs	r5, r5, r7
 800672c:	60a5      	str	r5, [r4, #8]
 800672e:	454e      	cmp	r6, r9
 8006730:	d900      	bls.n	8006734 <__ssputs_r+0x84>
 8006732:	464e      	mov	r6, r9
 8006734:	4632      	mov	r2, r6
 8006736:	4641      	mov	r1, r8
 8006738:	6820      	ldr	r0, [r4, #0]
 800673a:	f000 f93a 	bl	80069b2 <memmove>
 800673e:	68a3      	ldr	r3, [r4, #8]
 8006740:	2000      	movs	r0, #0
 8006742:	1b9b      	subs	r3, r3, r6
 8006744:	60a3      	str	r3, [r4, #8]
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	441e      	add	r6, r3
 800674a:	6026      	str	r6, [r4, #0]
 800674c:	e7dc      	b.n	8006708 <__ssputs_r+0x58>
 800674e:	462a      	mov	r2, r5
 8006750:	f000 f94a 	bl	80069e8 <_realloc_r>
 8006754:	4606      	mov	r6, r0
 8006756:	2800      	cmp	r0, #0
 8006758:	d1e2      	bne.n	8006720 <__ssputs_r+0x70>
 800675a:	6921      	ldr	r1, [r4, #16]
 800675c:	4650      	mov	r0, sl
 800675e:	f7ff ff01 	bl	8006564 <_free_r>
 8006762:	e7c8      	b.n	80066f6 <__ssputs_r+0x46>

08006764 <_svfiprintf_r>:
 8006764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006768:	461d      	mov	r5, r3
 800676a:	898b      	ldrh	r3, [r1, #12]
 800676c:	b09d      	sub	sp, #116	; 0x74
 800676e:	061f      	lsls	r7, r3, #24
 8006770:	4680      	mov	r8, r0
 8006772:	460c      	mov	r4, r1
 8006774:	4616      	mov	r6, r2
 8006776:	d50f      	bpl.n	8006798 <_svfiprintf_r+0x34>
 8006778:	690b      	ldr	r3, [r1, #16]
 800677a:	b96b      	cbnz	r3, 8006798 <_svfiprintf_r+0x34>
 800677c:	2140      	movs	r1, #64	; 0x40
 800677e:	f7ff ff3d 	bl	80065fc <_malloc_r>
 8006782:	6020      	str	r0, [r4, #0]
 8006784:	6120      	str	r0, [r4, #16]
 8006786:	b928      	cbnz	r0, 8006794 <_svfiprintf_r+0x30>
 8006788:	230c      	movs	r3, #12
 800678a:	f8c8 3000 	str.w	r3, [r8]
 800678e:	f04f 30ff 	mov.w	r0, #4294967295
 8006792:	e0c8      	b.n	8006926 <_svfiprintf_r+0x1c2>
 8006794:	2340      	movs	r3, #64	; 0x40
 8006796:	6163      	str	r3, [r4, #20]
 8006798:	2300      	movs	r3, #0
 800679a:	9309      	str	r3, [sp, #36]	; 0x24
 800679c:	2320      	movs	r3, #32
 800679e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067a2:	2330      	movs	r3, #48	; 0x30
 80067a4:	f04f 0b01 	mov.w	fp, #1
 80067a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067ac:	9503      	str	r5, [sp, #12]
 80067ae:	4637      	mov	r7, r6
 80067b0:	463d      	mov	r5, r7
 80067b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80067b6:	b10b      	cbz	r3, 80067bc <_svfiprintf_r+0x58>
 80067b8:	2b25      	cmp	r3, #37	; 0x25
 80067ba:	d13e      	bne.n	800683a <_svfiprintf_r+0xd6>
 80067bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80067c0:	d00b      	beq.n	80067da <_svfiprintf_r+0x76>
 80067c2:	4653      	mov	r3, sl
 80067c4:	4632      	mov	r2, r6
 80067c6:	4621      	mov	r1, r4
 80067c8:	4640      	mov	r0, r8
 80067ca:	f7ff ff71 	bl	80066b0 <__ssputs_r>
 80067ce:	3001      	adds	r0, #1
 80067d0:	f000 80a4 	beq.w	800691c <_svfiprintf_r+0x1b8>
 80067d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d6:	4453      	add	r3, sl
 80067d8:	9309      	str	r3, [sp, #36]	; 0x24
 80067da:	783b      	ldrb	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 809d 	beq.w	800691c <_svfiprintf_r+0x1b8>
 80067e2:	2300      	movs	r3, #0
 80067e4:	f04f 32ff 	mov.w	r2, #4294967295
 80067e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067ec:	9304      	str	r3, [sp, #16]
 80067ee:	9307      	str	r3, [sp, #28]
 80067f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067f4:	931a      	str	r3, [sp, #104]	; 0x68
 80067f6:	462f      	mov	r7, r5
 80067f8:	2205      	movs	r2, #5
 80067fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80067fe:	4850      	ldr	r0, [pc, #320]	; (8006940 <_svfiprintf_r+0x1dc>)
 8006800:	f7ff fa90 	bl	8005d24 <memchr>
 8006804:	9b04      	ldr	r3, [sp, #16]
 8006806:	b9d0      	cbnz	r0, 800683e <_svfiprintf_r+0xda>
 8006808:	06d9      	lsls	r1, r3, #27
 800680a:	bf44      	itt	mi
 800680c:	2220      	movmi	r2, #32
 800680e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006812:	071a      	lsls	r2, r3, #28
 8006814:	bf44      	itt	mi
 8006816:	222b      	movmi	r2, #43	; 0x2b
 8006818:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800681c:	782a      	ldrb	r2, [r5, #0]
 800681e:	2a2a      	cmp	r2, #42	; 0x2a
 8006820:	d015      	beq.n	800684e <_svfiprintf_r+0xea>
 8006822:	462f      	mov	r7, r5
 8006824:	2000      	movs	r0, #0
 8006826:	250a      	movs	r5, #10
 8006828:	9a07      	ldr	r2, [sp, #28]
 800682a:	4639      	mov	r1, r7
 800682c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006830:	3b30      	subs	r3, #48	; 0x30
 8006832:	2b09      	cmp	r3, #9
 8006834:	d94d      	bls.n	80068d2 <_svfiprintf_r+0x16e>
 8006836:	b1b8      	cbz	r0, 8006868 <_svfiprintf_r+0x104>
 8006838:	e00f      	b.n	800685a <_svfiprintf_r+0xf6>
 800683a:	462f      	mov	r7, r5
 800683c:	e7b8      	b.n	80067b0 <_svfiprintf_r+0x4c>
 800683e:	4a40      	ldr	r2, [pc, #256]	; (8006940 <_svfiprintf_r+0x1dc>)
 8006840:	463d      	mov	r5, r7
 8006842:	1a80      	subs	r0, r0, r2
 8006844:	fa0b f000 	lsl.w	r0, fp, r0
 8006848:	4318      	orrs	r0, r3
 800684a:	9004      	str	r0, [sp, #16]
 800684c:	e7d3      	b.n	80067f6 <_svfiprintf_r+0x92>
 800684e:	9a03      	ldr	r2, [sp, #12]
 8006850:	1d11      	adds	r1, r2, #4
 8006852:	6812      	ldr	r2, [r2, #0]
 8006854:	9103      	str	r1, [sp, #12]
 8006856:	2a00      	cmp	r2, #0
 8006858:	db01      	blt.n	800685e <_svfiprintf_r+0xfa>
 800685a:	9207      	str	r2, [sp, #28]
 800685c:	e004      	b.n	8006868 <_svfiprintf_r+0x104>
 800685e:	4252      	negs	r2, r2
 8006860:	f043 0302 	orr.w	r3, r3, #2
 8006864:	9207      	str	r2, [sp, #28]
 8006866:	9304      	str	r3, [sp, #16]
 8006868:	783b      	ldrb	r3, [r7, #0]
 800686a:	2b2e      	cmp	r3, #46	; 0x2e
 800686c:	d10c      	bne.n	8006888 <_svfiprintf_r+0x124>
 800686e:	787b      	ldrb	r3, [r7, #1]
 8006870:	2b2a      	cmp	r3, #42	; 0x2a
 8006872:	d133      	bne.n	80068dc <_svfiprintf_r+0x178>
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	3702      	adds	r7, #2
 8006878:	1d1a      	adds	r2, r3, #4
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	9203      	str	r2, [sp, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	bfb8      	it	lt
 8006882:	f04f 33ff 	movlt.w	r3, #4294967295
 8006886:	9305      	str	r3, [sp, #20]
 8006888:	4d2e      	ldr	r5, [pc, #184]	; (8006944 <_svfiprintf_r+0x1e0>)
 800688a:	2203      	movs	r2, #3
 800688c:	7839      	ldrb	r1, [r7, #0]
 800688e:	4628      	mov	r0, r5
 8006890:	f7ff fa48 	bl	8005d24 <memchr>
 8006894:	b138      	cbz	r0, 80068a6 <_svfiprintf_r+0x142>
 8006896:	2340      	movs	r3, #64	; 0x40
 8006898:	1b40      	subs	r0, r0, r5
 800689a:	fa03 f000 	lsl.w	r0, r3, r0
 800689e:	9b04      	ldr	r3, [sp, #16]
 80068a0:	3701      	adds	r7, #1
 80068a2:	4303      	orrs	r3, r0
 80068a4:	9304      	str	r3, [sp, #16]
 80068a6:	7839      	ldrb	r1, [r7, #0]
 80068a8:	2206      	movs	r2, #6
 80068aa:	4827      	ldr	r0, [pc, #156]	; (8006948 <_svfiprintf_r+0x1e4>)
 80068ac:	1c7e      	adds	r6, r7, #1
 80068ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068b2:	f7ff fa37 	bl	8005d24 <memchr>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d038      	beq.n	800692c <_svfiprintf_r+0x1c8>
 80068ba:	4b24      	ldr	r3, [pc, #144]	; (800694c <_svfiprintf_r+0x1e8>)
 80068bc:	bb13      	cbnz	r3, 8006904 <_svfiprintf_r+0x1a0>
 80068be:	9b03      	ldr	r3, [sp, #12]
 80068c0:	3307      	adds	r3, #7
 80068c2:	f023 0307 	bic.w	r3, r3, #7
 80068c6:	3308      	adds	r3, #8
 80068c8:	9303      	str	r3, [sp, #12]
 80068ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068cc:	444b      	add	r3, r9
 80068ce:	9309      	str	r3, [sp, #36]	; 0x24
 80068d0:	e76d      	b.n	80067ae <_svfiprintf_r+0x4a>
 80068d2:	fb05 3202 	mla	r2, r5, r2, r3
 80068d6:	2001      	movs	r0, #1
 80068d8:	460f      	mov	r7, r1
 80068da:	e7a6      	b.n	800682a <_svfiprintf_r+0xc6>
 80068dc:	2300      	movs	r3, #0
 80068de:	250a      	movs	r5, #10
 80068e0:	4619      	mov	r1, r3
 80068e2:	3701      	adds	r7, #1
 80068e4:	9305      	str	r3, [sp, #20]
 80068e6:	4638      	mov	r0, r7
 80068e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068ec:	3a30      	subs	r2, #48	; 0x30
 80068ee:	2a09      	cmp	r2, #9
 80068f0:	d903      	bls.n	80068fa <_svfiprintf_r+0x196>
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0c8      	beq.n	8006888 <_svfiprintf_r+0x124>
 80068f6:	9105      	str	r1, [sp, #20]
 80068f8:	e7c6      	b.n	8006888 <_svfiprintf_r+0x124>
 80068fa:	fb05 2101 	mla	r1, r5, r1, r2
 80068fe:	2301      	movs	r3, #1
 8006900:	4607      	mov	r7, r0
 8006902:	e7f0      	b.n	80068e6 <_svfiprintf_r+0x182>
 8006904:	ab03      	add	r3, sp, #12
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	4622      	mov	r2, r4
 800690a:	4b11      	ldr	r3, [pc, #68]	; (8006950 <_svfiprintf_r+0x1ec>)
 800690c:	a904      	add	r1, sp, #16
 800690e:	4640      	mov	r0, r8
 8006910:	f7fc fbba 	bl	8003088 <_printf_float>
 8006914:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006918:	4681      	mov	r9, r0
 800691a:	d1d6      	bne.n	80068ca <_svfiprintf_r+0x166>
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	065b      	lsls	r3, r3, #25
 8006920:	f53f af35 	bmi.w	800678e <_svfiprintf_r+0x2a>
 8006924:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006926:	b01d      	add	sp, #116	; 0x74
 8006928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692c:	ab03      	add	r3, sp, #12
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	4622      	mov	r2, r4
 8006932:	4b07      	ldr	r3, [pc, #28]	; (8006950 <_svfiprintf_r+0x1ec>)
 8006934:	a904      	add	r1, sp, #16
 8006936:	4640      	mov	r0, r8
 8006938:	f7fc fe52 	bl	80035e0 <_printf_i>
 800693c:	e7ea      	b.n	8006914 <_svfiprintf_r+0x1b0>
 800693e:	bf00      	nop
 8006940:	08006c4c 	.word	0x08006c4c
 8006944:	08006c52 	.word	0x08006c52
 8006948:	08006c56 	.word	0x08006c56
 800694c:	08003089 	.word	0x08003089
 8006950:	080066b1 	.word	0x080066b1

08006954 <_sbrk_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	2300      	movs	r3, #0
 8006958:	4c05      	ldr	r4, [pc, #20]	; (8006970 <_sbrk_r+0x1c>)
 800695a:	4605      	mov	r5, r0
 800695c:	4608      	mov	r0, r1
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	f7fa fc3c 	bl	80011dc <_sbrk>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_sbrk_r+0x1a>
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	b103      	cbz	r3, 800696e <_sbrk_r+0x1a>
 800696c:	602b      	str	r3, [r5, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	20000304 	.word	0x20000304

08006974 <strncmp>:
 8006974:	b510      	push	{r4, lr}
 8006976:	b16a      	cbz	r2, 8006994 <strncmp+0x20>
 8006978:	3901      	subs	r1, #1
 800697a:	1884      	adds	r4, r0, r2
 800697c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006980:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006984:	4293      	cmp	r3, r2
 8006986:	d103      	bne.n	8006990 <strncmp+0x1c>
 8006988:	42a0      	cmp	r0, r4
 800698a:	d001      	beq.n	8006990 <strncmp+0x1c>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f5      	bne.n	800697c <strncmp+0x8>
 8006990:	1a98      	subs	r0, r3, r2
 8006992:	bd10      	pop	{r4, pc}
 8006994:	4610      	mov	r0, r2
 8006996:	e7fc      	b.n	8006992 <strncmp+0x1e>

08006998 <__ascii_wctomb>:
 8006998:	b149      	cbz	r1, 80069ae <__ascii_wctomb+0x16>
 800699a:	2aff      	cmp	r2, #255	; 0xff
 800699c:	bf8b      	itete	hi
 800699e:	238a      	movhi	r3, #138	; 0x8a
 80069a0:	700a      	strbls	r2, [r1, #0]
 80069a2:	6003      	strhi	r3, [r0, #0]
 80069a4:	2001      	movls	r0, #1
 80069a6:	bf88      	it	hi
 80069a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80069ac:	4770      	bx	lr
 80069ae:	4608      	mov	r0, r1
 80069b0:	4770      	bx	lr

080069b2 <memmove>:
 80069b2:	4288      	cmp	r0, r1
 80069b4:	b510      	push	{r4, lr}
 80069b6:	eb01 0302 	add.w	r3, r1, r2
 80069ba:	d807      	bhi.n	80069cc <memmove+0x1a>
 80069bc:	1e42      	subs	r2, r0, #1
 80069be:	4299      	cmp	r1, r3
 80069c0:	d00a      	beq.n	80069d8 <memmove+0x26>
 80069c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069ca:	e7f8      	b.n	80069be <memmove+0xc>
 80069cc:	4283      	cmp	r3, r0
 80069ce:	d9f5      	bls.n	80069bc <memmove+0xa>
 80069d0:	1881      	adds	r1, r0, r2
 80069d2:	1ad2      	subs	r2, r2, r3
 80069d4:	42d3      	cmn	r3, r2
 80069d6:	d100      	bne.n	80069da <memmove+0x28>
 80069d8:	bd10      	pop	{r4, pc}
 80069da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80069e2:	e7f7      	b.n	80069d4 <memmove+0x22>

080069e4 <__malloc_lock>:
 80069e4:	4770      	bx	lr

080069e6 <__malloc_unlock>:
 80069e6:	4770      	bx	lr

080069e8 <_realloc_r>:
 80069e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ea:	4607      	mov	r7, r0
 80069ec:	4614      	mov	r4, r2
 80069ee:	460e      	mov	r6, r1
 80069f0:	b921      	cbnz	r1, 80069fc <_realloc_r+0x14>
 80069f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80069f6:	4611      	mov	r1, r2
 80069f8:	f7ff be00 	b.w	80065fc <_malloc_r>
 80069fc:	b922      	cbnz	r2, 8006a08 <_realloc_r+0x20>
 80069fe:	f7ff fdb1 	bl	8006564 <_free_r>
 8006a02:	4625      	mov	r5, r4
 8006a04:	4628      	mov	r0, r5
 8006a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a08:	f000 f814 	bl	8006a34 <_malloc_usable_size_r>
 8006a0c:	42a0      	cmp	r0, r4
 8006a0e:	d20f      	bcs.n	8006a30 <_realloc_r+0x48>
 8006a10:	4621      	mov	r1, r4
 8006a12:	4638      	mov	r0, r7
 8006a14:	f7ff fdf2 	bl	80065fc <_malloc_r>
 8006a18:	4605      	mov	r5, r0
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	d0f2      	beq.n	8006a04 <_realloc_r+0x1c>
 8006a1e:	4631      	mov	r1, r6
 8006a20:	4622      	mov	r2, r4
 8006a22:	f7ff f98d 	bl	8005d40 <memcpy>
 8006a26:	4631      	mov	r1, r6
 8006a28:	4638      	mov	r0, r7
 8006a2a:	f7ff fd9b 	bl	8006564 <_free_r>
 8006a2e:	e7e9      	b.n	8006a04 <_realloc_r+0x1c>
 8006a30:	4635      	mov	r5, r6
 8006a32:	e7e7      	b.n	8006a04 <_realloc_r+0x1c>

08006a34 <_malloc_usable_size_r>:
 8006a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a38:	1f18      	subs	r0, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bfbc      	itt	lt
 8006a3e:	580b      	ldrlt	r3, [r1, r0]
 8006a40:	18c0      	addlt	r0, r0, r3
 8006a42:	4770      	bx	lr

08006a44 <_init>:
 8006a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a46:	bf00      	nop
 8006a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4a:	bc08      	pop	{r3}
 8006a4c:	469e      	mov	lr, r3
 8006a4e:	4770      	bx	lr

08006a50 <_fini>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	bf00      	nop
 8006a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a56:	bc08      	pop	{r3}
 8006a58:	469e      	mov	lr, r3
 8006a5a:	4770      	bx	lr
